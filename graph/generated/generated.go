// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"ms.api/types"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CDD() CDDResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Acceptance struct {
		Content  func(childComplexity int) int
		ID       func(childComplexity int) int
		Identity func(childComplexity int) int
		Ts       func(childComplexity int) int
	}

	AcceptanceConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AcceptanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Account struct {
		AccountData    func(childComplexity int) int
		AccountDetails func(childComplexity int) int
		Active         func(childComplexity int) int
		ID             func(childComplexity int) int
		Image          func(childComplexity int) int
		Name           func(childComplexity int) int
		Organisation   func(childComplexity int) int
		Owner          func(childComplexity int) int
		Product        func(childComplexity int) int
		Status         func(childComplexity int) int
		Tags           func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Transactions   func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Ts             func(childComplexity int) int
	}

	AccountBalances struct {
		TotalBalance func(childComplexity int) int
	}

	AccountConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccountData struct {
		AccountHolderKey                func(childComplexity int) int
		AccountHolderType               func(childComplexity int) int
		AccountState                    func(childComplexity int) int
		AccountType                     func(childComplexity int) int
		AccruedAmounts                  func(childComplexity int) int
		ActivationDate                  func(childComplexity int) int
		ApprovedDate                    func(childComplexity int) int
		AssignedBranchKey               func(childComplexity int) int
		AssignedCentreKey               func(childComplexity int) int
		AssignedUserKey                 func(childComplexity int) int
		Balances                        func(childComplexity int) int
		ClosedDate                      func(childComplexity int) int
		CreationDate                    func(childComplexity int) int
		CreditArrangementKey            func(childComplexity int) int
		CurrencyCode                    func(childComplexity int) int
		EncodedKey                      func(childComplexity int) int
		ID                              func(childComplexity int) int
		InterestSettings                func(childComplexity int) int
		InternalControls                func(childComplexity int) int
		LastAccountAppraisalDate        func(childComplexity int) int
		LastInterestCalculationDate     func(childComplexity int) int
		LastInterestStoredDate          func(childComplexity int) int
		LastModifiedDate                func(childComplexity int) int
		LastOverdraftInterestReviewDate func(childComplexity int) int
		LastSetToArrearsDate            func(childComplexity int) int
		LinkedSettlementAccountKeys     func(childComplexity int) int
		LockedDate                      func(childComplexity int) int
		MaturityDate                    func(childComplexity int) int
		MigrationEventKey               func(childComplexity int) int
		Name                            func(childComplexity int) int
		Notes                           func(childComplexity int) int
		OverdraftInterestSettings       func(childComplexity int) int
		OverdraftSettings               func(childComplexity int) int
		ProductTypeKey                  func(childComplexity int) int
		WithholdingTaxSourceKey         func(childComplexity int) int
	}

	AccountDetails struct {
		AccountNumber    func(childComplexity int) int
		BankCode         func(childComplexity int) int
		Iban             func(childComplexity int) int
		RoutingNumber    func(childComplexity int) int
		SortCode         func(childComplexity int) int
		SwiftBic         func(childComplexity int) int
		VirtualAccountID func(childComplexity int) int
	}

	AccountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccountingRules struct {
		EncodedKey        func(childComplexity int) int
		FinancialResource func(childComplexity int) int
		GlKey             func(childComplexity int) int
	}

	AccruedAmounts struct {
		InterestAccrued                   func(childComplexity int) int
		NegativeInterestAccrued           func(childComplexity int) int
		OverdraftInterestAccrued          func(childComplexity int) int
		TechnicalOverdraftInterestAccrued func(childComplexity int) int
	}

	Action struct {
		ID       func(childComplexity int) int
		Notes    func(childComplexity int) int
		Reporter func(childComplexity int) int
		Status   func(childComplexity int) int
		Ts       func(childComplexity int) int
	}

	Activity struct {
		Archived      func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		RiskWeighting func(childComplexity int) int
		Supported     func(childComplexity int) int
		Ts            func(childComplexity int) int
	}

	Address struct {
		City     func(childComplexity int) int
		Country  func(childComplexity int) int
		County   func(childComplexity int) int
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
		Name     func(childComplexity int) int
		Owner    func(childComplexity int) int
		Postcode func(childComplexity int) int
		Primary  func(childComplexity int) int
		State    func(childComplexity int) int
		Street   func(childComplexity int) int
		Ts       func(childComplexity int) int
	}

	AddressConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AddressEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AffectedAmounts struct {
		FeesAmount                       func(childComplexity int) int
		FractionAmount                   func(childComplexity int) int
		FundsAmount                      func(childComplexity int) int
		InterestAmount                   func(childComplexity int) int
		OverdraftAmount                  func(childComplexity int) int
		OverdraftFeesAmount              func(childComplexity int) int
		OverdraftInterestAmount          func(childComplexity int) int
		TechnicalOverdraftAmount         func(childComplexity int) int
		TechnicalOverdraftInterestAmount func(childComplexity int) int
	}

	Auth struct {
		Attempts func(childComplexity int) int
		ID       func(childComplexity int) int
		Identity func(childComplexity int) int
		Session  func(childComplexity int) int
		Success  func(childComplexity int) int
		Ts       func(childComplexity int) int
	}

	AuthResponse struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Success func(childComplexity int) int
		Tokens  func(childComplexity int) int
	}

	AuthTokens struct {
		Auth    func(childComplexity int) int
		Refresh func(childComplexity int) int
	}

	Balances struct {
		AvailableBalance              func(childComplexity int) int
		BlockedBalance                func(childComplexity int) int
		FeesDue                       func(childComplexity int) int
		ForwardAvailableBalance       func(childComplexity int) int
		HoldBalance                   func(childComplexity int) int
		LockedBalance                 func(childComplexity int) int
		OverdraftAmount               func(childComplexity int) int
		OverdraftInterestDue          func(childComplexity int) int
		TechnicalOverdraftAmount      func(childComplexity int) int
		TechnicalOverdraftInterestDue func(childComplexity int) int
		TotalBalance                  func(childComplexity int) int
	}

	Beneficiary struct {
		Account  func(childComplexity int) int
		Amount   func(childComplexity int) int
		Currency func(childComplexity int) int
	}

	Cdd struct {
		Active      func(childComplexity int) int
		Details     func(childComplexity int) int
		ID          func(childComplexity int) int
		Onboard     func(childComplexity int) int
		Owner       func(childComplexity int) int
		Status      func(childComplexity int) int
		Ts          func(childComplexity int) int
		Validations func(childComplexity int, validationType *types.ValidationType, status []types.State) int
		Version     func(childComplexity int) int
		Watchlist   func(childComplexity int) int
	}

	CDDConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CDDEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Check struct {
		Data         func(childComplexity int) int
		ID           func(childComplexity int) int
		Organisation func(childComplexity int) int
		Owner        func(childComplexity int) int
		Status       func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	CheckConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CheckData struct {
		ApplicantID           func(childComplexity int) int
		ApplicantProvidesData func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		FormURI               func(childComplexity int) int
		Href                  func(childComplexity int) int
		ID                    func(childComplexity int) int
		Paused                func(childComplexity int) int
		RedirectURI           func(childComplexity int) int
		Reports               func(childComplexity int) int
		Result                func(childComplexity int) int
		ResultsURI            func(childComplexity int) int
		Sandbox               func(childComplexity int) int
		Status                func(childComplexity int) int
		Tags                  func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Version               func(childComplexity int) int
	}

	CheckEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Comment struct {
		Author func(childComplexity int) int
		Body   func(childComplexity int) int
		ID     func(childComplexity int) int
		Tags   func(childComplexity int) int
		Ts     func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	CommentConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CommentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Content struct {
		Abstract func(childComplexity int) int
		Body     func(childComplexity int) int
		Comments func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Current  func(childComplexity int) int
		ID       func(childComplexity int) int
		Keywords func(childComplexity int) int
		Source   func(childComplexity int) int
		Tags     func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Title    func(childComplexity int) int
		Ts       func(childComplexity int) int
		Type     func(childComplexity int) int
		URL      func(childComplexity int) int
		Version  func(childComplexity int) int
	}

	Country struct {
		Capital                       func(childComplexity int) int
		Continent                     func(childComplexity int) int
		CountryName                   func(childComplexity int) int
		Dial                          func(childComplexity int) int
		Ds                            func(childComplexity int) int
		Edgar                         func(childComplexity int) int
		Fifa                          func(childComplexity int) int
		Fips                          func(childComplexity int) int
		Gaul                          func(childComplexity int) int
		GeoNameID                     func(childComplexity int) int
		Ioc                           func(childComplexity int) int
		IsIndependent                 func(childComplexity int) int
		Iso3166_1Alpha2               func(childComplexity int) int
		Iso3166_1Alpha3               func(childComplexity int) int
		Iso4217CurrencyAlphabeticCode func(childComplexity int) int
		Iso4217CurrencyCountryName    func(childComplexity int) int
		Iso4217CurrencyMinorUnit      func(childComplexity int) int
		Iso4217CurrencyName           func(childComplexity int) int
		Iso4217CurrencyNumericCode    func(childComplexity int) int
		Itu                           func(childComplexity int) int
		Languages                     func(childComplexity int) int
		M49                           func(childComplexity int) int
		Marc                          func(childComplexity int) int
		OfficialNameEnglish           func(childComplexity int) int
		Tld                           func(childComplexity int) int
		Wmo                           func(childComplexity int) int
	}

	CountryConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CountryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Credentials struct {
		Identifier   func(childComplexity int) int
		RefreshToken func(childComplexity int) int
	}

	Currency struct {
		Code          func(childComplexity int) int
		DecimalDigits func(childComplexity int) int
		Name          func(childComplexity int) int
		NamePlural    func(childComplexity int) int
		Rounding      func(childComplexity int) int
		Symbol        func(childComplexity int) int
		SymbolNative  func(childComplexity int) int
	}

	CurrencyConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CurrencyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Device struct {
		Active     func(childComplexity int) int
		Brand      func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Name       func(childComplexity int) int
		Os         func(childComplexity int) int
		Owner      func(childComplexity int) int
		Primary    func(childComplexity int) int
		Tokens     func(childComplexity int) int
		Ts         func(childComplexity int) int
		Type       func(childComplexity int) int
		Verified   func(childComplexity int) int
	}

	DeviceConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeviceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeviceToken struct {
		Ts    func(childComplexity int) int
		Type  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Email struct {
		Alias    func(childComplexity int) int
		Name     func(childComplexity int) int
		Primary  func(childComplexity int) int
		Type     func(childComplexity int) int
		Value    func(childComplexity int) int
		Verified func(childComplexity int) int
	}

	Fee struct {
		Fee           func(childComplexity int) int
		LowerBoundary func(childComplexity int) int
		UpperBoundary func(childComplexity int) int
	}

	Fx struct {
		BaseCurrency func(childComplexity int) int
		BuyRate      func(childComplexity int) int
		Currency     func(childComplexity int) int
		SellRate     func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	FxConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FxEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Identity struct {
		Active         func(childComplexity int) int
		Authentication func(childComplexity int) int
		Credentials    func(childComplexity int) int
		Devices        func(childComplexity int) int
		ID             func(childComplexity int) int
		Nickname       func(childComplexity int) int
		Organisation   func(childComplexity int) int
		Owner          func(childComplexity int) int
		Status         func(childComplexity int) int
		Ts             func(childComplexity int) int
	}

	ImageAssets struct {
		Image func(childComplexity int) int
		Safe  func(childComplexity int) int
		Svg   func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	Industry struct {
		Code        func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Score       func(childComplexity int) int
		Section     func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	IndustryConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IndustryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InterestPaymentDates struct {
		Day   func(childComplexity int) int
		Month func(childComplexity int) int
	}

	InterestPaymentSettings struct {
		InterestPaymentDates func(childComplexity int) int
		InterestPaymentPoint func(childComplexity int) int
	}

	InterestRate struct {
		DefaultValue func(childComplexity int) int
		MaxValue     func(childComplexity int) int
		MinValue     func(childComplexity int) int
	}

	InterestRateSettings struct {
		EncodedKey                   func(childComplexity int) int
		InterestChargeFrequency      func(childComplexity int) int
		InterestChargeFrequencyCount func(childComplexity int) int
		InterestRate                 func(childComplexity int) int
		InterestRateReviewCount      func(childComplexity int) int
		InterestRateReviewUnit       func(childComplexity int) int
		InterestRateSource           func(childComplexity int) int
		InterestRateTerms            func(childComplexity int) int
		InterestRateTiers            func(childComplexity int) int
		InterestSpread               func(childComplexity int) int
	}

	InterestRateTiers struct {
		EncodedKey    func(childComplexity int) int
		EndingBalance func(childComplexity int) int
		EndingDay     func(childComplexity int) int
		InterestRate  func(childComplexity int) int
	}

	InterestSettings struct {
		ChargeFrequency            func(childComplexity int) int
		ChargeFrequencyCount       func(childComplexity int) int
		DaysInYear                 func(childComplexity int) int
		IndexSourceKey             func(childComplexity int) int
		InterestCalculationBalance func(childComplexity int) int
		InterestPaymentSettings    func(childComplexity int) int
		InterestRate               func(childComplexity int) int
		InterestRateReviewUnit     func(childComplexity int) int
		InterestRateSettings       func(childComplexity int) int
		RateReviewCount            func(childComplexity int) int
		RateSource                 func(childComplexity int) int
		RateTerms                  func(childComplexity int) int
		RateTiers                  func(childComplexity int) int
	}

	InternalControls struct {
		MaxDepositBalance        func(childComplexity int) int
		MaxWithdrawalAmount      func(childComplexity int) int
		RecommendedDepositAmount func(childComplexity int) int
		TargetAmount             func(childComplexity int) int
	}

	Location struct {
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
	}

	Message struct {
		Body         func(childComplexity int) int
		DeliveryMode func(childComplexity int) int
		HasRead      func(childComplexity int) int
		ID           func(childComplexity int) int
		Owner        func(childComplexity int) int
		Sender       func(childComplexity int) int
		Sent         func(childComplexity int) int
		Status       func(childComplexity int) int
		Target       func(childComplexity int) int
		Title        func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	MessageConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MessageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		AcceptTerms                     func(childComplexity int, documents []*string) int
		AddPayeeAccount                 func(childComplexity int, payee string, payeeAccount types.PayeeAccountInput) int
		ConfirmPasscodeResetOtp         func(childComplexity int, email string, otp string) int
		ConfirmPhone                    func(childComplexity int, token string, code string) int
		CreateAccount                   func(childComplexity int, product types.ProductInput) int
		CreateApplication               func(childComplexity int) int
		CreatePayee                     func(childComplexity int, payee types.PayeeInput, password string) int
		CreatePayment                   func(childComplexity int, payment types.PaymentInput, password string) int
		CreatePhone                     func(childComplexity int, phone string, device types.DeviceInput) int
		CreateTransactionPassword       func(childComplexity int, password string) int
		DeletePayeeAccount              func(childComplexity int, payee string, payeeAccount string) int
		IntendedActivities              func(childComplexity int, activities []string) int
		Login                           func(childComplexity int, credentials types.AuthInput) int
		LoginWithToken                  func(childComplexity int, token string, authType types.AuthType) int
		RefreshToken                    func(childComplexity int, token string) int
		Register                        func(childComplexity int, person types.PersonInput, address types.AddressInput) int
		RequestOtp                      func(childComplexity int, typeArg types.DeliveryMode, target string, expireTime *int64) int
		RequestPasscodeReset            func(childComplexity int, email string, device types.DeviceInput) int
		RequestTransactionPasscodeReset func(childComplexity int, email string) int
		ResendEmailMagicLInk            func(childComplexity int, email string) int
		ResendOtp                       func(childComplexity int, phone string) int
		ResetPasscode                   func(childComplexity int, token string, email string, passcode string) int
		ResetTransactionPasscode        func(childComplexity int, email string, currentPasscode string, newPasscode string) int
		Resubmit                        func(childComplexity int, reports []*types.ReportInput, message *string) int
		ResubmitReports                 func(childComplexity int, reports []*types.ReportInput) int
		SetDevicePreference             func(childComplexity int, typeArg types.DevicePreferenceType, status bool) int
		Signup                          func(childComplexity int, token string, email string, passcode string) int
		SubmitApplication               func(childComplexity int) int
		SubmitProof                     func(childComplexity int, proof types.SubmitProofInput) int
		UpdateDeviceToken               func(childComplexity int, token []*types.DeviceTokenInput) int
		UpdatePayee                     func(childComplexity int, payee string, payeeInput *types.PayeeInput, password string) int
		UpdateValidationStatus          func(childComplexity int, validation string, status types.State, message string) int
		ValidateBvn                     func(childComplexity int, bvn string, phone string) int
		ValidateEmail                   func(childComplexity int, email string, device types.DeviceInput) int
		ValidateUser                    func(childComplexity int, user types.ValidateUserInput) int
		VerifyEmail                     func(childComplexity int, email string, code string) int
		VerifyOtp                       func(childComplexity int, target string, token string) int
	}

	OpeningBalance struct {
		DefaultValue func(childComplexity int) int
		Max          func(childComplexity int) int
		Min          func(childComplexity int) int
	}

	OrgLocation struct {
		City        func(childComplexity int) int
		Continent   func(childComplexity int) int
		Country     func(childComplexity int) int
		CountryCode func(childComplexity int) int
		State       func(childComplexity int) int
	}

	Organisation struct {
		Addresses   func(childComplexity int) int
		Banner      func(childComplexity int) int
		Description func(childComplexity int) int
		Domain      func(childComplexity int) int
		Email       func(childComplexity int) int
		Employees   func(childComplexity int) int
		ID          func(childComplexity int) int
		Identities  func(childComplexity int) int
		ImageAssets func(childComplexity int) int
		Industries  func(childComplexity int) int
		Keywords    func(childComplexity int) int
		Language    func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		Raised      func(childComplexity int) int
		Revenue     func(childComplexity int) int
		Social      func(childComplexity int) int
		Ts          func(childComplexity int) int
	}

	OrganisationConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganisationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OverdraftInterestSettings struct {
		InterestRateSettings func(childComplexity int) int
	}

	OverdraftSetting struct {
		AllowOverdraft          func(childComplexity int) int
		AllowTechnicalOverdraft func(childComplexity int) int
		InterestSettings        func(childComplexity int) int
		MaxLimit                func(childComplexity int) int
	}

	OverdraftSettings struct {
		AllowOverdraft      func(childComplexity int) int
		OverdraftExpiryDate func(childComplexity int) int
		OverdraftLimit      func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Payee struct {
		Accounts func(childComplexity int) int
		Avatar   func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Owner    func(childComplexity int) int
		Ts       func(childComplexity int) int
	}

	PayeeAccount struct {
		AccountNumber func(childComplexity int) int
		BankCode      func(childComplexity int) int
		Currency      func(childComplexity int) int
		ID            func(childComplexity int) int
		Iban          func(childComplexity int) int
		Name          func(childComplexity int) int
		PhoneNumber   func(childComplexity int) int
		RoutingNumber func(childComplexity int) int
		SortCode      func(childComplexity int) int
		SwiftBic      func(childComplexity int) int
	}

	PayeeConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PayeeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Payment struct {
		Beneficiary    func(childComplexity int) int
		Charge         func(childComplexity int) int
		Currency       func(childComplexity int) int
		FundingAmount  func(childComplexity int) int
		FundingSource  func(childComplexity int) int
		ID             func(childComplexity int) int
		IdempotencyKey func(childComplexity int) int
		Image          func(childComplexity int) int
		Notes          func(childComplexity int) int
		Owner          func(childComplexity int) int
		Quote          func(childComplexity int) int
		Reference      func(childComplexity int) int
		Status         func(childComplexity int) int
		Tags           func(childComplexity int) int
		Ts             func(childComplexity int) int
	}

	PaymentConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PaymentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Person struct {
		Activities       func(childComplexity int) int
		Addresses        func(childComplexity int) int
		Bvn              func(childComplexity int) int
		Cdd              func(childComplexity int) int
		CountryResidence func(childComplexity int) int
		Dob              func(childComplexity int) int
		Emails           func(childComplexity int) int
		Employer         func(childComplexity int) int
		FirstName        func(childComplexity int) int
		ID               func(childComplexity int) int
		Identities       func(childComplexity int) int
		LastName         func(childComplexity int) int
		MiddleName       func(childComplexity int) int
		Nationality      func(childComplexity int) int
		OnboardingStatus func(childComplexity int) int
		Phones           func(childComplexity int) int
		Status           func(childComplexity int) int
		Title            func(childComplexity int) int
		Ts               func(childComplexity int) int
	}

	PersonConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PersonEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Phone struct {
		Carrier  func(childComplexity int) int
		Name     func(childComplexity int) int
		Primary  func(childComplexity int) int
		Type     func(childComplexity int) int
		Value    func(childComplexity int) int
		Verified func(childComplexity int) int
	}

	Product struct {
		Details        func(childComplexity int) int
		ID             func(childComplexity int) int
		Identification func(childComplexity int) int
		Scheme         func(childComplexity int) int
		Ts             func(childComplexity int) int
	}

	ProductConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductControl struct {
		DormancyPeriodDays       func(childComplexity int) int
		MaxWithdrawalAmount      func(childComplexity int) int
		OpeningBalance           func(childComplexity int) int
		RecommendedDepositAmount func(childComplexity int) int
	}

	ProductDetails struct {
		AllowOffset           func(childComplexity int) int
		Category              func(childComplexity int) int
		CreditRequirement     func(childComplexity int) int
		Currency              func(childComplexity int) int
		InterestSetting       func(childComplexity int) int
		Name                  func(childComplexity int) int
		Notes                 func(childComplexity int) int
		OverdraftSetting      func(childComplexity int) int
		ProductControl        func(childComplexity int) int
		ProductFees           func(childComplexity int) int
		ProductMaturity       func(childComplexity int) int
		ProductSetting        func(childComplexity int) int
		ProductTemplates      func(childComplexity int) int
		State                 func(childComplexity int) int
		Type                  func(childComplexity int) int
		WithholdingTaxEnabled func(childComplexity int) int
	}

	ProductEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductFees struct {
		AccountingRules   func(childComplexity int) int
		Amount            func(childComplexity int) int
		ApplyDateMethod   func(childComplexity int) int
		CalculationMethod func(childComplexity int) int
		CreationDate      func(childComplexity int) int
		EncodedKey        func(childComplexity int) int
		FeeApplication    func(childComplexity int) int
		LastModified      func(childComplexity int) int
		Name              func(childComplexity int) int
		State             func(childComplexity int) int
		Trigger           func(childComplexity int) int
	}

	ProductInterestSetting struct {
		CollectInterestWhenLocked  func(childComplexity int) int
		DaysInYear                 func(childComplexity int) int
		InterestCalculationBalance func(childComplexity int) int
		InterestPaidIntoAccount    func(childComplexity int) int
		InterestPaymentDates       func(childComplexity int) int
		InterestPaymentPoint       func(childComplexity int) int
		MaximumBalance             func(childComplexity int) int
		RateSetting                func(childComplexity int) int
	}

	ProductMaturity struct {
		DefaultValue func(childComplexity int) int
		Max          func(childComplexity int) int
		Min          func(childComplexity int) int
		Unit         func(childComplexity int) int
	}

	ProductSetting struct {
		AccountingMethod   func(childComplexity int) int
		AccountingRules    func(childComplexity int) int
		InterestAccounting func(childComplexity int) int
	}

	ProductTemplates struct {
		CreationDate     func(childComplexity int) int
		EncodedKey       func(childComplexity int) int
		LastModifiedDate func(childComplexity int) int
		Name             func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	Proof struct {
		Data         func(childComplexity int) int
		ID           func(childComplexity int) int
		Organisation func(childComplexity int) int
		Review       func(childComplexity int) int
		Status       func(childComplexity int) int
		Ts           func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	ProofConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProofEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Acceptance        func(childComplexity int, id string) int
		Acceptances       func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Account           func(childComplexity int, id string) int
		Accounts          func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Activities        func(childComplexity int, supported *bool) int
		Activity          func(childComplexity int, id string) int
		Address           func(childComplexity int, id string) int
		AddressLookup     func(childComplexity int, text *string, first *int64, after *string, last *int64, before *string) int
		Addresses         func(childComplexity int) int
		Auths             func(childComplexity int) int
		Cdd               func(childComplexity int, id string) int
		Cdds              func(childComplexity int, keywords *string, status []types.State, first *int64, after *string, last *int64, before *string) int
		Check             func(childComplexity int, id string) int
		CheckEmail        func(childComplexity int, email string) int
		Checks            func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Comment           func(childComplexity int, id string) int
		Comments          func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Countries         func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Country           func(childComplexity int, code string) int
		Currencies        func(childComplexity int, supported *bool, first *int64, after *string, last *int64, before *string) int
		Currency          func(childComplexity int, code string) int
		Device            func(childComplexity int, identifier string) int
		Devices           func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Fx                func(childComplexity int, currency string, baseCurrency string) int
		GetOnfidoSDKToken func(childComplexity int) int
		Identities        func(childComplexity int) int
		Identity          func(childComplexity int, id string) int
		Industries        func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Industry          func(childComplexity int, code string) int
		Me                func(childComplexity int) int
		MeStaff           func(childComplexity int) int
		Message           func(childComplexity int, id string) int
		Messages          func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Node              func(childComplexity int, id string) int
		Organisation      func(childComplexity int, id string) int
		Organisations     func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Payee             func(childComplexity int, id string) int
		Payees            func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Payment           func(childComplexity int, id string) int
		Payments          func(childComplexity int, first *int64, after *string, last *int64, before *string, filter *types.PaymentFilter) int
		People            func(childComplexity int, keywords *string, first *int64, after *string, last *int64, before *string, onboarded *bool) int
		Person            func(childComplexity int, id string) int
		Price             func(childComplexity int, pair *string, ts *int64) int
		Prices            func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Product           func(childComplexity int, id string) int
		Products          func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Proof             func(childComplexity int, id string) int
		Proofs            func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Quote             func(childComplexity int, id string) int
		Quotes            func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Report            func(childComplexity int, id string) int
		Reports           func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Screen            func(childComplexity int, id string) int
		Screens           func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Tag               func(childComplexity int, id string) int
		Tags              func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Task              func(childComplexity int, id string) int
		Tasks             func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Transaction       func(childComplexity int, id string) int
		Transactions      func(childComplexity int, first *int64, after *string, last *int64, before *string, account string, payments []string) int
		TransferFees      func(childComplexity int, currency string, baseCurrency string) int
		Validation        func(childComplexity int, id string) int
		Validations       func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Verification      func(childComplexity int, code string) int
		Verifications     func(childComplexity int, first *int64, after *string, last *int64, before *string) int
	}

	Quote struct {
		Expires   func(childComplexity int) int
		Fee       func(childComplexity int) int
		Fx        func(childComplexity int) int
		HasExpiry func(childComplexity int) int
		ID        func(childComplexity int) int
		Ts        func(childComplexity int) int
	}

	QuoteConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QuoteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RateSetting struct {
		AccrueAfterMaturity  func(childComplexity int) int
		ChargeFrequency      func(childComplexity int) int
		ChargeFrequencyCount func(childComplexity int) int
		IndexSourceKey       func(childComplexity int) int
		InterestRate         func(childComplexity int) int
		RateSource           func(childComplexity int) int
		RateTerms            func(childComplexity int) int
		RateTiers            func(childComplexity int) int
	}

	RateTiers struct {
		EncodedKey    func(childComplexity int) int
		EndingBalance func(childComplexity int) int
		EndingDay     func(childComplexity int) int
		InterestRate  func(childComplexity int) int
	}

	Report struct {
		Data         func(childComplexity int) int
		ID           func(childComplexity int) int
		Organisation func(childComplexity int) int
		Review       func(childComplexity int) int
		Status       func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	ReportConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReportEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReportReviewStatus struct {
		Message  func(childComplexity int) int
		Resubmit func(childComplexity int) int
	}

	Response struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Success func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Screen struct {
		Data         func(childComplexity int) int
		ID           func(childComplexity int) int
		Organisation func(childComplexity int) int
		Status       func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	ScreenConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScreenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Social struct {
		Crunchbase func(childComplexity int) int
		Facebook   func(childComplexity int) int
		Github     func(childComplexity int) int
		Instagram  func(childComplexity int) int
		Linkedin   func(childComplexity int) int
		Medium     func(childComplexity int) int
		Pinterest  func(childComplexity int) int
		Twitter    func(childComplexity int) int
		Youtube    func(childComplexity int) int
	}

	Staff struct {
		Emails     func(childComplexity int) int
		FirstName  func(childComplexity int) int
		ID         func(childComplexity int) int
		Identities func(childComplexity int) int
		LastName   func(childComplexity int) int
		Phones     func(childComplexity int) int
		Status     func(childComplexity int) int
		Ts         func(childComplexity int) int
	}

	Subscription struct {
		Accounts func(childComplexity int, first *int64, after *string, last *int64, before *string, token string) int
		Cdd      func(childComplexity int, id string) int
		Cdds     func(childComplexity int, keywords *string, status []types.State, first *int64, after *string, last *int64, before *string) int
	}

	Tag struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Ts   func(childComplexity int) int
	}

	TagConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TagEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Task struct {
		Approved func(childComplexity int) int
		Approver func(childComplexity int) int
		Assignee func(childComplexity int) int
		Comments func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		ID       func(childComplexity int) int
		Notes    func(childComplexity int) int
		Reporter func(childComplexity int) int
		Stage    func(childComplexity int) int
		Tags     func(childComplexity int, first *int64, after *string, last *int64, before *string) int
		Ts       func(childComplexity int) int
		Version  func(childComplexity int) int
	}

	TaskConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Transaction struct {
		Account         func(childComplexity int) int
		ID              func(childComplexity int) int
		TransactionData func(childComplexity int) int
		Ts              func(childComplexity int) int
	}

	TransactionConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TransactionData struct {
		AccountBalances  func(childComplexity int) int
		AffectedAmounts  func(childComplexity int) int
		Amount           func(childComplexity int) int
		BookingDate      func(childComplexity int) int
		CreationDate     func(childComplexity int) int
		CurrencyCode     func(childComplexity int) int
		EncodedKey       func(childComplexity int) int
		ExternalID       func(childComplexity int) int
		Fees             func(childComplexity int) int
		ID               func(childComplexity int) int
		Notes            func(childComplexity int) int
		ParentAccountKey func(childComplexity int) int
		PaymentOrderID   func(childComplexity int) int
		TransferDetails  func(childComplexity int) int
		Type             func(childComplexity int) int
		UserKey          func(childComplexity int) int
		ValueDate        func(childComplexity int) int
	}

	TransactionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TransactionFee struct {
		Amount           func(childComplexity int) int
		Name             func(childComplexity int) int
		PredefinedFeeKey func(childComplexity int) int
		TaxAmount        func(childComplexity int) int
		Trigger          func(childComplexity int) int
	}

	TransferDetails struct {
		LinkedLoanTransactionKey func(childComplexity int) int
	}

	TransferFees struct {
		BaseCurrency func(childComplexity int) int
		Currency     func(childComplexity int) int
		Fees         func(childComplexity int) int
		Ts           func(childComplexity int) int
	}

	Validation struct {
		Actions        func(childComplexity int) int
		Applicant      func(childComplexity int) int
		Approved       func(childComplexity int) int
		Data           func(childComplexity int) int
		ID             func(childComplexity int) int
		Organisation   func(childComplexity int) int
		Status         func(childComplexity int) int
		Ts             func(childComplexity int) int
		ValidationType func(childComplexity int) int
	}

	ValidationConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ValidationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	VariableFee struct {
		AppliedRate func(childComplexity int) int
		BaseRate    func(childComplexity int) int
		Discount    func(childComplexity int) int
		Partner     func(childComplexity int) int
	}

	Verification struct {
		Code      func(childComplexity int) int
		ID        func(childComplexity int) int
		Target    func(childComplexity int) int
		Ts        func(childComplexity int) int
		Type      func(childComplexity int) int
		Validated func(childComplexity int) int
	}

	VerificationConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VerificationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type CDDResolver interface {
	Validations(ctx context.Context, obj *types.Cdd, validationType *types.ValidationType, status []types.State) ([]*types.Validation, error)
}
type MutationResolver interface {
	CreatePhone(ctx context.Context, phone string, device types.DeviceInput) (*types.Response, error)
	ConfirmPhone(ctx context.Context, token string, code string) (*types.Response, error)
	Signup(ctx context.Context, token string, email string, passcode string) (*types.AuthResponse, error)
	Register(ctx context.Context, person types.PersonInput, address types.AddressInput) (*types.Person, error)
	IntendedActivities(ctx context.Context, activities []string) (*types.Response, error)
	CreateApplication(ctx context.Context) (*types.Response, error)
	VerifyEmail(ctx context.Context, email string, code string) (*types.Response, error)
	ResendOtp(ctx context.Context, phone string) (*types.Response, error)
	ResendEmailMagicLInk(ctx context.Context, email string) (*types.Response, error)
	Login(ctx context.Context, credentials types.AuthInput) (*types.AuthResponse, error)
	LoginWithToken(ctx context.Context, token string, authType types.AuthType) (*types.AuthResponse, error)
	RefreshToken(ctx context.Context, token string) (*types.AuthResponse, error)
	UpdateDeviceToken(ctx context.Context, token []*types.DeviceTokenInput) (*types.Response, error)
	ResetPasscode(ctx context.Context, token string, email string, passcode string) (*types.Response, error)
	RequestPasscodeReset(ctx context.Context, email string, device types.DeviceInput) (*types.Response, error)
	ConfirmPasscodeResetOtp(ctx context.Context, email string, otp string) (*types.Response, error)
	SubmitApplication(ctx context.Context) (*types.Response, error)
	AcceptTerms(ctx context.Context, documents []*string) (*types.Response, error)
	UpdateValidationStatus(ctx context.Context, validation string, status types.State, message string) (*types.Response, error)
	SubmitProof(ctx context.Context, proof types.SubmitProofInput) (*types.Response, error)
	CreateTransactionPassword(ctx context.Context, password string) (*types.Response, error)
	CreateAccount(ctx context.Context, product types.ProductInput) (*types.Response, error)
	CreatePayee(ctx context.Context, payee types.PayeeInput, password string) (*types.Response, error)
	UpdatePayee(ctx context.Context, payee string, payeeInput *types.PayeeInput, password string) (*types.Response, error)
	AddPayeeAccount(ctx context.Context, payee string, payeeAccount types.PayeeAccountInput) (*types.Response, error)
	DeletePayeeAccount(ctx context.Context, payee string, payeeAccount string) (*types.Response, error)
	Resubmit(ctx context.Context, reports []*types.ReportInput, message *string) (*types.Response, error)
	ResubmitReports(ctx context.Context, reports []*types.ReportInput) (*types.Response, error)
	CreatePayment(ctx context.Context, payment types.PaymentInput, password string) (*types.Response, error)
	ValidateBvn(ctx context.Context, bvn string, phone string) (*types.Response, error)
	RequestOtp(ctx context.Context, typeArg types.DeliveryMode, target string, expireTime *int64) (*types.Response, error)
	VerifyOtp(ctx context.Context, target string, token string) (*types.Response, error)
	ValidateEmail(ctx context.Context, email string, device types.DeviceInput) (*types.Response, error)
	ValidateUser(ctx context.Context, user types.ValidateUserInput) (*types.Response, error)
	RequestTransactionPasscodeReset(ctx context.Context, email string) (*types.Response, error)
	ResetTransactionPasscode(ctx context.Context, email string, currentPasscode string, newPasscode string) (*types.Response, error)
	SetDevicePreference(ctx context.Context, typeArg types.DevicePreferenceType, status bool) (*types.Response, error)
}
type QueryResolver interface {
	Me(ctx context.Context) (*types.Person, error)
	MeStaff(ctx context.Context) (*types.Staff, error)
	Person(ctx context.Context, id string) (*types.Person, error)
	People(ctx context.Context, keywords *string, first *int64, after *string, last *int64, before *string, onboarded *bool) (*types.PersonConnection, error)
	Identity(ctx context.Context, id string) (*types.Identity, error)
	Identities(ctx context.Context) ([]*types.Identity, error)
	CheckEmail(ctx context.Context, email string) (*bool, error)
	Address(ctx context.Context, id string) (*types.Address, error)
	Addresses(ctx context.Context) (*types.AddressConnection, error)
	AddressLookup(ctx context.Context, text *string, first *int64, after *string, last *int64, before *string) (*types.AddressConnection, error)
	Device(ctx context.Context, identifier string) (*types.Device, error)
	Devices(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.DeviceConnection, error)
	Auths(ctx context.Context) ([]*types.Auth, error)
	Organisation(ctx context.Context, id string) (*types.Organisation, error)
	Organisations(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.OrganisationConnection, error)
	Verification(ctx context.Context, code string) (*types.Verification, error)
	Verifications(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.VerificationConnection, error)
	Country(ctx context.Context, code string) (*types.Country, error)
	Countries(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.CountryConnection, error)
	Currency(ctx context.Context, code string) (*types.Currency, error)
	Currencies(ctx context.Context, supported *bool, first *int64, after *string, last *int64, before *string) (*types.CurrencyConnection, error)
	Industry(ctx context.Context, code string) (*types.Industry, error)
	Industries(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.IndustryConnection, error)
	Activity(ctx context.Context, id string) (*types.Activity, error)
	Activities(ctx context.Context, supported *bool) ([]*types.Activity, error)
	Message(ctx context.Context, id string) (*types.Message, error)
	Messages(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.MessageConnection, error)
	Quote(ctx context.Context, id string) (*types.Quote, error)
	Quotes(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.QuoteConnection, error)
	Price(ctx context.Context, pair *string, ts *int64) (*types.Fx, error)
	Prices(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.FxConnection, error)
	Tag(ctx context.Context, id string) (*types.Task, error)
	Tags(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.TagConnection, error)
	Cdd(ctx context.Context, id string) (*types.Cdd, error)
	Cdds(ctx context.Context, keywords *string, status []types.State, first *int64, after *string, last *int64, before *string) (*types.CDDConnection, error)
	Validation(ctx context.Context, id string) (*types.Validation, error)
	Validations(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.ValidationConnection, error)
	Check(ctx context.Context, id string) (*types.Check, error)
	Checks(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.CheckConnection, error)
	Screen(ctx context.Context, id string) (*types.Screen, error)
	Screens(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.ScreenConnection, error)
	Report(ctx context.Context, id string) (*types.Report, error)
	Reports(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.ReportConnection, error)
	Proof(ctx context.Context, id string) (*types.Proof, error)
	Proofs(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.ProofConnection, error)
	Task(ctx context.Context, id string) (*types.Task, error)
	Tasks(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.TaskConnection, error)
	Comment(ctx context.Context, id string) (*types.Comment, error)
	Comments(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.CommentConnection, error)
	Product(ctx context.Context, id string) (*types.Product, error)
	Products(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.ProductConnection, error)
	Account(ctx context.Context, id string) (*types.Account, error)
	Accounts(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.AccountConnection, error)
	Payee(ctx context.Context, id string) (*types.Payee, error)
	Payees(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.PayeeConnection, error)
	Payment(ctx context.Context, id string) (*types.Payment, error)
	Payments(ctx context.Context, first *int64, after *string, last *int64, before *string, filter *types.PaymentFilter) (*types.PaymentConnection, error)
	Transaction(ctx context.Context, id string) (*types.Transaction, error)
	Transactions(ctx context.Context, first *int64, after *string, last *int64, before *string, account string, payments []string) (*types.TransactionConnection, error)
	Fx(ctx context.Context, currency string, baseCurrency string) (*types.Fx, error)
	TransferFees(ctx context.Context, currency string, baseCurrency string) (*types.TransferFees, error)
	Acceptance(ctx context.Context, id string) (*types.Acceptance, error)
	Acceptances(ctx context.Context, first *int64, after *string, last *int64, before *string) (*types.AcceptanceConnection, error)
	Node(ctx context.Context, id string) (types.Node, error)
	GetOnfidoSDKToken(ctx context.Context) (*types.Response, error)
}
type SubscriptionResolver interface {
	Cdds(ctx context.Context, keywords *string, status []types.State, first *int64, after *string, last *int64, before *string) (<-chan *types.CDDConnection, error)
	Cdd(ctx context.Context, id string) (<-chan *types.Cdd, error)
	Accounts(ctx context.Context, first *int64, after *string, last *int64, before *string, token string) (<-chan *types.AccountConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Acceptance.content":
		if e.complexity.Acceptance.Content == nil {
			break
		}

		return e.complexity.Acceptance.Content(childComplexity), true

	case "Acceptance.id":
		if e.complexity.Acceptance.ID == nil {
			break
		}

		return e.complexity.Acceptance.ID(childComplexity), true

	case "Acceptance.identity":
		if e.complexity.Acceptance.Identity == nil {
			break
		}

		return e.complexity.Acceptance.Identity(childComplexity), true

	case "Acceptance.ts":
		if e.complexity.Acceptance.Ts == nil {
			break
		}

		return e.complexity.Acceptance.Ts(childComplexity), true

	case "AcceptanceConnection.edges":
		if e.complexity.AcceptanceConnection.Edges == nil {
			break
		}

		return e.complexity.AcceptanceConnection.Edges(childComplexity), true

	case "AcceptanceConnection.nodes":
		if e.complexity.AcceptanceConnection.Nodes == nil {
			break
		}

		return e.complexity.AcceptanceConnection.Nodes(childComplexity), true

	case "AcceptanceConnection.pageInfo":
		if e.complexity.AcceptanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.AcceptanceConnection.PageInfo(childComplexity), true

	case "AcceptanceConnection.totalCount":
		if e.complexity.AcceptanceConnection.TotalCount == nil {
			break
		}

		return e.complexity.AcceptanceConnection.TotalCount(childComplexity), true

	case "AcceptanceEdge.cursor":
		if e.complexity.AcceptanceEdge.Cursor == nil {
			break
		}

		return e.complexity.AcceptanceEdge.Cursor(childComplexity), true

	case "AcceptanceEdge.node":
		if e.complexity.AcceptanceEdge.Node == nil {
			break
		}

		return e.complexity.AcceptanceEdge.Node(childComplexity), true

	case "Account.account_data":
		if e.complexity.Account.AccountData == nil {
			break
		}

		return e.complexity.Account.AccountData(childComplexity), true

	case "Account.account_details":
		if e.complexity.Account.AccountDetails == nil {
			break
		}

		return e.complexity.Account.AccountDetails(childComplexity), true

	case "Account.active":
		if e.complexity.Account.Active == nil {
			break
		}

		return e.complexity.Account.Active(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.image":
		if e.complexity.Account.Image == nil {
			break
		}

		return e.complexity.Account.Image(childComplexity), true

	case "Account.name":
		if e.complexity.Account.Name == nil {
			break
		}

		return e.complexity.Account.Name(childComplexity), true

	case "Account.organisation":
		if e.complexity.Account.Organisation == nil {
			break
		}

		return e.complexity.Account.Organisation(childComplexity), true

	case "Account.owner":
		if e.complexity.Account.Owner == nil {
			break
		}

		return e.complexity.Account.Owner(childComplexity), true

	case "Account.product":
		if e.complexity.Account.Product == nil {
			break
		}

		return e.complexity.Account.Product(childComplexity), true

	case "Account.status":
		if e.complexity.Account.Status == nil {
			break
		}

		return e.complexity.Account.Status(childComplexity), true

	case "Account.tags":
		if e.complexity.Account.Tags == nil {
			break
		}

		args, err := ec.field_Account_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.Tags(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Account.transactions":
		if e.complexity.Account.Transactions == nil {
			break
		}

		args, err := ec.field_Account_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.Transactions(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Account.ts":
		if e.complexity.Account.Ts == nil {
			break
		}

		return e.complexity.Account.Ts(childComplexity), true

	case "AccountBalances.total_balance":
		if e.complexity.AccountBalances.TotalBalance == nil {
			break
		}

		return e.complexity.AccountBalances.TotalBalance(childComplexity), true

	case "AccountConnection.edges":
		if e.complexity.AccountConnection.Edges == nil {
			break
		}

		return e.complexity.AccountConnection.Edges(childComplexity), true

	case "AccountConnection.nodes":
		if e.complexity.AccountConnection.Nodes == nil {
			break
		}

		return e.complexity.AccountConnection.Nodes(childComplexity), true

	case "AccountConnection.pageInfo":
		if e.complexity.AccountConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountConnection.PageInfo(childComplexity), true

	case "AccountConnection.totalCount":
		if e.complexity.AccountConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccountConnection.TotalCount(childComplexity), true

	case "AccountData.account_holder_key":
		if e.complexity.AccountData.AccountHolderKey == nil {
			break
		}

		return e.complexity.AccountData.AccountHolderKey(childComplexity), true

	case "AccountData.account_holder_type":
		if e.complexity.AccountData.AccountHolderType == nil {
			break
		}

		return e.complexity.AccountData.AccountHolderType(childComplexity), true

	case "AccountData.account_state":
		if e.complexity.AccountData.AccountState == nil {
			break
		}

		return e.complexity.AccountData.AccountState(childComplexity), true

	case "AccountData.account_type":
		if e.complexity.AccountData.AccountType == nil {
			break
		}

		return e.complexity.AccountData.AccountType(childComplexity), true

	case "AccountData.accrued_amounts":
		if e.complexity.AccountData.AccruedAmounts == nil {
			break
		}

		return e.complexity.AccountData.AccruedAmounts(childComplexity), true

	case "AccountData.activation_date":
		if e.complexity.AccountData.ActivationDate == nil {
			break
		}

		return e.complexity.AccountData.ActivationDate(childComplexity), true

	case "AccountData.approved_date":
		if e.complexity.AccountData.ApprovedDate == nil {
			break
		}

		return e.complexity.AccountData.ApprovedDate(childComplexity), true

	case "AccountData.assigned_branch_key":
		if e.complexity.AccountData.AssignedBranchKey == nil {
			break
		}

		return e.complexity.AccountData.AssignedBranchKey(childComplexity), true

	case "AccountData.assigned_centre_key":
		if e.complexity.AccountData.AssignedCentreKey == nil {
			break
		}

		return e.complexity.AccountData.AssignedCentreKey(childComplexity), true

	case "AccountData.assigned_user_key":
		if e.complexity.AccountData.AssignedUserKey == nil {
			break
		}

		return e.complexity.AccountData.AssignedUserKey(childComplexity), true

	case "AccountData.balances":
		if e.complexity.AccountData.Balances == nil {
			break
		}

		return e.complexity.AccountData.Balances(childComplexity), true

	case "AccountData.closed_date":
		if e.complexity.AccountData.ClosedDate == nil {
			break
		}

		return e.complexity.AccountData.ClosedDate(childComplexity), true

	case "AccountData.creation_date":
		if e.complexity.AccountData.CreationDate == nil {
			break
		}

		return e.complexity.AccountData.CreationDate(childComplexity), true

	case "AccountData.credit_arrangement_key":
		if e.complexity.AccountData.CreditArrangementKey == nil {
			break
		}

		return e.complexity.AccountData.CreditArrangementKey(childComplexity), true

	case "AccountData.currency_code":
		if e.complexity.AccountData.CurrencyCode == nil {
			break
		}

		return e.complexity.AccountData.CurrencyCode(childComplexity), true

	case "AccountData.encoded_key":
		if e.complexity.AccountData.EncodedKey == nil {
			break
		}

		return e.complexity.AccountData.EncodedKey(childComplexity), true

	case "AccountData.id":
		if e.complexity.AccountData.ID == nil {
			break
		}

		return e.complexity.AccountData.ID(childComplexity), true

	case "AccountData.interest_settings":
		if e.complexity.AccountData.InterestSettings == nil {
			break
		}

		return e.complexity.AccountData.InterestSettings(childComplexity), true

	case "AccountData.internal_controls":
		if e.complexity.AccountData.InternalControls == nil {
			break
		}

		return e.complexity.AccountData.InternalControls(childComplexity), true

	case "AccountData.last_account_appraisal_date":
		if e.complexity.AccountData.LastAccountAppraisalDate == nil {
			break
		}

		return e.complexity.AccountData.LastAccountAppraisalDate(childComplexity), true

	case "AccountData.last_interest_calculation_date":
		if e.complexity.AccountData.LastInterestCalculationDate == nil {
			break
		}

		return e.complexity.AccountData.LastInterestCalculationDate(childComplexity), true

	case "AccountData.last_interest_stored_date":
		if e.complexity.AccountData.LastInterestStoredDate == nil {
			break
		}

		return e.complexity.AccountData.LastInterestStoredDate(childComplexity), true

	case "AccountData.last_modified_date":
		if e.complexity.AccountData.LastModifiedDate == nil {
			break
		}

		return e.complexity.AccountData.LastModifiedDate(childComplexity), true

	case "AccountData.last_overdraft_interest_review_date":
		if e.complexity.AccountData.LastOverdraftInterestReviewDate == nil {
			break
		}

		return e.complexity.AccountData.LastOverdraftInterestReviewDate(childComplexity), true

	case "AccountData.last_set_to_arrears_date":
		if e.complexity.AccountData.LastSetToArrearsDate == nil {
			break
		}

		return e.complexity.AccountData.LastSetToArrearsDate(childComplexity), true

	case "AccountData.linked_settlement_account_keys":
		if e.complexity.AccountData.LinkedSettlementAccountKeys == nil {
			break
		}

		return e.complexity.AccountData.LinkedSettlementAccountKeys(childComplexity), true

	case "AccountData.locked_date":
		if e.complexity.AccountData.LockedDate == nil {
			break
		}

		return e.complexity.AccountData.LockedDate(childComplexity), true

	case "AccountData.maturity_date":
		if e.complexity.AccountData.MaturityDate == nil {
			break
		}

		return e.complexity.AccountData.MaturityDate(childComplexity), true

	case "AccountData.migration_event_key":
		if e.complexity.AccountData.MigrationEventKey == nil {
			break
		}

		return e.complexity.AccountData.MigrationEventKey(childComplexity), true

	case "AccountData.name":
		if e.complexity.AccountData.Name == nil {
			break
		}

		return e.complexity.AccountData.Name(childComplexity), true

	case "AccountData.notes":
		if e.complexity.AccountData.Notes == nil {
			break
		}

		return e.complexity.AccountData.Notes(childComplexity), true

	case "AccountData.overdraft_interest_settings":
		if e.complexity.AccountData.OverdraftInterestSettings == nil {
			break
		}

		return e.complexity.AccountData.OverdraftInterestSettings(childComplexity), true

	case "AccountData.overdraft_settings":
		if e.complexity.AccountData.OverdraftSettings == nil {
			break
		}

		return e.complexity.AccountData.OverdraftSettings(childComplexity), true

	case "AccountData.product_type_key":
		if e.complexity.AccountData.ProductTypeKey == nil {
			break
		}

		return e.complexity.AccountData.ProductTypeKey(childComplexity), true

	case "AccountData.withholding_tax_source_key":
		if e.complexity.AccountData.WithholdingTaxSourceKey == nil {
			break
		}

		return e.complexity.AccountData.WithholdingTaxSourceKey(childComplexity), true

	case "AccountDetails.account_number":
		if e.complexity.AccountDetails.AccountNumber == nil {
			break
		}

		return e.complexity.AccountDetails.AccountNumber(childComplexity), true

	case "AccountDetails.bank_code":
		if e.complexity.AccountDetails.BankCode == nil {
			break
		}

		return e.complexity.AccountDetails.BankCode(childComplexity), true

	case "AccountDetails.iban":
		if e.complexity.AccountDetails.Iban == nil {
			break
		}

		return e.complexity.AccountDetails.Iban(childComplexity), true

	case "AccountDetails.routing_number":
		if e.complexity.AccountDetails.RoutingNumber == nil {
			break
		}

		return e.complexity.AccountDetails.RoutingNumber(childComplexity), true

	case "AccountDetails.sort_code":
		if e.complexity.AccountDetails.SortCode == nil {
			break
		}

		return e.complexity.AccountDetails.SortCode(childComplexity), true

	case "AccountDetails.swift_bic":
		if e.complexity.AccountDetails.SwiftBic == nil {
			break
		}

		return e.complexity.AccountDetails.SwiftBic(childComplexity), true

	case "AccountDetails.virtual_account_id":
		if e.complexity.AccountDetails.VirtualAccountID == nil {
			break
		}

		return e.complexity.AccountDetails.VirtualAccountID(childComplexity), true

	case "AccountEdge.cursor":
		if e.complexity.AccountEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountEdge.Cursor(childComplexity), true

	case "AccountEdge.node":
		if e.complexity.AccountEdge.Node == nil {
			break
		}

		return e.complexity.AccountEdge.Node(childComplexity), true

	case "AccountingRules.encoded_key":
		if e.complexity.AccountingRules.EncodedKey == nil {
			break
		}

		return e.complexity.AccountingRules.EncodedKey(childComplexity), true

	case "AccountingRules.financial_resource":
		if e.complexity.AccountingRules.FinancialResource == nil {
			break
		}

		return e.complexity.AccountingRules.FinancialResource(childComplexity), true

	case "AccountingRules.gl_key":
		if e.complexity.AccountingRules.GlKey == nil {
			break
		}

		return e.complexity.AccountingRules.GlKey(childComplexity), true

	case "AccruedAmounts.interest_accrued":
		if e.complexity.AccruedAmounts.InterestAccrued == nil {
			break
		}

		return e.complexity.AccruedAmounts.InterestAccrued(childComplexity), true

	case "AccruedAmounts.negative_interest_accrued":
		if e.complexity.AccruedAmounts.NegativeInterestAccrued == nil {
			break
		}

		return e.complexity.AccruedAmounts.NegativeInterestAccrued(childComplexity), true

	case "AccruedAmounts.overdraft_interest_accrued":
		if e.complexity.AccruedAmounts.OverdraftInterestAccrued == nil {
			break
		}

		return e.complexity.AccruedAmounts.OverdraftInterestAccrued(childComplexity), true

	case "AccruedAmounts.technical_overdraft_interest_accrued":
		if e.complexity.AccruedAmounts.TechnicalOverdraftInterestAccrued == nil {
			break
		}

		return e.complexity.AccruedAmounts.TechnicalOverdraftInterestAccrued(childComplexity), true

	case "Action.id":
		if e.complexity.Action.ID == nil {
			break
		}

		return e.complexity.Action.ID(childComplexity), true

	case "Action.notes":
		if e.complexity.Action.Notes == nil {
			break
		}

		return e.complexity.Action.Notes(childComplexity), true

	case "Action.reporter":
		if e.complexity.Action.Reporter == nil {
			break
		}

		return e.complexity.Action.Reporter(childComplexity), true

	case "Action.status":
		if e.complexity.Action.Status == nil {
			break
		}

		return e.complexity.Action.Status(childComplexity), true

	case "Action.ts":
		if e.complexity.Action.Ts == nil {
			break
		}

		return e.complexity.Action.Ts(childComplexity), true

	case "Activity.archived":
		if e.complexity.Activity.Archived == nil {
			break
		}

		return e.complexity.Activity.Archived(childComplexity), true

	case "Activity.description":
		if e.complexity.Activity.Description == nil {
			break
		}

		return e.complexity.Activity.Description(childComplexity), true

	case "Activity.id":
		if e.complexity.Activity.ID == nil {
			break
		}

		return e.complexity.Activity.ID(childComplexity), true

	case "Activity.risk_weighting":
		if e.complexity.Activity.RiskWeighting == nil {
			break
		}

		return e.complexity.Activity.RiskWeighting(childComplexity), true

	case "Activity.supported":
		if e.complexity.Activity.Supported == nil {
			break
		}

		return e.complexity.Activity.Supported(childComplexity), true

	case "Activity.ts":
		if e.complexity.Activity.Ts == nil {
			break
		}

		return e.complexity.Activity.Ts(childComplexity), true

	case "Address.city":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.country":
		if e.complexity.Address.Country == nil {
			break
		}

		return e.complexity.Address.Country(childComplexity), true

	case "Address.county":
		if e.complexity.Address.County == nil {
			break
		}

		return e.complexity.Address.County(childComplexity), true

	case "Address.id":
		if e.complexity.Address.ID == nil {
			break
		}

		return e.complexity.Address.ID(childComplexity), true

	case "Address.location":
		if e.complexity.Address.Location == nil {
			break
		}

		return e.complexity.Address.Location(childComplexity), true

	case "Address.name":
		if e.complexity.Address.Name == nil {
			break
		}

		return e.complexity.Address.Name(childComplexity), true

	case "Address.owner":
		if e.complexity.Address.Owner == nil {
			break
		}

		return e.complexity.Address.Owner(childComplexity), true

	case "Address.postcode":
		if e.complexity.Address.Postcode == nil {
			break
		}

		return e.complexity.Address.Postcode(childComplexity), true

	case "Address.primary":
		if e.complexity.Address.Primary == nil {
			break
		}

		return e.complexity.Address.Primary(childComplexity), true

	case "Address.state":
		if e.complexity.Address.State == nil {
			break
		}

		return e.complexity.Address.State(childComplexity), true

	case "Address.street":
		if e.complexity.Address.Street == nil {
			break
		}

		return e.complexity.Address.Street(childComplexity), true

	case "Address.ts":
		if e.complexity.Address.Ts == nil {
			break
		}

		return e.complexity.Address.Ts(childComplexity), true

	case "AddressConnection.edges":
		if e.complexity.AddressConnection.Edges == nil {
			break
		}

		return e.complexity.AddressConnection.Edges(childComplexity), true

	case "AddressConnection.nodes":
		if e.complexity.AddressConnection.Nodes == nil {
			break
		}

		return e.complexity.AddressConnection.Nodes(childComplexity), true

	case "AddressConnection.pageInfo":
		if e.complexity.AddressConnection.PageInfo == nil {
			break
		}

		return e.complexity.AddressConnection.PageInfo(childComplexity), true

	case "AddressConnection.totalCount":
		if e.complexity.AddressConnection.TotalCount == nil {
			break
		}

		return e.complexity.AddressConnection.TotalCount(childComplexity), true

	case "AddressEdge.cursor":
		if e.complexity.AddressEdge.Cursor == nil {
			break
		}

		return e.complexity.AddressEdge.Cursor(childComplexity), true

	case "AddressEdge.node":
		if e.complexity.AddressEdge.Node == nil {
			break
		}

		return e.complexity.AddressEdge.Node(childComplexity), true

	case "AffectedAmounts.fees_amount":
		if e.complexity.AffectedAmounts.FeesAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.FeesAmount(childComplexity), true

	case "AffectedAmounts.fraction_amount":
		if e.complexity.AffectedAmounts.FractionAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.FractionAmount(childComplexity), true

	case "AffectedAmounts.funds_amount":
		if e.complexity.AffectedAmounts.FundsAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.FundsAmount(childComplexity), true

	case "AffectedAmounts.interest_amount":
		if e.complexity.AffectedAmounts.InterestAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.InterestAmount(childComplexity), true

	case "AffectedAmounts.overdraft_amount":
		if e.complexity.AffectedAmounts.OverdraftAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.OverdraftAmount(childComplexity), true

	case "AffectedAmounts.overdraft_fees_amount":
		if e.complexity.AffectedAmounts.OverdraftFeesAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.OverdraftFeesAmount(childComplexity), true

	case "AffectedAmounts.overdraft_interest_amount":
		if e.complexity.AffectedAmounts.OverdraftInterestAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.OverdraftInterestAmount(childComplexity), true

	case "AffectedAmounts.technical_overdraft_amount":
		if e.complexity.AffectedAmounts.TechnicalOverdraftAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.TechnicalOverdraftAmount(childComplexity), true

	case "AffectedAmounts.technical_overdraft_interest_amount":
		if e.complexity.AffectedAmounts.TechnicalOverdraftInterestAmount == nil {
			break
		}

		return e.complexity.AffectedAmounts.TechnicalOverdraftInterestAmount(childComplexity), true

	case "Auth.attempts":
		if e.complexity.Auth.Attempts == nil {
			break
		}

		return e.complexity.Auth.Attempts(childComplexity), true

	case "Auth.id":
		if e.complexity.Auth.ID == nil {
			break
		}

		return e.complexity.Auth.ID(childComplexity), true

	case "Auth.identity":
		if e.complexity.Auth.Identity == nil {
			break
		}

		return e.complexity.Auth.Identity(childComplexity), true

	case "Auth.session":
		if e.complexity.Auth.Session == nil {
			break
		}

		return e.complexity.Auth.Session(childComplexity), true

	case "Auth.success":
		if e.complexity.Auth.Success == nil {
			break
		}

		return e.complexity.Auth.Success(childComplexity), true

	case "Auth.ts":
		if e.complexity.Auth.Ts == nil {
			break
		}

		return e.complexity.Auth.Ts(childComplexity), true

	case "AuthResponse.code":
		if e.complexity.AuthResponse.Code == nil {
			break
		}

		return e.complexity.AuthResponse.Code(childComplexity), true

	case "AuthResponse.message":
		if e.complexity.AuthResponse.Message == nil {
			break
		}

		return e.complexity.AuthResponse.Message(childComplexity), true

	case "AuthResponse.success":
		if e.complexity.AuthResponse.Success == nil {
			break
		}

		return e.complexity.AuthResponse.Success(childComplexity), true

	case "AuthResponse.tokens":
		if e.complexity.AuthResponse.Tokens == nil {
			break
		}

		return e.complexity.AuthResponse.Tokens(childComplexity), true

	case "AuthTokens.auth":
		if e.complexity.AuthTokens.Auth == nil {
			break
		}

		return e.complexity.AuthTokens.Auth(childComplexity), true

	case "AuthTokens.refresh":
		if e.complexity.AuthTokens.Refresh == nil {
			break
		}

		return e.complexity.AuthTokens.Refresh(childComplexity), true

	case "Balances.available_balance":
		if e.complexity.Balances.AvailableBalance == nil {
			break
		}

		return e.complexity.Balances.AvailableBalance(childComplexity), true

	case "Balances.blocked_balance":
		if e.complexity.Balances.BlockedBalance == nil {
			break
		}

		return e.complexity.Balances.BlockedBalance(childComplexity), true

	case "Balances.fees_due":
		if e.complexity.Balances.FeesDue == nil {
			break
		}

		return e.complexity.Balances.FeesDue(childComplexity), true

	case "Balances.forward_available_balance":
		if e.complexity.Balances.ForwardAvailableBalance == nil {
			break
		}

		return e.complexity.Balances.ForwardAvailableBalance(childComplexity), true

	case "Balances.hold_balance":
		if e.complexity.Balances.HoldBalance == nil {
			break
		}

		return e.complexity.Balances.HoldBalance(childComplexity), true

	case "Balances.locked_balance":
		if e.complexity.Balances.LockedBalance == nil {
			break
		}

		return e.complexity.Balances.LockedBalance(childComplexity), true

	case "Balances.overdraft_amount":
		if e.complexity.Balances.OverdraftAmount == nil {
			break
		}

		return e.complexity.Balances.OverdraftAmount(childComplexity), true

	case "Balances.overdraft_interest_due":
		if e.complexity.Balances.OverdraftInterestDue == nil {
			break
		}

		return e.complexity.Balances.OverdraftInterestDue(childComplexity), true

	case "Balances.technical_overdraft_amount":
		if e.complexity.Balances.TechnicalOverdraftAmount == nil {
			break
		}

		return e.complexity.Balances.TechnicalOverdraftAmount(childComplexity), true

	case "Balances.technical_overdraft_interest_due":
		if e.complexity.Balances.TechnicalOverdraftInterestDue == nil {
			break
		}

		return e.complexity.Balances.TechnicalOverdraftInterestDue(childComplexity), true

	case "Balances.total_balance":
		if e.complexity.Balances.TotalBalance == nil {
			break
		}

		return e.complexity.Balances.TotalBalance(childComplexity), true

	case "Beneficiary.account":
		if e.complexity.Beneficiary.Account == nil {
			break
		}

		return e.complexity.Beneficiary.Account(childComplexity), true

	case "Beneficiary.amount":
		if e.complexity.Beneficiary.Amount == nil {
			break
		}

		return e.complexity.Beneficiary.Amount(childComplexity), true

	case "Beneficiary.currency":
		if e.complexity.Beneficiary.Currency == nil {
			break
		}

		return e.complexity.Beneficiary.Currency(childComplexity), true

	case "CDD.active":
		if e.complexity.Cdd.Active == nil {
			break
		}

		return e.complexity.Cdd.Active(childComplexity), true

	case "CDD.details":
		if e.complexity.Cdd.Details == nil {
			break
		}

		return e.complexity.Cdd.Details(childComplexity), true

	case "CDD.id":
		if e.complexity.Cdd.ID == nil {
			break
		}

		return e.complexity.Cdd.ID(childComplexity), true

	case "CDD.onboard":
		if e.complexity.Cdd.Onboard == nil {
			break
		}

		return e.complexity.Cdd.Onboard(childComplexity), true

	case "CDD.owner":
		if e.complexity.Cdd.Owner == nil {
			break
		}

		return e.complexity.Cdd.Owner(childComplexity), true

	case "CDD.status":
		if e.complexity.Cdd.Status == nil {
			break
		}

		return e.complexity.Cdd.Status(childComplexity), true

	case "CDD.ts":
		if e.complexity.Cdd.Ts == nil {
			break
		}

		return e.complexity.Cdd.Ts(childComplexity), true

	case "CDD.validations":
		if e.complexity.Cdd.Validations == nil {
			break
		}

		args, err := ec.field_CDD_validations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Cdd.Validations(childComplexity, args["validation_type"].(*types.ValidationType), args["status"].([]types.State)), true

	case "CDD.version":
		if e.complexity.Cdd.Version == nil {
			break
		}

		return e.complexity.Cdd.Version(childComplexity), true

	case "CDD.watchlist":
		if e.complexity.Cdd.Watchlist == nil {
			break
		}

		return e.complexity.Cdd.Watchlist(childComplexity), true

	case "CDDConnection.edges":
		if e.complexity.CDDConnection.Edges == nil {
			break
		}

		return e.complexity.CDDConnection.Edges(childComplexity), true

	case "CDDConnection.nodes":
		if e.complexity.CDDConnection.Nodes == nil {
			break
		}

		return e.complexity.CDDConnection.Nodes(childComplexity), true

	case "CDDConnection.pageInfo":
		if e.complexity.CDDConnection.PageInfo == nil {
			break
		}

		return e.complexity.CDDConnection.PageInfo(childComplexity), true

	case "CDDConnection.totalCount":
		if e.complexity.CDDConnection.TotalCount == nil {
			break
		}

		return e.complexity.CDDConnection.TotalCount(childComplexity), true

	case "CDDEdge.cursor":
		if e.complexity.CDDEdge.Cursor == nil {
			break
		}

		return e.complexity.CDDEdge.Cursor(childComplexity), true

	case "CDDEdge.node":
		if e.complexity.CDDEdge.Node == nil {
			break
		}

		return e.complexity.CDDEdge.Node(childComplexity), true

	case "Check.data":
		if e.complexity.Check.Data == nil {
			break
		}

		return e.complexity.Check.Data(childComplexity), true

	case "Check.id":
		if e.complexity.Check.ID == nil {
			break
		}

		return e.complexity.Check.ID(childComplexity), true

	case "Check.organisation":
		if e.complexity.Check.Organisation == nil {
			break
		}

		return e.complexity.Check.Organisation(childComplexity), true

	case "Check.owner":
		if e.complexity.Check.Owner == nil {
			break
		}

		return e.complexity.Check.Owner(childComplexity), true

	case "Check.status":
		if e.complexity.Check.Status == nil {
			break
		}

		return e.complexity.Check.Status(childComplexity), true

	case "Check.ts":
		if e.complexity.Check.Ts == nil {
			break
		}

		return e.complexity.Check.Ts(childComplexity), true

	case "CheckConnection.edges":
		if e.complexity.CheckConnection.Edges == nil {
			break
		}

		return e.complexity.CheckConnection.Edges(childComplexity), true

	case "CheckConnection.nodes":
		if e.complexity.CheckConnection.Nodes == nil {
			break
		}

		return e.complexity.CheckConnection.Nodes(childComplexity), true

	case "CheckConnection.pageInfo":
		if e.complexity.CheckConnection.PageInfo == nil {
			break
		}

		return e.complexity.CheckConnection.PageInfo(childComplexity), true

	case "CheckConnection.totalCount":
		if e.complexity.CheckConnection.TotalCount == nil {
			break
		}

		return e.complexity.CheckConnection.TotalCount(childComplexity), true

	case "CheckData.applicant_id":
		if e.complexity.CheckData.ApplicantID == nil {
			break
		}

		return e.complexity.CheckData.ApplicantID(childComplexity), true

	case "CheckData.applicant_provides_data":
		if e.complexity.CheckData.ApplicantProvidesData == nil {
			break
		}

		return e.complexity.CheckData.ApplicantProvidesData(childComplexity), true

	case "CheckData.created_at":
		if e.complexity.CheckData.CreatedAt == nil {
			break
		}

		return e.complexity.CheckData.CreatedAt(childComplexity), true

	case "CheckData.form_uri":
		if e.complexity.CheckData.FormURI == nil {
			break
		}

		return e.complexity.CheckData.FormURI(childComplexity), true

	case "CheckData.href":
		if e.complexity.CheckData.Href == nil {
			break
		}

		return e.complexity.CheckData.Href(childComplexity), true

	case "CheckData.id":
		if e.complexity.CheckData.ID == nil {
			break
		}

		return e.complexity.CheckData.ID(childComplexity), true

	case "CheckData.paused":
		if e.complexity.CheckData.Paused == nil {
			break
		}

		return e.complexity.CheckData.Paused(childComplexity), true

	case "CheckData.redirect_uri":
		if e.complexity.CheckData.RedirectURI == nil {
			break
		}

		return e.complexity.CheckData.RedirectURI(childComplexity), true

	case "CheckData.reports":
		if e.complexity.CheckData.Reports == nil {
			break
		}

		return e.complexity.CheckData.Reports(childComplexity), true

	case "CheckData.result":
		if e.complexity.CheckData.Result == nil {
			break
		}

		return e.complexity.CheckData.Result(childComplexity), true

	case "CheckData.results_uri":
		if e.complexity.CheckData.ResultsURI == nil {
			break
		}

		return e.complexity.CheckData.ResultsURI(childComplexity), true

	case "CheckData.sandbox":
		if e.complexity.CheckData.Sandbox == nil {
			break
		}

		return e.complexity.CheckData.Sandbox(childComplexity), true

	case "CheckData.status":
		if e.complexity.CheckData.Status == nil {
			break
		}

		return e.complexity.CheckData.Status(childComplexity), true

	case "CheckData.tags":
		if e.complexity.CheckData.Tags == nil {
			break
		}

		args, err := ec.field_CheckData_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CheckData.Tags(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "CheckData.version":
		if e.complexity.CheckData.Version == nil {
			break
		}

		return e.complexity.CheckData.Version(childComplexity), true

	case "CheckEdge.cursor":
		if e.complexity.CheckEdge.Cursor == nil {
			break
		}

		return e.complexity.CheckEdge.Cursor(childComplexity), true

	case "CheckEdge.node":
		if e.complexity.CheckEdge.Node == nil {
			break
		}

		return e.complexity.CheckEdge.Node(childComplexity), true

	case "Comment.author":
		if e.complexity.Comment.Author == nil {
			break
		}

		return e.complexity.Comment.Author(childComplexity), true

	case "Comment.body":
		if e.complexity.Comment.Body == nil {
			break
		}

		return e.complexity.Comment.Body(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.tags":
		if e.complexity.Comment.Tags == nil {
			break
		}

		return e.complexity.Comment.Tags(childComplexity), true

	case "Comment.ts":
		if e.complexity.Comment.Ts == nil {
			break
		}

		return e.complexity.Comment.Ts(childComplexity), true

	case "Comment.type":
		if e.complexity.Comment.Type == nil {
			break
		}

		return e.complexity.Comment.Type(childComplexity), true

	case "CommentConnection.edges":
		if e.complexity.CommentConnection.Edges == nil {
			break
		}

		return e.complexity.CommentConnection.Edges(childComplexity), true

	case "CommentConnection.nodes":
		if e.complexity.CommentConnection.Nodes == nil {
			break
		}

		return e.complexity.CommentConnection.Nodes(childComplexity), true

	case "CommentConnection.pageInfo":
		if e.complexity.CommentConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommentConnection.PageInfo(childComplexity), true

	case "CommentConnection.totalCount":
		if e.complexity.CommentConnection.TotalCount == nil {
			break
		}

		return e.complexity.CommentConnection.TotalCount(childComplexity), true

	case "CommentEdge.cursor":
		if e.complexity.CommentEdge.Cursor == nil {
			break
		}

		return e.complexity.CommentEdge.Cursor(childComplexity), true

	case "CommentEdge.node":
		if e.complexity.CommentEdge.Node == nil {
			break
		}

		return e.complexity.CommentEdge.Node(childComplexity), true

	case "Content.abstract":
		if e.complexity.Content.Abstract == nil {
			break
		}

		return e.complexity.Content.Abstract(childComplexity), true

	case "Content.body":
		if e.complexity.Content.Body == nil {
			break
		}

		return e.complexity.Content.Body(childComplexity), true

	case "Content.comments":
		if e.complexity.Content.Comments == nil {
			break
		}

		args, err := ec.field_Content_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Content.Comments(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Content.current":
		if e.complexity.Content.Current == nil {
			break
		}

		return e.complexity.Content.Current(childComplexity), true

	case "Content.id":
		if e.complexity.Content.ID == nil {
			break
		}

		return e.complexity.Content.ID(childComplexity), true

	case "Content.keywords":
		if e.complexity.Content.Keywords == nil {
			break
		}

		return e.complexity.Content.Keywords(childComplexity), true

	case "Content.source":
		if e.complexity.Content.Source == nil {
			break
		}

		return e.complexity.Content.Source(childComplexity), true

	case "Content.tags":
		if e.complexity.Content.Tags == nil {
			break
		}

		args, err := ec.field_Content_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Content.Tags(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Content.title":
		if e.complexity.Content.Title == nil {
			break
		}

		return e.complexity.Content.Title(childComplexity), true

	case "Content.ts":
		if e.complexity.Content.Ts == nil {
			break
		}

		return e.complexity.Content.Ts(childComplexity), true

	case "Content.type":
		if e.complexity.Content.Type == nil {
			break
		}

		return e.complexity.Content.Type(childComplexity), true

	case "Content.url":
		if e.complexity.Content.URL == nil {
			break
		}

		return e.complexity.Content.URL(childComplexity), true

	case "Content.version":
		if e.complexity.Content.Version == nil {
			break
		}

		return e.complexity.Content.Version(childComplexity), true

	case "Country.Capital":
		if e.complexity.Country.Capital == nil {
			break
		}

		return e.complexity.Country.Capital(childComplexity), true

	case "Country.Continent":
		if e.complexity.Country.Continent == nil {
			break
		}

		return e.complexity.Country.Continent(childComplexity), true

	case "Country.Country_Name":
		if e.complexity.Country.CountryName == nil {
			break
		}

		return e.complexity.Country.CountryName(childComplexity), true

	case "Country.Dial":
		if e.complexity.Country.Dial == nil {
			break
		}

		return e.complexity.Country.Dial(childComplexity), true

	case "Country.DS":
		if e.complexity.Country.Ds == nil {
			break
		}

		return e.complexity.Country.Ds(childComplexity), true

	case "Country.EDGAR":
		if e.complexity.Country.Edgar == nil {
			break
		}

		return e.complexity.Country.Edgar(childComplexity), true

	case "Country.FIFA":
		if e.complexity.Country.Fifa == nil {
			break
		}

		return e.complexity.Country.Fifa(childComplexity), true

	case "Country.FIPS":
		if e.complexity.Country.Fips == nil {
			break
		}

		return e.complexity.Country.Fips(childComplexity), true

	case "Country.GAUL":
		if e.complexity.Country.Gaul == nil {
			break
		}

		return e.complexity.Country.Gaul(childComplexity), true

	case "Country.Geo_Name_ID":
		if e.complexity.Country.GeoNameID == nil {
			break
		}

		return e.complexity.Country.GeoNameID(childComplexity), true

	case "Country.IOC":
		if e.complexity.Country.Ioc == nil {
			break
		}

		return e.complexity.Country.Ioc(childComplexity), true

	case "Country.Is_Independent":
		if e.complexity.Country.IsIndependent == nil {
			break
		}

		return e.complexity.Country.IsIndependent(childComplexity), true

	case "Country.ISO3166_1_Alpha_2":
		if e.complexity.Country.Iso3166_1Alpha2 == nil {
			break
		}

		return e.complexity.Country.Iso3166_1Alpha2(childComplexity), true

	case "Country.ISO3166_1_Alpha_3":
		if e.complexity.Country.Iso3166_1Alpha3 == nil {
			break
		}

		return e.complexity.Country.Iso3166_1Alpha3(childComplexity), true

	case "Country.ISO4217_Currency_Alphabetic_Code":
		if e.complexity.Country.Iso4217CurrencyAlphabeticCode == nil {
			break
		}

		return e.complexity.Country.Iso4217CurrencyAlphabeticCode(childComplexity), true

	case "Country.ISO4217_Currency_Country_Name":
		if e.complexity.Country.Iso4217CurrencyCountryName == nil {
			break
		}

		return e.complexity.Country.Iso4217CurrencyCountryName(childComplexity), true

	case "Country.ISO4217_Currency_Minor_Unit":
		if e.complexity.Country.Iso4217CurrencyMinorUnit == nil {
			break
		}

		return e.complexity.Country.Iso4217CurrencyMinorUnit(childComplexity), true

	case "Country.ISO4217_Currency_Name":
		if e.complexity.Country.Iso4217CurrencyName == nil {
			break
		}

		return e.complexity.Country.Iso4217CurrencyName(childComplexity), true

	case "Country.ISO4217_Currency_Numeric_Code":
		if e.complexity.Country.Iso4217CurrencyNumericCode == nil {
			break
		}

		return e.complexity.Country.Iso4217CurrencyNumericCode(childComplexity), true

	case "Country.ITU":
		if e.complexity.Country.Itu == nil {
			break
		}

		return e.complexity.Country.Itu(childComplexity), true

	case "Country.Languages":
		if e.complexity.Country.Languages == nil {
			break
		}

		return e.complexity.Country.Languages(childComplexity), true

	case "Country.M49":
		if e.complexity.Country.M49 == nil {
			break
		}

		return e.complexity.Country.M49(childComplexity), true

	case "Country.MARC":
		if e.complexity.Country.Marc == nil {
			break
		}

		return e.complexity.Country.Marc(childComplexity), true

	case "Country.Official_Name_English":
		if e.complexity.Country.OfficialNameEnglish == nil {
			break
		}

		return e.complexity.Country.OfficialNameEnglish(childComplexity), true

	case "Country.TLD":
		if e.complexity.Country.Tld == nil {
			break
		}

		return e.complexity.Country.Tld(childComplexity), true

	case "Country.WMO":
		if e.complexity.Country.Wmo == nil {
			break
		}

		return e.complexity.Country.Wmo(childComplexity), true

	case "CountryConnection.edges":
		if e.complexity.CountryConnection.Edges == nil {
			break
		}

		return e.complexity.CountryConnection.Edges(childComplexity), true

	case "CountryConnection.nodes":
		if e.complexity.CountryConnection.Nodes == nil {
			break
		}

		return e.complexity.CountryConnection.Nodes(childComplexity), true

	case "CountryConnection.pageInfo":
		if e.complexity.CountryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CountryConnection.PageInfo(childComplexity), true

	case "CountryConnection.totalCount":
		if e.complexity.CountryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CountryConnection.TotalCount(childComplexity), true

	case "CountryEdge.cursor":
		if e.complexity.CountryEdge.Cursor == nil {
			break
		}

		return e.complexity.CountryEdge.Cursor(childComplexity), true

	case "CountryEdge.node":
		if e.complexity.CountryEdge.Node == nil {
			break
		}

		return e.complexity.CountryEdge.Node(childComplexity), true

	case "Credentials.identifier":
		if e.complexity.Credentials.Identifier == nil {
			break
		}

		return e.complexity.Credentials.Identifier(childComplexity), true

	case "Credentials.refresh_token":
		if e.complexity.Credentials.RefreshToken == nil {
			break
		}

		return e.complexity.Credentials.RefreshToken(childComplexity), true

	case "Currency.code":
		if e.complexity.Currency.Code == nil {
			break
		}

		return e.complexity.Currency.Code(childComplexity), true

	case "Currency.decimal_digits":
		if e.complexity.Currency.DecimalDigits == nil {
			break
		}

		return e.complexity.Currency.DecimalDigits(childComplexity), true

	case "Currency.name":
		if e.complexity.Currency.Name == nil {
			break
		}

		return e.complexity.Currency.Name(childComplexity), true

	case "Currency.name_plural":
		if e.complexity.Currency.NamePlural == nil {
			break
		}

		return e.complexity.Currency.NamePlural(childComplexity), true

	case "Currency.rounding":
		if e.complexity.Currency.Rounding == nil {
			break
		}

		return e.complexity.Currency.Rounding(childComplexity), true

	case "Currency.symbol":
		if e.complexity.Currency.Symbol == nil {
			break
		}

		return e.complexity.Currency.Symbol(childComplexity), true

	case "Currency.symbol_native":
		if e.complexity.Currency.SymbolNative == nil {
			break
		}

		return e.complexity.Currency.SymbolNative(childComplexity), true

	case "CurrencyConnection.edges":
		if e.complexity.CurrencyConnection.Edges == nil {
			break
		}

		return e.complexity.CurrencyConnection.Edges(childComplexity), true

	case "CurrencyConnection.nodes":
		if e.complexity.CurrencyConnection.Nodes == nil {
			break
		}

		return e.complexity.CurrencyConnection.Nodes(childComplexity), true

	case "CurrencyConnection.pageInfo":
		if e.complexity.CurrencyConnection.PageInfo == nil {
			break
		}

		return e.complexity.CurrencyConnection.PageInfo(childComplexity), true

	case "CurrencyConnection.totalCount":
		if e.complexity.CurrencyConnection.TotalCount == nil {
			break
		}

		return e.complexity.CurrencyConnection.TotalCount(childComplexity), true

	case "CurrencyEdge.cursor":
		if e.complexity.CurrencyEdge.Cursor == nil {
			break
		}

		return e.complexity.CurrencyEdge.Cursor(childComplexity), true

	case "CurrencyEdge.node":
		if e.complexity.CurrencyEdge.Node == nil {
			break
		}

		return e.complexity.CurrencyEdge.Node(childComplexity), true

	case "Device.active":
		if e.complexity.Device.Active == nil {
			break
		}

		return e.complexity.Device.Active(childComplexity), true

	case "Device.brand":
		if e.complexity.Device.Brand == nil {
			break
		}

		return e.complexity.Device.Brand(childComplexity), true

	case "Device.id":
		if e.complexity.Device.ID == nil {
			break
		}

		return e.complexity.Device.ID(childComplexity), true

	case "Device.identifier":
		if e.complexity.Device.Identifier == nil {
			break
		}

		return e.complexity.Device.Identifier(childComplexity), true

	case "Device.name":
		if e.complexity.Device.Name == nil {
			break
		}

		return e.complexity.Device.Name(childComplexity), true

	case "Device.os":
		if e.complexity.Device.Os == nil {
			break
		}

		return e.complexity.Device.Os(childComplexity), true

	case "Device.owner":
		if e.complexity.Device.Owner == nil {
			break
		}

		return e.complexity.Device.Owner(childComplexity), true

	case "Device.primary":
		if e.complexity.Device.Primary == nil {
			break
		}

		return e.complexity.Device.Primary(childComplexity), true

	case "Device.tokens":
		if e.complexity.Device.Tokens == nil {
			break
		}

		return e.complexity.Device.Tokens(childComplexity), true

	case "Device.ts":
		if e.complexity.Device.Ts == nil {
			break
		}

		return e.complexity.Device.Ts(childComplexity), true

	case "Device.type":
		if e.complexity.Device.Type == nil {
			break
		}

		return e.complexity.Device.Type(childComplexity), true

	case "Device.verified":
		if e.complexity.Device.Verified == nil {
			break
		}

		return e.complexity.Device.Verified(childComplexity), true

	case "DeviceConnection.edges":
		if e.complexity.DeviceConnection.Edges == nil {
			break
		}

		return e.complexity.DeviceConnection.Edges(childComplexity), true

	case "DeviceConnection.nodes":
		if e.complexity.DeviceConnection.Nodes == nil {
			break
		}

		return e.complexity.DeviceConnection.Nodes(childComplexity), true

	case "DeviceConnection.pageInfo":
		if e.complexity.DeviceConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeviceConnection.PageInfo(childComplexity), true

	case "DeviceConnection.totalCount":
		if e.complexity.DeviceConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeviceConnection.TotalCount(childComplexity), true

	case "DeviceEdge.cursor":
		if e.complexity.DeviceEdge.Cursor == nil {
			break
		}

		return e.complexity.DeviceEdge.Cursor(childComplexity), true

	case "DeviceEdge.node":
		if e.complexity.DeviceEdge.Node == nil {
			break
		}

		return e.complexity.DeviceEdge.Node(childComplexity), true

	case "DeviceToken.ts":
		if e.complexity.DeviceToken.Ts == nil {
			break
		}

		return e.complexity.DeviceToken.Ts(childComplexity), true

	case "DeviceToken.type":
		if e.complexity.DeviceToken.Type == nil {
			break
		}

		return e.complexity.DeviceToken.Type(childComplexity), true

	case "DeviceToken.value":
		if e.complexity.DeviceToken.Value == nil {
			break
		}

		return e.complexity.DeviceToken.Value(childComplexity), true

	case "Email.alias":
		if e.complexity.Email.Alias == nil {
			break
		}

		return e.complexity.Email.Alias(childComplexity), true

	case "Email.name":
		if e.complexity.Email.Name == nil {
			break
		}

		return e.complexity.Email.Name(childComplexity), true

	case "Email.primary":
		if e.complexity.Email.Primary == nil {
			break
		}

		return e.complexity.Email.Primary(childComplexity), true

	case "Email.type":
		if e.complexity.Email.Type == nil {
			break
		}

		return e.complexity.Email.Type(childComplexity), true

	case "Email.value":
		if e.complexity.Email.Value == nil {
			break
		}

		return e.complexity.Email.Value(childComplexity), true

	case "Email.verified":
		if e.complexity.Email.Verified == nil {
			break
		}

		return e.complexity.Email.Verified(childComplexity), true

	case "Fee.fee":
		if e.complexity.Fee.Fee == nil {
			break
		}

		return e.complexity.Fee.Fee(childComplexity), true

	case "Fee.lowerBoundary":
		if e.complexity.Fee.LowerBoundary == nil {
			break
		}

		return e.complexity.Fee.LowerBoundary(childComplexity), true

	case "Fee.upperBoundary":
		if e.complexity.Fee.UpperBoundary == nil {
			break
		}

		return e.complexity.Fee.UpperBoundary(childComplexity), true

	case "Fx.base_currency":
		if e.complexity.Fx.BaseCurrency == nil {
			break
		}

		return e.complexity.Fx.BaseCurrency(childComplexity), true

	case "Fx.buy_rate":
		if e.complexity.Fx.BuyRate == nil {
			break
		}

		return e.complexity.Fx.BuyRate(childComplexity), true

	case "Fx.currency":
		if e.complexity.Fx.Currency == nil {
			break
		}

		return e.complexity.Fx.Currency(childComplexity), true

	case "Fx.sell_rate":
		if e.complexity.Fx.SellRate == nil {
			break
		}

		return e.complexity.Fx.SellRate(childComplexity), true

	case "Fx.ts":
		if e.complexity.Fx.Ts == nil {
			break
		}

		return e.complexity.Fx.Ts(childComplexity), true

	case "FxConnection.edges":
		if e.complexity.FxConnection.Edges == nil {
			break
		}

		return e.complexity.FxConnection.Edges(childComplexity), true

	case "FxConnection.nodes":
		if e.complexity.FxConnection.Nodes == nil {
			break
		}

		return e.complexity.FxConnection.Nodes(childComplexity), true

	case "FxConnection.pageInfo":
		if e.complexity.FxConnection.PageInfo == nil {
			break
		}

		return e.complexity.FxConnection.PageInfo(childComplexity), true

	case "FxConnection.totalCount":
		if e.complexity.FxConnection.TotalCount == nil {
			break
		}

		return e.complexity.FxConnection.TotalCount(childComplexity), true

	case "FxEdge.cursor":
		if e.complexity.FxEdge.Cursor == nil {
			break
		}

		return e.complexity.FxEdge.Cursor(childComplexity), true

	case "FxEdge.node":
		if e.complexity.FxEdge.Node == nil {
			break
		}

		return e.complexity.FxEdge.Node(childComplexity), true

	case "Identity.active":
		if e.complexity.Identity.Active == nil {
			break
		}

		return e.complexity.Identity.Active(childComplexity), true

	case "Identity.authentication":
		if e.complexity.Identity.Authentication == nil {
			break
		}

		return e.complexity.Identity.Authentication(childComplexity), true

	case "Identity.credentials":
		if e.complexity.Identity.Credentials == nil {
			break
		}

		return e.complexity.Identity.Credentials(childComplexity), true

	case "Identity.devices":
		if e.complexity.Identity.Devices == nil {
			break
		}

		return e.complexity.Identity.Devices(childComplexity), true

	case "Identity.id":
		if e.complexity.Identity.ID == nil {
			break
		}

		return e.complexity.Identity.ID(childComplexity), true

	case "Identity.nickname":
		if e.complexity.Identity.Nickname == nil {
			break
		}

		return e.complexity.Identity.Nickname(childComplexity), true

	case "Identity.organisation":
		if e.complexity.Identity.Organisation == nil {
			break
		}

		return e.complexity.Identity.Organisation(childComplexity), true

	case "Identity.owner":
		if e.complexity.Identity.Owner == nil {
			break
		}

		return e.complexity.Identity.Owner(childComplexity), true

	case "Identity.status":
		if e.complexity.Identity.Status == nil {
			break
		}

		return e.complexity.Identity.Status(childComplexity), true

	case "Identity.ts":
		if e.complexity.Identity.Ts == nil {
			break
		}

		return e.complexity.Identity.Ts(childComplexity), true

	case "ImageAssets.image":
		if e.complexity.ImageAssets.Image == nil {
			break
		}

		return e.complexity.ImageAssets.Image(childComplexity), true

	case "ImageAssets.safe":
		if e.complexity.ImageAssets.Safe == nil {
			break
		}

		return e.complexity.ImageAssets.Safe(childComplexity), true

	case "ImageAssets.svg":
		if e.complexity.ImageAssets.Svg == nil {
			break
		}

		return e.complexity.ImageAssets.Svg(childComplexity), true

	case "ImageAssets.type":
		if e.complexity.ImageAssets.Type == nil {
			break
		}

		return e.complexity.ImageAssets.Type(childComplexity), true

	case "Industry.code":
		if e.complexity.Industry.Code == nil {
			break
		}

		return e.complexity.Industry.Code(childComplexity), true

	case "Industry.description":
		if e.complexity.Industry.Description == nil {
			break
		}

		return e.complexity.Industry.Description(childComplexity), true

	case "Industry.id":
		if e.complexity.Industry.ID == nil {
			break
		}

		return e.complexity.Industry.ID(childComplexity), true

	case "Industry.score":
		if e.complexity.Industry.Score == nil {
			break
		}

		return e.complexity.Industry.Score(childComplexity), true

	case "Industry.section":
		if e.complexity.Industry.Section == nil {
			break
		}

		return e.complexity.Industry.Section(childComplexity), true

	case "Industry.source":
		if e.complexity.Industry.Source == nil {
			break
		}

		return e.complexity.Industry.Source(childComplexity), true

	case "IndustryConnection.edges":
		if e.complexity.IndustryConnection.Edges == nil {
			break
		}

		return e.complexity.IndustryConnection.Edges(childComplexity), true

	case "IndustryConnection.nodes":
		if e.complexity.IndustryConnection.Nodes == nil {
			break
		}

		return e.complexity.IndustryConnection.Nodes(childComplexity), true

	case "IndustryConnection.pageInfo":
		if e.complexity.IndustryConnection.PageInfo == nil {
			break
		}

		return e.complexity.IndustryConnection.PageInfo(childComplexity), true

	case "IndustryConnection.totalCount":
		if e.complexity.IndustryConnection.TotalCount == nil {
			break
		}

		return e.complexity.IndustryConnection.TotalCount(childComplexity), true

	case "IndustryEdge.cursor":
		if e.complexity.IndustryEdge.Cursor == nil {
			break
		}

		return e.complexity.IndustryEdge.Cursor(childComplexity), true

	case "IndustryEdge.node":
		if e.complexity.IndustryEdge.Node == nil {
			break
		}

		return e.complexity.IndustryEdge.Node(childComplexity), true

	case "InterestPaymentDates.day":
		if e.complexity.InterestPaymentDates.Day == nil {
			break
		}

		return e.complexity.InterestPaymentDates.Day(childComplexity), true

	case "InterestPaymentDates.month":
		if e.complexity.InterestPaymentDates.Month == nil {
			break
		}

		return e.complexity.InterestPaymentDates.Month(childComplexity), true

	case "InterestPaymentSettings.interest_payment_dates":
		if e.complexity.InterestPaymentSettings.InterestPaymentDates == nil {
			break
		}

		return e.complexity.InterestPaymentSettings.InterestPaymentDates(childComplexity), true

	case "InterestPaymentSettings.interest_payment_point":
		if e.complexity.InterestPaymentSettings.InterestPaymentPoint == nil {
			break
		}

		return e.complexity.InterestPaymentSettings.InterestPaymentPoint(childComplexity), true

	case "InterestRate.default_value":
		if e.complexity.InterestRate.DefaultValue == nil {
			break
		}

		return e.complexity.InterestRate.DefaultValue(childComplexity), true

	case "InterestRate.max_value":
		if e.complexity.InterestRate.MaxValue == nil {
			break
		}

		return e.complexity.InterestRate.MaxValue(childComplexity), true

	case "InterestRate.min_value":
		if e.complexity.InterestRate.MinValue == nil {
			break
		}

		return e.complexity.InterestRate.MinValue(childComplexity), true

	case "InterestRateSettings.encoded_key":
		if e.complexity.InterestRateSettings.EncodedKey == nil {
			break
		}

		return e.complexity.InterestRateSettings.EncodedKey(childComplexity), true

	case "InterestRateSettings.interest_charge_frequency":
		if e.complexity.InterestRateSettings.InterestChargeFrequency == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestChargeFrequency(childComplexity), true

	case "InterestRateSettings.interest_charge_frequency_count":
		if e.complexity.InterestRateSettings.InterestChargeFrequencyCount == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestChargeFrequencyCount(childComplexity), true

	case "InterestRateSettings.interest_rate":
		if e.complexity.InterestRateSettings.InterestRate == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRate(childComplexity), true

	case "InterestRateSettings.interest_rate_review_count":
		if e.complexity.InterestRateSettings.InterestRateReviewCount == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRateReviewCount(childComplexity), true

	case "InterestRateSettings.interest_rate_review_unit":
		if e.complexity.InterestRateSettings.InterestRateReviewUnit == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRateReviewUnit(childComplexity), true

	case "InterestRateSettings.interest_rate_source":
		if e.complexity.InterestRateSettings.InterestRateSource == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRateSource(childComplexity), true

	case "InterestRateSettings.interest_rate_terms":
		if e.complexity.InterestRateSettings.InterestRateTerms == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRateTerms(childComplexity), true

	case "InterestRateSettings.interest_rate_tiers":
		if e.complexity.InterestRateSettings.InterestRateTiers == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestRateTiers(childComplexity), true

	case "InterestRateSettings.interest_spread":
		if e.complexity.InterestRateSettings.InterestSpread == nil {
			break
		}

		return e.complexity.InterestRateSettings.InterestSpread(childComplexity), true

	case "InterestRateTiers.encoded_key":
		if e.complexity.InterestRateTiers.EncodedKey == nil {
			break
		}

		return e.complexity.InterestRateTiers.EncodedKey(childComplexity), true

	case "InterestRateTiers.ending_balance":
		if e.complexity.InterestRateTiers.EndingBalance == nil {
			break
		}

		return e.complexity.InterestRateTiers.EndingBalance(childComplexity), true

	case "InterestRateTiers.ending_day":
		if e.complexity.InterestRateTiers.EndingDay == nil {
			break
		}

		return e.complexity.InterestRateTiers.EndingDay(childComplexity), true

	case "InterestRateTiers.interest_rate":
		if e.complexity.InterestRateTiers.InterestRate == nil {
			break
		}

		return e.complexity.InterestRateTiers.InterestRate(childComplexity), true

	case "InterestSettings.charge_frequency":
		if e.complexity.InterestSettings.ChargeFrequency == nil {
			break
		}

		return e.complexity.InterestSettings.ChargeFrequency(childComplexity), true

	case "InterestSettings.charge_frequency_count":
		if e.complexity.InterestSettings.ChargeFrequencyCount == nil {
			break
		}

		return e.complexity.InterestSettings.ChargeFrequencyCount(childComplexity), true

	case "InterestSettings.days_in_year":
		if e.complexity.InterestSettings.DaysInYear == nil {
			break
		}

		return e.complexity.InterestSettings.DaysInYear(childComplexity), true

	case "InterestSettings.index_source_key":
		if e.complexity.InterestSettings.IndexSourceKey == nil {
			break
		}

		return e.complexity.InterestSettings.IndexSourceKey(childComplexity), true

	case "InterestSettings.interest_calculation_balance":
		if e.complexity.InterestSettings.InterestCalculationBalance == nil {
			break
		}

		return e.complexity.InterestSettings.InterestCalculationBalance(childComplexity), true

	case "InterestSettings.interest_payment_settings":
		if e.complexity.InterestSettings.InterestPaymentSettings == nil {
			break
		}

		return e.complexity.InterestSettings.InterestPaymentSettings(childComplexity), true

	case "InterestSettings.interest_rate":
		if e.complexity.InterestSettings.InterestRate == nil {
			break
		}

		return e.complexity.InterestSettings.InterestRate(childComplexity), true

	case "InterestSettings.interest_rate_review_unit":
		if e.complexity.InterestSettings.InterestRateReviewUnit == nil {
			break
		}

		return e.complexity.InterestSettings.InterestRateReviewUnit(childComplexity), true

	case "InterestSettings.interest_rate_settings":
		if e.complexity.InterestSettings.InterestRateSettings == nil {
			break
		}

		return e.complexity.InterestSettings.InterestRateSettings(childComplexity), true

	case "InterestSettings.rate_review_count":
		if e.complexity.InterestSettings.RateReviewCount == nil {
			break
		}

		return e.complexity.InterestSettings.RateReviewCount(childComplexity), true

	case "InterestSettings.rate_source":
		if e.complexity.InterestSettings.RateSource == nil {
			break
		}

		return e.complexity.InterestSettings.RateSource(childComplexity), true

	case "InterestSettings.rate_terms":
		if e.complexity.InterestSettings.RateTerms == nil {
			break
		}

		return e.complexity.InterestSettings.RateTerms(childComplexity), true

	case "InterestSettings.rate_tiers":
		if e.complexity.InterestSettings.RateTiers == nil {
			break
		}

		return e.complexity.InterestSettings.RateTiers(childComplexity), true

	case "InternalControls.max_deposit_balance":
		if e.complexity.InternalControls.MaxDepositBalance == nil {
			break
		}

		return e.complexity.InternalControls.MaxDepositBalance(childComplexity), true

	case "InternalControls.max_withdrawal_amount":
		if e.complexity.InternalControls.MaxWithdrawalAmount == nil {
			break
		}

		return e.complexity.InternalControls.MaxWithdrawalAmount(childComplexity), true

	case "InternalControls.recommended_deposit_amount":
		if e.complexity.InternalControls.RecommendedDepositAmount == nil {
			break
		}

		return e.complexity.InternalControls.RecommendedDepositAmount(childComplexity), true

	case "InternalControls.target_amount":
		if e.complexity.InternalControls.TargetAmount == nil {
			break
		}

		return e.complexity.InternalControls.TargetAmount(childComplexity), true

	case "Location.latitude":
		if e.complexity.Location.Latitude == nil {
			break
		}

		return e.complexity.Location.Latitude(childComplexity), true

	case "Location.longitude":
		if e.complexity.Location.Longitude == nil {
			break
		}

		return e.complexity.Location.Longitude(childComplexity), true

	case "Message.body":
		if e.complexity.Message.Body == nil {
			break
		}

		return e.complexity.Message.Body(childComplexity), true

	case "Message.delivery_mode":
		if e.complexity.Message.DeliveryMode == nil {
			break
		}

		return e.complexity.Message.DeliveryMode(childComplexity), true

	case "Message.has_read":
		if e.complexity.Message.HasRead == nil {
			break
		}

		return e.complexity.Message.HasRead(childComplexity), true

	case "Message.id":
		if e.complexity.Message.ID == nil {
			break
		}

		return e.complexity.Message.ID(childComplexity), true

	case "Message.owner":
		if e.complexity.Message.Owner == nil {
			break
		}

		return e.complexity.Message.Owner(childComplexity), true

	case "Message.sender":
		if e.complexity.Message.Sender == nil {
			break
		}

		return e.complexity.Message.Sender(childComplexity), true

	case "Message.sent":
		if e.complexity.Message.Sent == nil {
			break
		}

		return e.complexity.Message.Sent(childComplexity), true

	case "Message.status":
		if e.complexity.Message.Status == nil {
			break
		}

		return e.complexity.Message.Status(childComplexity), true

	case "Message.target":
		if e.complexity.Message.Target == nil {
			break
		}

		return e.complexity.Message.Target(childComplexity), true

	case "Message.title":
		if e.complexity.Message.Title == nil {
			break
		}

		return e.complexity.Message.Title(childComplexity), true

	case "Message.ts":
		if e.complexity.Message.Ts == nil {
			break
		}

		return e.complexity.Message.Ts(childComplexity), true

	case "MessageConnection.edges":
		if e.complexity.MessageConnection.Edges == nil {
			break
		}

		return e.complexity.MessageConnection.Edges(childComplexity), true

	case "MessageConnection.nodes":
		if e.complexity.MessageConnection.Nodes == nil {
			break
		}

		return e.complexity.MessageConnection.Nodes(childComplexity), true

	case "MessageConnection.pageInfo":
		if e.complexity.MessageConnection.PageInfo == nil {
			break
		}

		return e.complexity.MessageConnection.PageInfo(childComplexity), true

	case "MessageConnection.totalCount":
		if e.complexity.MessageConnection.TotalCount == nil {
			break
		}

		return e.complexity.MessageConnection.TotalCount(childComplexity), true

	case "MessageEdge.cursor":
		if e.complexity.MessageEdge.Cursor == nil {
			break
		}

		return e.complexity.MessageEdge.Cursor(childComplexity), true

	case "MessageEdge.node":
		if e.complexity.MessageEdge.Node == nil {
			break
		}

		return e.complexity.MessageEdge.Node(childComplexity), true

	case "Mutation.acceptTerms":
		if e.complexity.Mutation.AcceptTerms == nil {
			break
		}

		args, err := ec.field_Mutation_acceptTerms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AcceptTerms(childComplexity, args["documents"].([]*string)), true

	case "Mutation.addPayeeAccount":
		if e.complexity.Mutation.AddPayeeAccount == nil {
			break
		}

		args, err := ec.field_Mutation_addPayeeAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPayeeAccount(childComplexity, args["payee"].(string), args["payee_account"].(types.PayeeAccountInput)), true

	case "Mutation.confirmPasscodeResetOtp":
		if e.complexity.Mutation.ConfirmPasscodeResetOtp == nil {
			break
		}

		args, err := ec.field_Mutation_confirmPasscodeResetOtp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmPasscodeResetOtp(childComplexity, args["email"].(string), args["otp"].(string)), true

	case "Mutation.confirmPhone":
		if e.complexity.Mutation.ConfirmPhone == nil {
			break
		}

		args, err := ec.field_Mutation_confirmPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmPhone(childComplexity, args["token"].(string), args["code"].(string)), true

	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["product"].(types.ProductInput)), true

	case "Mutation.createApplication":
		if e.complexity.Mutation.CreateApplication == nil {
			break
		}

		return e.complexity.Mutation.CreateApplication(childComplexity), true

	case "Mutation.createPayee":
		if e.complexity.Mutation.CreatePayee == nil {
			break
		}

		args, err := ec.field_Mutation_createPayee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePayee(childComplexity, args["payee"].(types.PayeeInput), args["password"].(string)), true

	case "Mutation.createPayment":
		if e.complexity.Mutation.CreatePayment == nil {
			break
		}

		args, err := ec.field_Mutation_createPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePayment(childComplexity, args["payment"].(types.PaymentInput), args["password"].(string)), true

	case "Mutation.createPhone":
		if e.complexity.Mutation.CreatePhone == nil {
			break
		}

		args, err := ec.field_Mutation_createPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePhone(childComplexity, args["phone"].(string), args["device"].(types.DeviceInput)), true

	case "Mutation.createTransactionPassword":
		if e.complexity.Mutation.CreateTransactionPassword == nil {
			break
		}

		args, err := ec.field_Mutation_createTransactionPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTransactionPassword(childComplexity, args["password"].(string)), true

	case "Mutation.deletePayeeAccount":
		if e.complexity.Mutation.DeletePayeeAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deletePayeeAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePayeeAccount(childComplexity, args["payee"].(string), args["payee_account"].(string)), true

	case "Mutation.intendedActivities":
		if e.complexity.Mutation.IntendedActivities == nil {
			break
		}

		args, err := ec.field_Mutation_intendedActivities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.IntendedActivities(childComplexity, args["activities"].([]string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["credentials"].(types.AuthInput)), true

	case "Mutation.loginWithToken":
		if e.complexity.Mutation.LoginWithToken == nil {
			break
		}

		args, err := ec.field_Mutation_loginWithToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginWithToken(childComplexity, args["token"].(string), args["authType"].(types.AuthType)), true

	case "Mutation.refreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		args, err := ec.field_Mutation_refreshToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshToken(childComplexity, args["token"].(string)), true

	case "Mutation.register":
		if e.complexity.Mutation.Register == nil {
			break
		}

		args, err := ec.field_Mutation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Register(childComplexity, args["person"].(types.PersonInput), args["address"].(types.AddressInput)), true

	case "Mutation.requestOTP":
		if e.complexity.Mutation.RequestOtp == nil {
			break
		}

		args, err := ec.field_Mutation_requestOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestOtp(childComplexity, args["type"].(types.DeliveryMode), args["target"].(string), args["expireTime"].(*int64)), true

	case "Mutation.requestPasscodeReset":
		if e.complexity.Mutation.RequestPasscodeReset == nil {
			break
		}

		args, err := ec.field_Mutation_requestPasscodeReset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestPasscodeReset(childComplexity, args["email"].(string), args["device"].(types.DeviceInput)), true

	case "Mutation.requestTransactionPasscodeReset":
		if e.complexity.Mutation.RequestTransactionPasscodeReset == nil {
			break
		}

		args, err := ec.field_Mutation_requestTransactionPasscodeReset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestTransactionPasscodeReset(childComplexity, args["email"].(string)), true

	case "Mutation.resendEmailMagicLInk":
		if e.complexity.Mutation.ResendEmailMagicLInk == nil {
			break
		}

		args, err := ec.field_Mutation_resendEmailMagicLInk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResendEmailMagicLInk(childComplexity, args["email"].(string)), true

	case "Mutation.resendOTP":
		if e.complexity.Mutation.ResendOtp == nil {
			break
		}

		args, err := ec.field_Mutation_resendOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResendOtp(childComplexity, args["phone"].(string)), true

	case "Mutation.resetPasscode":
		if e.complexity.Mutation.ResetPasscode == nil {
			break
		}

		args, err := ec.field_Mutation_resetPasscode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPasscode(childComplexity, args["token"].(string), args["email"].(string), args["passcode"].(string)), true

	case "Mutation.resetTransactionPasscode":
		if e.complexity.Mutation.ResetTransactionPasscode == nil {
			break
		}

		args, err := ec.field_Mutation_resetTransactionPasscode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetTransactionPasscode(childComplexity, args["email"].(string), args["currentPasscode"].(string), args["newPasscode"].(string)), true

	case "Mutation.resubmit":
		if e.complexity.Mutation.Resubmit == nil {
			break
		}

		args, err := ec.field_Mutation_resubmit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Resubmit(childComplexity, args["reports"].([]*types.ReportInput), args["message"].(*string)), true

	case "Mutation.resubmitReports":
		if e.complexity.Mutation.ResubmitReports == nil {
			break
		}

		args, err := ec.field_Mutation_resubmitReports_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResubmitReports(childComplexity, args["reports"].([]*types.ReportInput)), true

	case "Mutation.setDevicePreference":
		if e.complexity.Mutation.SetDevicePreference == nil {
			break
		}

		args, err := ec.field_Mutation_setDevicePreference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetDevicePreference(childComplexity, args["type"].(types.DevicePreferenceType), args["status"].(bool)), true

	case "Mutation.signup":
		if e.complexity.Mutation.Signup == nil {
			break
		}

		args, err := ec.field_Mutation_signup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Signup(childComplexity, args["token"].(string), args["email"].(string), args["passcode"].(string)), true

	case "Mutation.submitApplication":
		if e.complexity.Mutation.SubmitApplication == nil {
			break
		}

		return e.complexity.Mutation.SubmitApplication(childComplexity), true

	case "Mutation.submitProof":
		if e.complexity.Mutation.SubmitProof == nil {
			break
		}

		args, err := ec.field_Mutation_submitProof_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitProof(childComplexity, args["proof"].(types.SubmitProofInput)), true

	case "Mutation.updateDeviceToken":
		if e.complexity.Mutation.UpdateDeviceToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeviceToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeviceToken(childComplexity, args["token"].([]*types.DeviceTokenInput)), true

	case "Mutation.updatePayee":
		if e.complexity.Mutation.UpdatePayee == nil {
			break
		}

		args, err := ec.field_Mutation_updatePayee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePayee(childComplexity, args["payee"].(string), args["payee_input"].(*types.PayeeInput), args["password"].(string)), true

	case "Mutation.updateValidationStatus":
		if e.complexity.Mutation.UpdateValidationStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateValidationStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateValidationStatus(childComplexity, args["validation"].(string), args["status"].(types.State), args["message"].(string)), true

	case "Mutation.validateBVN":
		if e.complexity.Mutation.ValidateBvn == nil {
			break
		}

		args, err := ec.field_Mutation_validateBVN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ValidateBvn(childComplexity, args["bvn"].(string), args["phone"].(string)), true

	case "Mutation.validateEmail":
		if e.complexity.Mutation.ValidateEmail == nil {
			break
		}

		args, err := ec.field_Mutation_validateEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ValidateEmail(childComplexity, args["email"].(string), args["device"].(types.DeviceInput)), true

	case "Mutation.validateUser":
		if e.complexity.Mutation.ValidateUser == nil {
			break
		}

		args, err := ec.field_Mutation_validateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ValidateUser(childComplexity, args["user"].(types.ValidateUserInput)), true

	case "Mutation.verifyEmail":
		if e.complexity.Mutation.VerifyEmail == nil {
			break
		}

		args, err := ec.field_Mutation_verifyEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyEmail(childComplexity, args["email"].(string), args["code"].(string)), true

	case "Mutation.verifyOTP":
		if e.complexity.Mutation.VerifyOtp == nil {
			break
		}

		args, err := ec.field_Mutation_verifyOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyOtp(childComplexity, args["target"].(string), args["token"].(string)), true

	case "OpeningBalance.default_value":
		if e.complexity.OpeningBalance.DefaultValue == nil {
			break
		}

		return e.complexity.OpeningBalance.DefaultValue(childComplexity), true

	case "OpeningBalance.max":
		if e.complexity.OpeningBalance.Max == nil {
			break
		}

		return e.complexity.OpeningBalance.Max(childComplexity), true

	case "OpeningBalance.min":
		if e.complexity.OpeningBalance.Min == nil {
			break
		}

		return e.complexity.OpeningBalance.Min(childComplexity), true

	case "OrgLocation.city":
		if e.complexity.OrgLocation.City == nil {
			break
		}

		return e.complexity.OrgLocation.City(childComplexity), true

	case "OrgLocation.continent":
		if e.complexity.OrgLocation.Continent == nil {
			break
		}

		return e.complexity.OrgLocation.Continent(childComplexity), true

	case "OrgLocation.country":
		if e.complexity.OrgLocation.Country == nil {
			break
		}

		return e.complexity.OrgLocation.Country(childComplexity), true

	case "OrgLocation.country_code":
		if e.complexity.OrgLocation.CountryCode == nil {
			break
		}

		return e.complexity.OrgLocation.CountryCode(childComplexity), true

	case "OrgLocation.state":
		if e.complexity.OrgLocation.State == nil {
			break
		}

		return e.complexity.OrgLocation.State(childComplexity), true

	case "Organisation.addresses":
		if e.complexity.Organisation.Addresses == nil {
			break
		}

		return e.complexity.Organisation.Addresses(childComplexity), true

	case "Organisation.banner":
		if e.complexity.Organisation.Banner == nil {
			break
		}

		return e.complexity.Organisation.Banner(childComplexity), true

	case "Organisation.description":
		if e.complexity.Organisation.Description == nil {
			break
		}

		return e.complexity.Organisation.Description(childComplexity), true

	case "Organisation.domain":
		if e.complexity.Organisation.Domain == nil {
			break
		}

		return e.complexity.Organisation.Domain(childComplexity), true

	case "Organisation.email":
		if e.complexity.Organisation.Email == nil {
			break
		}

		return e.complexity.Organisation.Email(childComplexity), true

	case "Organisation.employees":
		if e.complexity.Organisation.Employees == nil {
			break
		}

		return e.complexity.Organisation.Employees(childComplexity), true

	case "Organisation.id":
		if e.complexity.Organisation.ID == nil {
			break
		}

		return e.complexity.Organisation.ID(childComplexity), true

	case "Organisation.identities":
		if e.complexity.Organisation.Identities == nil {
			break
		}

		return e.complexity.Organisation.Identities(childComplexity), true

	case "Organisation.image_assets":
		if e.complexity.Organisation.ImageAssets == nil {
			break
		}

		return e.complexity.Organisation.ImageAssets(childComplexity), true

	case "Organisation.industries":
		if e.complexity.Organisation.Industries == nil {
			break
		}

		return e.complexity.Organisation.Industries(childComplexity), true

	case "Organisation.keywords":
		if e.complexity.Organisation.Keywords == nil {
			break
		}

		return e.complexity.Organisation.Keywords(childComplexity), true

	case "Organisation.language":
		if e.complexity.Organisation.Language == nil {
			break
		}

		return e.complexity.Organisation.Language(childComplexity), true

	case "Organisation.location":
		if e.complexity.Organisation.Location == nil {
			break
		}

		return e.complexity.Organisation.Location(childComplexity), true

	case "Organisation.name":
		if e.complexity.Organisation.Name == nil {
			break
		}

		return e.complexity.Organisation.Name(childComplexity), true

	case "Organisation.raised":
		if e.complexity.Organisation.Raised == nil {
			break
		}

		return e.complexity.Organisation.Raised(childComplexity), true

	case "Organisation.revenue":
		if e.complexity.Organisation.Revenue == nil {
			break
		}

		return e.complexity.Organisation.Revenue(childComplexity), true

	case "Organisation.social":
		if e.complexity.Organisation.Social == nil {
			break
		}

		return e.complexity.Organisation.Social(childComplexity), true

	case "Organisation.ts":
		if e.complexity.Organisation.Ts == nil {
			break
		}

		return e.complexity.Organisation.Ts(childComplexity), true

	case "OrganisationConnection.edges":
		if e.complexity.OrganisationConnection.Edges == nil {
			break
		}

		return e.complexity.OrganisationConnection.Edges(childComplexity), true

	case "OrganisationConnection.nodes":
		if e.complexity.OrganisationConnection.Nodes == nil {
			break
		}

		return e.complexity.OrganisationConnection.Nodes(childComplexity), true

	case "OrganisationConnection.pageInfo":
		if e.complexity.OrganisationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganisationConnection.PageInfo(childComplexity), true

	case "OrganisationConnection.totalCount":
		if e.complexity.OrganisationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganisationConnection.TotalCount(childComplexity), true

	case "OrganisationEdge.cursor":
		if e.complexity.OrganisationEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganisationEdge.Cursor(childComplexity), true

	case "OrganisationEdge.node":
		if e.complexity.OrganisationEdge.Node == nil {
			break
		}

		return e.complexity.OrganisationEdge.Node(childComplexity), true

	case "OverdraftInterestSettings.interest_rate_settings":
		if e.complexity.OverdraftInterestSettings.InterestRateSettings == nil {
			break
		}

		return e.complexity.OverdraftInterestSettings.InterestRateSettings(childComplexity), true

	case "OverdraftSetting.allow_overdraft":
		if e.complexity.OverdraftSetting.AllowOverdraft == nil {
			break
		}

		return e.complexity.OverdraftSetting.AllowOverdraft(childComplexity), true

	case "OverdraftSetting.allow_technical_overdraft":
		if e.complexity.OverdraftSetting.AllowTechnicalOverdraft == nil {
			break
		}

		return e.complexity.OverdraftSetting.AllowTechnicalOverdraft(childComplexity), true

	case "OverdraftSetting.interest_settings":
		if e.complexity.OverdraftSetting.InterestSettings == nil {
			break
		}

		return e.complexity.OverdraftSetting.InterestSettings(childComplexity), true

	case "OverdraftSetting.max_limit":
		if e.complexity.OverdraftSetting.MaxLimit == nil {
			break
		}

		return e.complexity.OverdraftSetting.MaxLimit(childComplexity), true

	case "OverdraftSettings.allow_overdraft":
		if e.complexity.OverdraftSettings.AllowOverdraft == nil {
			break
		}

		return e.complexity.OverdraftSettings.AllowOverdraft(childComplexity), true

	case "OverdraftSettings.overdraft_expiry_date":
		if e.complexity.OverdraftSettings.OverdraftExpiryDate == nil {
			break
		}

		return e.complexity.OverdraftSettings.OverdraftExpiryDate(childComplexity), true

	case "OverdraftSettings.overdraft_limit":
		if e.complexity.OverdraftSettings.OverdraftLimit == nil {
			break
		}

		return e.complexity.OverdraftSettings.OverdraftLimit(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Payee.accounts":
		if e.complexity.Payee.Accounts == nil {
			break
		}

		return e.complexity.Payee.Accounts(childComplexity), true

	case "Payee.avatar":
		if e.complexity.Payee.Avatar == nil {
			break
		}

		return e.complexity.Payee.Avatar(childComplexity), true

	case "Payee.id":
		if e.complexity.Payee.ID == nil {
			break
		}

		return e.complexity.Payee.ID(childComplexity), true

	case "Payee.name":
		if e.complexity.Payee.Name == nil {
			break
		}

		return e.complexity.Payee.Name(childComplexity), true

	case "Payee.owner":
		if e.complexity.Payee.Owner == nil {
			break
		}

		return e.complexity.Payee.Owner(childComplexity), true

	case "Payee.ts":
		if e.complexity.Payee.Ts == nil {
			break
		}

		return e.complexity.Payee.Ts(childComplexity), true

	case "PayeeAccount.account_number":
		if e.complexity.PayeeAccount.AccountNumber == nil {
			break
		}

		return e.complexity.PayeeAccount.AccountNumber(childComplexity), true

	case "PayeeAccount.bank_code":
		if e.complexity.PayeeAccount.BankCode == nil {
			break
		}

		return e.complexity.PayeeAccount.BankCode(childComplexity), true

	case "PayeeAccount.currency":
		if e.complexity.PayeeAccount.Currency == nil {
			break
		}

		return e.complexity.PayeeAccount.Currency(childComplexity), true

	case "PayeeAccount.id":
		if e.complexity.PayeeAccount.ID == nil {
			break
		}

		return e.complexity.PayeeAccount.ID(childComplexity), true

	case "PayeeAccount.iban":
		if e.complexity.PayeeAccount.Iban == nil {
			break
		}

		return e.complexity.PayeeAccount.Iban(childComplexity), true

	case "PayeeAccount.name":
		if e.complexity.PayeeAccount.Name == nil {
			break
		}

		return e.complexity.PayeeAccount.Name(childComplexity), true

	case "PayeeAccount.phone_number":
		if e.complexity.PayeeAccount.PhoneNumber == nil {
			break
		}

		return e.complexity.PayeeAccount.PhoneNumber(childComplexity), true

	case "PayeeAccount.routing_number":
		if e.complexity.PayeeAccount.RoutingNumber == nil {
			break
		}

		return e.complexity.PayeeAccount.RoutingNumber(childComplexity), true

	case "PayeeAccount.sort_code":
		if e.complexity.PayeeAccount.SortCode == nil {
			break
		}

		return e.complexity.PayeeAccount.SortCode(childComplexity), true

	case "PayeeAccount.swift_bic":
		if e.complexity.PayeeAccount.SwiftBic == nil {
			break
		}

		return e.complexity.PayeeAccount.SwiftBic(childComplexity), true

	case "PayeeConnection.edges":
		if e.complexity.PayeeConnection.Edges == nil {
			break
		}

		return e.complexity.PayeeConnection.Edges(childComplexity), true

	case "PayeeConnection.nodes":
		if e.complexity.PayeeConnection.Nodes == nil {
			break
		}

		return e.complexity.PayeeConnection.Nodes(childComplexity), true

	case "PayeeConnection.pageInfo":
		if e.complexity.PayeeConnection.PageInfo == nil {
			break
		}

		return e.complexity.PayeeConnection.PageInfo(childComplexity), true

	case "PayeeConnection.totalCount":
		if e.complexity.PayeeConnection.TotalCount == nil {
			break
		}

		return e.complexity.PayeeConnection.TotalCount(childComplexity), true

	case "PayeeEdge.cursor":
		if e.complexity.PayeeEdge.Cursor == nil {
			break
		}

		return e.complexity.PayeeEdge.Cursor(childComplexity), true

	case "PayeeEdge.node":
		if e.complexity.PayeeEdge.Node == nil {
			break
		}

		return e.complexity.PayeeEdge.Node(childComplexity), true

	case "Payment.beneficiary":
		if e.complexity.Payment.Beneficiary == nil {
			break
		}

		return e.complexity.Payment.Beneficiary(childComplexity), true

	case "Payment.charge":
		if e.complexity.Payment.Charge == nil {
			break
		}

		return e.complexity.Payment.Charge(childComplexity), true

	case "Payment.currency":
		if e.complexity.Payment.Currency == nil {
			break
		}

		return e.complexity.Payment.Currency(childComplexity), true

	case "Payment.funding_amount":
		if e.complexity.Payment.FundingAmount == nil {
			break
		}

		return e.complexity.Payment.FundingAmount(childComplexity), true

	case "Payment.funding_source":
		if e.complexity.Payment.FundingSource == nil {
			break
		}

		return e.complexity.Payment.FundingSource(childComplexity), true

	case "Payment.id":
		if e.complexity.Payment.ID == nil {
			break
		}

		return e.complexity.Payment.ID(childComplexity), true

	case "Payment.idempotency_key":
		if e.complexity.Payment.IdempotencyKey == nil {
			break
		}

		return e.complexity.Payment.IdempotencyKey(childComplexity), true

	case "Payment.image":
		if e.complexity.Payment.Image == nil {
			break
		}

		return e.complexity.Payment.Image(childComplexity), true

	case "Payment.notes":
		if e.complexity.Payment.Notes == nil {
			break
		}

		return e.complexity.Payment.Notes(childComplexity), true

	case "Payment.owner":
		if e.complexity.Payment.Owner == nil {
			break
		}

		return e.complexity.Payment.Owner(childComplexity), true

	case "Payment.quote":
		if e.complexity.Payment.Quote == nil {
			break
		}

		return e.complexity.Payment.Quote(childComplexity), true

	case "Payment.reference":
		if e.complexity.Payment.Reference == nil {
			break
		}

		return e.complexity.Payment.Reference(childComplexity), true

	case "Payment.status":
		if e.complexity.Payment.Status == nil {
			break
		}

		return e.complexity.Payment.Status(childComplexity), true

	case "Payment.tags":
		if e.complexity.Payment.Tags == nil {
			break
		}

		return e.complexity.Payment.Tags(childComplexity), true

	case "Payment.ts":
		if e.complexity.Payment.Ts == nil {
			break
		}

		return e.complexity.Payment.Ts(childComplexity), true

	case "PaymentConnection.edges":
		if e.complexity.PaymentConnection.Edges == nil {
			break
		}

		return e.complexity.PaymentConnection.Edges(childComplexity), true

	case "PaymentConnection.nodes":
		if e.complexity.PaymentConnection.Nodes == nil {
			break
		}

		return e.complexity.PaymentConnection.Nodes(childComplexity), true

	case "PaymentConnection.pageInfo":
		if e.complexity.PaymentConnection.PageInfo == nil {
			break
		}

		return e.complexity.PaymentConnection.PageInfo(childComplexity), true

	case "PaymentConnection.totalCount":
		if e.complexity.PaymentConnection.TotalCount == nil {
			break
		}

		return e.complexity.PaymentConnection.TotalCount(childComplexity), true

	case "PaymentEdge.cursor":
		if e.complexity.PaymentEdge.Cursor == nil {
			break
		}

		return e.complexity.PaymentEdge.Cursor(childComplexity), true

	case "PaymentEdge.node":
		if e.complexity.PaymentEdge.Node == nil {
			break
		}

		return e.complexity.PaymentEdge.Node(childComplexity), true

	case "Person.activities":
		if e.complexity.Person.Activities == nil {
			break
		}

		return e.complexity.Person.Activities(childComplexity), true

	case "Person.addresses":
		if e.complexity.Person.Addresses == nil {
			break
		}

		return e.complexity.Person.Addresses(childComplexity), true

	case "Person.bvn":
		if e.complexity.Person.Bvn == nil {
			break
		}

		return e.complexity.Person.Bvn(childComplexity), true

	case "Person.cdd":
		if e.complexity.Person.Cdd == nil {
			break
		}

		return e.complexity.Person.Cdd(childComplexity), true

	case "Person.country_residence":
		if e.complexity.Person.CountryResidence == nil {
			break
		}

		return e.complexity.Person.CountryResidence(childComplexity), true

	case "Person.dob":
		if e.complexity.Person.Dob == nil {
			break
		}

		return e.complexity.Person.Dob(childComplexity), true

	case "Person.emails":
		if e.complexity.Person.Emails == nil {
			break
		}

		return e.complexity.Person.Emails(childComplexity), true

	case "Person.employer":
		if e.complexity.Person.Employer == nil {
			break
		}

		return e.complexity.Person.Employer(childComplexity), true

	case "Person.first_name":
		if e.complexity.Person.FirstName == nil {
			break
		}

		return e.complexity.Person.FirstName(childComplexity), true

	case "Person.id":
		if e.complexity.Person.ID == nil {
			break
		}

		return e.complexity.Person.ID(childComplexity), true

	case "Person.identities":
		if e.complexity.Person.Identities == nil {
			break
		}

		return e.complexity.Person.Identities(childComplexity), true

	case "Person.last_name":
		if e.complexity.Person.LastName == nil {
			break
		}

		return e.complexity.Person.LastName(childComplexity), true

	case "Person.middle_name":
		if e.complexity.Person.MiddleName == nil {
			break
		}

		return e.complexity.Person.MiddleName(childComplexity), true

	case "Person.nationality":
		if e.complexity.Person.Nationality == nil {
			break
		}

		return e.complexity.Person.Nationality(childComplexity), true

	case "Person.onboarding_status":
		if e.complexity.Person.OnboardingStatus == nil {
			break
		}

		return e.complexity.Person.OnboardingStatus(childComplexity), true

	case "Person.phones":
		if e.complexity.Person.Phones == nil {
			break
		}

		return e.complexity.Person.Phones(childComplexity), true

	case "Person.status":
		if e.complexity.Person.Status == nil {
			break
		}

		return e.complexity.Person.Status(childComplexity), true

	case "Person.title":
		if e.complexity.Person.Title == nil {
			break
		}

		return e.complexity.Person.Title(childComplexity), true

	case "Person.ts":
		if e.complexity.Person.Ts == nil {
			break
		}

		return e.complexity.Person.Ts(childComplexity), true

	case "PersonConnection.edges":
		if e.complexity.PersonConnection.Edges == nil {
			break
		}

		return e.complexity.PersonConnection.Edges(childComplexity), true

	case "PersonConnection.nodes":
		if e.complexity.PersonConnection.Nodes == nil {
			break
		}

		return e.complexity.PersonConnection.Nodes(childComplexity), true

	case "PersonConnection.pageInfo":
		if e.complexity.PersonConnection.PageInfo == nil {
			break
		}

		return e.complexity.PersonConnection.PageInfo(childComplexity), true

	case "PersonConnection.totalCount":
		if e.complexity.PersonConnection.TotalCount == nil {
			break
		}

		return e.complexity.PersonConnection.TotalCount(childComplexity), true

	case "PersonEdge.cursor":
		if e.complexity.PersonEdge.Cursor == nil {
			break
		}

		return e.complexity.PersonEdge.Cursor(childComplexity), true

	case "PersonEdge.node":
		if e.complexity.PersonEdge.Node == nil {
			break
		}

		return e.complexity.PersonEdge.Node(childComplexity), true

	case "Phone.carrier":
		if e.complexity.Phone.Carrier == nil {
			break
		}

		return e.complexity.Phone.Carrier(childComplexity), true

	case "Phone.name":
		if e.complexity.Phone.Name == nil {
			break
		}

		return e.complexity.Phone.Name(childComplexity), true

	case "Phone.primary":
		if e.complexity.Phone.Primary == nil {
			break
		}

		return e.complexity.Phone.Primary(childComplexity), true

	case "Phone.type":
		if e.complexity.Phone.Type == nil {
			break
		}

		return e.complexity.Phone.Type(childComplexity), true

	case "Phone.value":
		if e.complexity.Phone.Value == nil {
			break
		}

		return e.complexity.Phone.Value(childComplexity), true

	case "Phone.verified":
		if e.complexity.Phone.Verified == nil {
			break
		}

		return e.complexity.Phone.Verified(childComplexity), true

	case "Product.details":
		if e.complexity.Product.Details == nil {
			break
		}

		return e.complexity.Product.Details(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.identification":
		if e.complexity.Product.Identification == nil {
			break
		}

		return e.complexity.Product.Identification(childComplexity), true

	case "Product.scheme":
		if e.complexity.Product.Scheme == nil {
			break
		}

		return e.complexity.Product.Scheme(childComplexity), true

	case "Product.ts":
		if e.complexity.Product.Ts == nil {
			break
		}

		return e.complexity.Product.Ts(childComplexity), true

	case "ProductConnection.edges":
		if e.complexity.ProductConnection.Edges == nil {
			break
		}

		return e.complexity.ProductConnection.Edges(childComplexity), true

	case "ProductConnection.nodes":
		if e.complexity.ProductConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductConnection.Nodes(childComplexity), true

	case "ProductConnection.pageInfo":
		if e.complexity.ProductConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductConnection.PageInfo(childComplexity), true

	case "ProductConnection.totalCount":
		if e.complexity.ProductConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductConnection.TotalCount(childComplexity), true

	case "ProductControl.dormancy_period_days":
		if e.complexity.ProductControl.DormancyPeriodDays == nil {
			break
		}

		return e.complexity.ProductControl.DormancyPeriodDays(childComplexity), true

	case "ProductControl.max_withdrawal_amount":
		if e.complexity.ProductControl.MaxWithdrawalAmount == nil {
			break
		}

		return e.complexity.ProductControl.MaxWithdrawalAmount(childComplexity), true

	case "ProductControl.opening_balance":
		if e.complexity.ProductControl.OpeningBalance == nil {
			break
		}

		return e.complexity.ProductControl.OpeningBalance(childComplexity), true

	case "ProductControl.recommended_deposit_amount":
		if e.complexity.ProductControl.RecommendedDepositAmount == nil {
			break
		}

		return e.complexity.ProductControl.RecommendedDepositAmount(childComplexity), true

	case "ProductDetails.allow_offset":
		if e.complexity.ProductDetails.AllowOffset == nil {
			break
		}

		return e.complexity.ProductDetails.AllowOffset(childComplexity), true

	case "ProductDetails.category":
		if e.complexity.ProductDetails.Category == nil {
			break
		}

		return e.complexity.ProductDetails.Category(childComplexity), true

	case "ProductDetails.credit_requirement":
		if e.complexity.ProductDetails.CreditRequirement == nil {
			break
		}

		return e.complexity.ProductDetails.CreditRequirement(childComplexity), true

	case "ProductDetails.currency":
		if e.complexity.ProductDetails.Currency == nil {
			break
		}

		return e.complexity.ProductDetails.Currency(childComplexity), true

	case "ProductDetails.interest_setting":
		if e.complexity.ProductDetails.InterestSetting == nil {
			break
		}

		return e.complexity.ProductDetails.InterestSetting(childComplexity), true

	case "ProductDetails.name":
		if e.complexity.ProductDetails.Name == nil {
			break
		}

		return e.complexity.ProductDetails.Name(childComplexity), true

	case "ProductDetails.notes":
		if e.complexity.ProductDetails.Notes == nil {
			break
		}

		return e.complexity.ProductDetails.Notes(childComplexity), true

	case "ProductDetails.overdraft_setting":
		if e.complexity.ProductDetails.OverdraftSetting == nil {
			break
		}

		return e.complexity.ProductDetails.OverdraftSetting(childComplexity), true

	case "ProductDetails.product_control":
		if e.complexity.ProductDetails.ProductControl == nil {
			break
		}

		return e.complexity.ProductDetails.ProductControl(childComplexity), true

	case "ProductDetails.product_fees":
		if e.complexity.ProductDetails.ProductFees == nil {
			break
		}

		return e.complexity.ProductDetails.ProductFees(childComplexity), true

	case "ProductDetails.product_maturity":
		if e.complexity.ProductDetails.ProductMaturity == nil {
			break
		}

		return e.complexity.ProductDetails.ProductMaturity(childComplexity), true

	case "ProductDetails.product_setting":
		if e.complexity.ProductDetails.ProductSetting == nil {
			break
		}

		return e.complexity.ProductDetails.ProductSetting(childComplexity), true

	case "ProductDetails.product_templates":
		if e.complexity.ProductDetails.ProductTemplates == nil {
			break
		}

		return e.complexity.ProductDetails.ProductTemplates(childComplexity), true

	case "ProductDetails.state":
		if e.complexity.ProductDetails.State == nil {
			break
		}

		return e.complexity.ProductDetails.State(childComplexity), true

	case "ProductDetails.type":
		if e.complexity.ProductDetails.Type == nil {
			break
		}

		return e.complexity.ProductDetails.Type(childComplexity), true

	case "ProductDetails.withholding_tax_enabled":
		if e.complexity.ProductDetails.WithholdingTaxEnabled == nil {
			break
		}

		return e.complexity.ProductDetails.WithholdingTaxEnabled(childComplexity), true

	case "ProductEdge.cursor":
		if e.complexity.ProductEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductEdge.Cursor(childComplexity), true

	case "ProductEdge.node":
		if e.complexity.ProductEdge.Node == nil {
			break
		}

		return e.complexity.ProductEdge.Node(childComplexity), true

	case "ProductFees.accounting_rules":
		if e.complexity.ProductFees.AccountingRules == nil {
			break
		}

		return e.complexity.ProductFees.AccountingRules(childComplexity), true

	case "ProductFees.amount":
		if e.complexity.ProductFees.Amount == nil {
			break
		}

		return e.complexity.ProductFees.Amount(childComplexity), true

	case "ProductFees.apply_date_method":
		if e.complexity.ProductFees.ApplyDateMethod == nil {
			break
		}

		return e.complexity.ProductFees.ApplyDateMethod(childComplexity), true

	case "ProductFees.calculation_method":
		if e.complexity.ProductFees.CalculationMethod == nil {
			break
		}

		return e.complexity.ProductFees.CalculationMethod(childComplexity), true

	case "ProductFees.creation_date":
		if e.complexity.ProductFees.CreationDate == nil {
			break
		}

		return e.complexity.ProductFees.CreationDate(childComplexity), true

	case "ProductFees.encoded_key":
		if e.complexity.ProductFees.EncodedKey == nil {
			break
		}

		return e.complexity.ProductFees.EncodedKey(childComplexity), true

	case "ProductFees.fee_application":
		if e.complexity.ProductFees.FeeApplication == nil {
			break
		}

		return e.complexity.ProductFees.FeeApplication(childComplexity), true

	case "ProductFees.last_modified":
		if e.complexity.ProductFees.LastModified == nil {
			break
		}

		return e.complexity.ProductFees.LastModified(childComplexity), true

	case "ProductFees.name":
		if e.complexity.ProductFees.Name == nil {
			break
		}

		return e.complexity.ProductFees.Name(childComplexity), true

	case "ProductFees.state":
		if e.complexity.ProductFees.State == nil {
			break
		}

		return e.complexity.ProductFees.State(childComplexity), true

	case "ProductFees.trigger":
		if e.complexity.ProductFees.Trigger == nil {
			break
		}

		return e.complexity.ProductFees.Trigger(childComplexity), true

	case "ProductInterestSetting.collect_interest_when_locked":
		if e.complexity.ProductInterestSetting.CollectInterestWhenLocked == nil {
			break
		}

		return e.complexity.ProductInterestSetting.CollectInterestWhenLocked(childComplexity), true

	case "ProductInterestSetting.days_in_year":
		if e.complexity.ProductInterestSetting.DaysInYear == nil {
			break
		}

		return e.complexity.ProductInterestSetting.DaysInYear(childComplexity), true

	case "ProductInterestSetting.interest_calculation_balance":
		if e.complexity.ProductInterestSetting.InterestCalculationBalance == nil {
			break
		}

		return e.complexity.ProductInterestSetting.InterestCalculationBalance(childComplexity), true

	case "ProductInterestSetting.interest_paid_into_account":
		if e.complexity.ProductInterestSetting.InterestPaidIntoAccount == nil {
			break
		}

		return e.complexity.ProductInterestSetting.InterestPaidIntoAccount(childComplexity), true

	case "ProductInterestSetting.interest_payment_dates":
		if e.complexity.ProductInterestSetting.InterestPaymentDates == nil {
			break
		}

		return e.complexity.ProductInterestSetting.InterestPaymentDates(childComplexity), true

	case "ProductInterestSetting.interest_payment_point":
		if e.complexity.ProductInterestSetting.InterestPaymentPoint == nil {
			break
		}

		return e.complexity.ProductInterestSetting.InterestPaymentPoint(childComplexity), true

	case "ProductInterestSetting.maximum_balance":
		if e.complexity.ProductInterestSetting.MaximumBalance == nil {
			break
		}

		return e.complexity.ProductInterestSetting.MaximumBalance(childComplexity), true

	case "ProductInterestSetting.rate_setting":
		if e.complexity.ProductInterestSetting.RateSetting == nil {
			break
		}

		return e.complexity.ProductInterestSetting.RateSetting(childComplexity), true

	case "ProductMaturity.default_value":
		if e.complexity.ProductMaturity.DefaultValue == nil {
			break
		}

		return e.complexity.ProductMaturity.DefaultValue(childComplexity), true

	case "ProductMaturity.max":
		if e.complexity.ProductMaturity.Max == nil {
			break
		}

		return e.complexity.ProductMaturity.Max(childComplexity), true

	case "ProductMaturity.min":
		if e.complexity.ProductMaturity.Min == nil {
			break
		}

		return e.complexity.ProductMaturity.Min(childComplexity), true

	case "ProductMaturity.unit":
		if e.complexity.ProductMaturity.Unit == nil {
			break
		}

		return e.complexity.ProductMaturity.Unit(childComplexity), true

	case "ProductSetting.accounting_method":
		if e.complexity.ProductSetting.AccountingMethod == nil {
			break
		}

		return e.complexity.ProductSetting.AccountingMethod(childComplexity), true

	case "ProductSetting.accounting_rules":
		if e.complexity.ProductSetting.AccountingRules == nil {
			break
		}

		return e.complexity.ProductSetting.AccountingRules(childComplexity), true

	case "ProductSetting.interest_accounting":
		if e.complexity.ProductSetting.InterestAccounting == nil {
			break
		}

		return e.complexity.ProductSetting.InterestAccounting(childComplexity), true

	case "ProductTemplates.creation_date":
		if e.complexity.ProductTemplates.CreationDate == nil {
			break
		}

		return e.complexity.ProductTemplates.CreationDate(childComplexity), true

	case "ProductTemplates.encoded_key":
		if e.complexity.ProductTemplates.EncodedKey == nil {
			break
		}

		return e.complexity.ProductTemplates.EncodedKey(childComplexity), true

	case "ProductTemplates.last_modified_date":
		if e.complexity.ProductTemplates.LastModifiedDate == nil {
			break
		}

		return e.complexity.ProductTemplates.LastModifiedDate(childComplexity), true

	case "ProductTemplates.name":
		if e.complexity.ProductTemplates.Name == nil {
			break
		}

		return e.complexity.ProductTemplates.Name(childComplexity), true

	case "ProductTemplates.type":
		if e.complexity.ProductTemplates.Type == nil {
			break
		}

		return e.complexity.ProductTemplates.Type(childComplexity), true

	case "Proof.data":
		if e.complexity.Proof.Data == nil {
			break
		}

		return e.complexity.Proof.Data(childComplexity), true

	case "Proof.id":
		if e.complexity.Proof.ID == nil {
			break
		}

		return e.complexity.Proof.ID(childComplexity), true

	case "Proof.organisation":
		if e.complexity.Proof.Organisation == nil {
			break
		}

		return e.complexity.Proof.Organisation(childComplexity), true

	case "Proof.review":
		if e.complexity.Proof.Review == nil {
			break
		}

		return e.complexity.Proof.Review(childComplexity), true

	case "Proof.status":
		if e.complexity.Proof.Status == nil {
			break
		}

		return e.complexity.Proof.Status(childComplexity), true

	case "Proof.ts":
		if e.complexity.Proof.Ts == nil {
			break
		}

		return e.complexity.Proof.Ts(childComplexity), true

	case "Proof.type":
		if e.complexity.Proof.Type == nil {
			break
		}

		return e.complexity.Proof.Type(childComplexity), true

	case "ProofConnection.edges":
		if e.complexity.ProofConnection.Edges == nil {
			break
		}

		return e.complexity.ProofConnection.Edges(childComplexity), true

	case "ProofConnection.nodes":
		if e.complexity.ProofConnection.Nodes == nil {
			break
		}

		return e.complexity.ProofConnection.Nodes(childComplexity), true

	case "ProofConnection.pageInfo":
		if e.complexity.ProofConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProofConnection.PageInfo(childComplexity), true

	case "ProofConnection.totalCount":
		if e.complexity.ProofConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProofConnection.TotalCount(childComplexity), true

	case "ProofEdge.cursor":
		if e.complexity.ProofEdge.Cursor == nil {
			break
		}

		return e.complexity.ProofEdge.Cursor(childComplexity), true

	case "ProofEdge.node":
		if e.complexity.ProofEdge.Node == nil {
			break
		}

		return e.complexity.ProofEdge.Node(childComplexity), true

	case "Query.acceptance":
		if e.complexity.Query.Acceptance == nil {
			break
		}

		args, err := ec.field_Query_acceptance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Acceptance(childComplexity, args["id"].(string)), true

	case "Query.acceptances":
		if e.complexity.Query.Acceptances == nil {
			break
		}

		args, err := ec.field_Query_acceptances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Acceptances(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		args, err := ec.field_Query_account_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Account(childComplexity, args["id"].(string)), true

	case "Query.accounts":
		if e.complexity.Query.Accounts == nil {
			break
		}

		args, err := ec.field_Query_accounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Accounts(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.activities":
		if e.complexity.Query.Activities == nil {
			break
		}

		args, err := ec.field_Query_activities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activities(childComplexity, args["supported"].(*bool)), true

	case "Query.activity":
		if e.complexity.Query.Activity == nil {
			break
		}

		args, err := ec.field_Query_activity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activity(childComplexity, args["id"].(string)), true

	case "Query.address":
		if e.complexity.Query.Address == nil {
			break
		}

		args, err := ec.field_Query_address_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Address(childComplexity, args["id"].(string)), true

	case "Query.addressLookup":
		if e.complexity.Query.AddressLookup == nil {
			break
		}

		args, err := ec.field_Query_addressLookup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AddressLookup(childComplexity, args["text"].(*string), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.addresses":
		if e.complexity.Query.Addresses == nil {
			break
		}

		return e.complexity.Query.Addresses(childComplexity), true

	case "Query.auths":
		if e.complexity.Query.Auths == nil {
			break
		}

		return e.complexity.Query.Auths(childComplexity), true

	case "Query.cdd":
		if e.complexity.Query.Cdd == nil {
			break
		}

		args, err := ec.field_Query_cdd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cdd(childComplexity, args["id"].(string)), true

	case "Query.cdds":
		if e.complexity.Query.Cdds == nil {
			break
		}

		args, err := ec.field_Query_cdds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cdds(childComplexity, args["keywords"].(*string), args["status"].([]types.State), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.check":
		if e.complexity.Query.Check == nil {
			break
		}

		args, err := ec.field_Query_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Check(childComplexity, args["id"].(string)), true

	case "Query.checkEmail":
		if e.complexity.Query.CheckEmail == nil {
			break
		}

		args, err := ec.field_Query_checkEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckEmail(childComplexity, args["email"].(string)), true

	case "Query.checks":
		if e.complexity.Query.Checks == nil {
			break
		}

		args, err := ec.field_Query_checks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Checks(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.comment":
		if e.complexity.Query.Comment == nil {
			break
		}

		args, err := ec.field_Query_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comment(childComplexity, args["id"].(string)), true

	case "Query.comments":
		if e.complexity.Query.Comments == nil {
			break
		}

		args, err := ec.field_Query_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comments(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		args, err := ec.field_Query_countries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Countries(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.country":
		if e.complexity.Query.Country == nil {
			break
		}

		args, err := ec.field_Query_country_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Country(childComplexity, args["code"].(string)), true

	case "Query.currencies":
		if e.complexity.Query.Currencies == nil {
			break
		}

		args, err := ec.field_Query_currencies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Currencies(childComplexity, args["supported"].(*bool), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.currency":
		if e.complexity.Query.Currency == nil {
			break
		}

		args, err := ec.field_Query_currency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Currency(childComplexity, args["code"].(string)), true

	case "Query.device":
		if e.complexity.Query.Device == nil {
			break
		}

		args, err := ec.field_Query_device_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Device(childComplexity, args["identifier"].(string)), true

	case "Query.devices":
		if e.complexity.Query.Devices == nil {
			break
		}

		args, err := ec.field_Query_devices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Devices(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.fx":
		if e.complexity.Query.Fx == nil {
			break
		}

		args, err := ec.field_Query_fx_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fx(childComplexity, args["currency"].(string), args["base_currency"].(string)), true

	case "Query.getOnfidoSDKToken":
		if e.complexity.Query.GetOnfidoSDKToken == nil {
			break
		}

		return e.complexity.Query.GetOnfidoSDKToken(childComplexity), true

	case "Query.identities":
		if e.complexity.Query.Identities == nil {
			break
		}

		return e.complexity.Query.Identities(childComplexity), true

	case "Query.identity":
		if e.complexity.Query.Identity == nil {
			break
		}

		args, err := ec.field_Query_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Identity(childComplexity, args["id"].(string)), true

	case "Query.industries":
		if e.complexity.Query.Industries == nil {
			break
		}

		args, err := ec.field_Query_industries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Industries(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.industry":
		if e.complexity.Query.Industry == nil {
			break
		}

		args, err := ec.field_Query_industry_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Industry(childComplexity, args["code"].(string)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.meStaff":
		if e.complexity.Query.MeStaff == nil {
			break
		}

		return e.complexity.Query.MeStaff(childComplexity), true

	case "Query.message":
		if e.complexity.Query.Message == nil {
			break
		}

		args, err := ec.field_Query_message_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Message(childComplexity, args["id"].(string)), true

	case "Query.messages":
		if e.complexity.Query.Messages == nil {
			break
		}

		args, err := ec.field_Query_messages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Messages(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.organisation":
		if e.complexity.Query.Organisation == nil {
			break
		}

		args, err := ec.field_Query_organisation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organisation(childComplexity, args["id"].(string)), true

	case "Query.organisations":
		if e.complexity.Query.Organisations == nil {
			break
		}

		args, err := ec.field_Query_organisations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organisations(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.payee":
		if e.complexity.Query.Payee == nil {
			break
		}

		args, err := ec.field_Query_payee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payee(childComplexity, args["id"].(string)), true

	case "Query.payees":
		if e.complexity.Query.Payees == nil {
			break
		}

		args, err := ec.field_Query_payees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payees(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.payment":
		if e.complexity.Query.Payment == nil {
			break
		}

		args, err := ec.field_Query_payment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payment(childComplexity, args["id"].(string)), true

	case "Query.payments":
		if e.complexity.Query.Payments == nil {
			break
		}

		args, err := ec.field_Query_payments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payments(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["filter"].(*types.PaymentFilter)), true

	case "Query.people":
		if e.complexity.Query.People == nil {
			break
		}

		args, err := ec.field_Query_people_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.People(childComplexity, args["keywords"].(*string), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["onboarded"].(*bool)), true

	case "Query.person":
		if e.complexity.Query.Person == nil {
			break
		}

		args, err := ec.field_Query_person_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Person(childComplexity, args["id"].(string)), true

	case "Query.price":
		if e.complexity.Query.Price == nil {
			break
		}

		args, err := ec.field_Query_price_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Price(childComplexity, args["pair"].(*string), args["ts"].(*int64)), true

	case "Query.prices":
		if e.complexity.Query.Prices == nil {
			break
		}

		args, err := ec.field_Query_prices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Prices(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(string)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.proof":
		if e.complexity.Query.Proof == nil {
			break
		}

		args, err := ec.field_Query_proof_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Proof(childComplexity, args["id"].(string)), true

	case "Query.proofs":
		if e.complexity.Query.Proofs == nil {
			break
		}

		args, err := ec.field_Query_proofs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Proofs(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.quote":
		if e.complexity.Query.Quote == nil {
			break
		}

		args, err := ec.field_Query_quote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Quote(childComplexity, args["id"].(string)), true

	case "Query.quotes":
		if e.complexity.Query.Quotes == nil {
			break
		}

		args, err := ec.field_Query_quotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Quotes(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.report":
		if e.complexity.Query.Report == nil {
			break
		}

		args, err := ec.field_Query_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Report(childComplexity, args["id"].(string)), true

	case "Query.reports":
		if e.complexity.Query.Reports == nil {
			break
		}

		args, err := ec.field_Query_reports_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reports(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.screen":
		if e.complexity.Query.Screen == nil {
			break
		}

		args, err := ec.field_Query_screen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Screen(childComplexity, args["id"].(string)), true

	case "Query.screens":
		if e.complexity.Query.Screens == nil {
			break
		}

		args, err := ec.field_Query_screens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Screens(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.tag":
		if e.complexity.Query.Tag == nil {
			break
		}

		args, err := ec.field_Query_tag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tag(childComplexity, args["id"].(string)), true

	case "Query.tags":
		if e.complexity.Query.Tags == nil {
			break
		}

		args, err := ec.field_Query_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tags(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.transaction":
		if e.complexity.Query.Transaction == nil {
			break
		}

		args, err := ec.field_Query_transaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Transaction(childComplexity, args["id"].(string)), true

	case "Query.transactions":
		if e.complexity.Query.Transactions == nil {
			break
		}

		args, err := ec.field_Query_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Transactions(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["account"].(string), args["payments"].([]string)), true

	case "Query.transferFees":
		if e.complexity.Query.TransferFees == nil {
			break
		}

		args, err := ec.field_Query_transferFees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TransferFees(childComplexity, args["currency"].(string), args["base_currency"].(string)), true

	case "Query.validation":
		if e.complexity.Query.Validation == nil {
			break
		}

		args, err := ec.field_Query_validation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Validation(childComplexity, args["id"].(string)), true

	case "Query.validations":
		if e.complexity.Query.Validations == nil {
			break
		}

		args, err := ec.field_Query_validations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Validations(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Query.verification":
		if e.complexity.Query.Verification == nil {
			break
		}

		args, err := ec.field_Query_verification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Verification(childComplexity, args["code"].(string)), true

	case "Query.verifications":
		if e.complexity.Query.Verifications == nil {
			break
		}

		args, err := ec.field_Query_verifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Verifications(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Quote.expires":
		if e.complexity.Quote.Expires == nil {
			break
		}

		return e.complexity.Quote.Expires(childComplexity), true

	case "Quote.fee":
		if e.complexity.Quote.Fee == nil {
			break
		}

		return e.complexity.Quote.Fee(childComplexity), true

	case "Quote.fx":
		if e.complexity.Quote.Fx == nil {
			break
		}

		return e.complexity.Quote.Fx(childComplexity), true

	case "Quote.has_expiry":
		if e.complexity.Quote.HasExpiry == nil {
			break
		}

		return e.complexity.Quote.HasExpiry(childComplexity), true

	case "Quote.id":
		if e.complexity.Quote.ID == nil {
			break
		}

		return e.complexity.Quote.ID(childComplexity), true

	case "Quote.ts":
		if e.complexity.Quote.Ts == nil {
			break
		}

		return e.complexity.Quote.Ts(childComplexity), true

	case "QuoteConnection.edges":
		if e.complexity.QuoteConnection.Edges == nil {
			break
		}

		return e.complexity.QuoteConnection.Edges(childComplexity), true

	case "QuoteConnection.nodes":
		if e.complexity.QuoteConnection.Nodes == nil {
			break
		}

		return e.complexity.QuoteConnection.Nodes(childComplexity), true

	case "QuoteConnection.pageInfo":
		if e.complexity.QuoteConnection.PageInfo == nil {
			break
		}

		return e.complexity.QuoteConnection.PageInfo(childComplexity), true

	case "QuoteConnection.totalCount":
		if e.complexity.QuoteConnection.TotalCount == nil {
			break
		}

		return e.complexity.QuoteConnection.TotalCount(childComplexity), true

	case "QuoteEdge.cursor":
		if e.complexity.QuoteEdge.Cursor == nil {
			break
		}

		return e.complexity.QuoteEdge.Cursor(childComplexity), true

	case "QuoteEdge.node":
		if e.complexity.QuoteEdge.Node == nil {
			break
		}

		return e.complexity.QuoteEdge.Node(childComplexity), true

	case "RateSetting.accrue_after_maturity":
		if e.complexity.RateSetting.AccrueAfterMaturity == nil {
			break
		}

		return e.complexity.RateSetting.AccrueAfterMaturity(childComplexity), true

	case "RateSetting.charge_frequency":
		if e.complexity.RateSetting.ChargeFrequency == nil {
			break
		}

		return e.complexity.RateSetting.ChargeFrequency(childComplexity), true

	case "RateSetting.charge_frequency_count":
		if e.complexity.RateSetting.ChargeFrequencyCount == nil {
			break
		}

		return e.complexity.RateSetting.ChargeFrequencyCount(childComplexity), true

	case "RateSetting.index_source_key":
		if e.complexity.RateSetting.IndexSourceKey == nil {
			break
		}

		return e.complexity.RateSetting.IndexSourceKey(childComplexity), true

	case "RateSetting.interest_rate":
		if e.complexity.RateSetting.InterestRate == nil {
			break
		}

		return e.complexity.RateSetting.InterestRate(childComplexity), true

	case "RateSetting.rate_source":
		if e.complexity.RateSetting.RateSource == nil {
			break
		}

		return e.complexity.RateSetting.RateSource(childComplexity), true

	case "RateSetting.rate_terms":
		if e.complexity.RateSetting.RateTerms == nil {
			break
		}

		return e.complexity.RateSetting.RateTerms(childComplexity), true

	case "RateSetting.rate_tiers":
		if e.complexity.RateSetting.RateTiers == nil {
			break
		}

		return e.complexity.RateSetting.RateTiers(childComplexity), true

	case "RateTiers.encoded_key":
		if e.complexity.RateTiers.EncodedKey == nil {
			break
		}

		return e.complexity.RateTiers.EncodedKey(childComplexity), true

	case "RateTiers.ending_balance":
		if e.complexity.RateTiers.EndingBalance == nil {
			break
		}

		return e.complexity.RateTiers.EndingBalance(childComplexity), true

	case "RateTiers.ending_day":
		if e.complexity.RateTiers.EndingDay == nil {
			break
		}

		return e.complexity.RateTiers.EndingDay(childComplexity), true

	case "RateTiers.interest_rate":
		if e.complexity.RateTiers.InterestRate == nil {
			break
		}

		return e.complexity.RateTiers.InterestRate(childComplexity), true

	case "Report.data":
		if e.complexity.Report.Data == nil {
			break
		}

		return e.complexity.Report.Data(childComplexity), true

	case "Report.id":
		if e.complexity.Report.ID == nil {
			break
		}

		return e.complexity.Report.ID(childComplexity), true

	case "Report.organisation":
		if e.complexity.Report.Organisation == nil {
			break
		}

		return e.complexity.Report.Organisation(childComplexity), true

	case "Report.review":
		if e.complexity.Report.Review == nil {
			break
		}

		return e.complexity.Report.Review(childComplexity), true

	case "Report.status":
		if e.complexity.Report.Status == nil {
			break
		}

		return e.complexity.Report.Status(childComplexity), true

	case "Report.ts":
		if e.complexity.Report.Ts == nil {
			break
		}

		return e.complexity.Report.Ts(childComplexity), true

	case "ReportConnection.edges":
		if e.complexity.ReportConnection.Edges == nil {
			break
		}

		return e.complexity.ReportConnection.Edges(childComplexity), true

	case "ReportConnection.nodes":
		if e.complexity.ReportConnection.Nodes == nil {
			break
		}

		return e.complexity.ReportConnection.Nodes(childComplexity), true

	case "ReportConnection.pageInfo":
		if e.complexity.ReportConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReportConnection.PageInfo(childComplexity), true

	case "ReportConnection.totalCount":
		if e.complexity.ReportConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReportConnection.TotalCount(childComplexity), true

	case "ReportEdge.cursor":
		if e.complexity.ReportEdge.Cursor == nil {
			break
		}

		return e.complexity.ReportEdge.Cursor(childComplexity), true

	case "ReportEdge.node":
		if e.complexity.ReportEdge.Node == nil {
			break
		}

		return e.complexity.ReportEdge.Node(childComplexity), true

	case "ReportReviewStatus.message":
		if e.complexity.ReportReviewStatus.Message == nil {
			break
		}

		return e.complexity.ReportReviewStatus.Message(childComplexity), true

	case "ReportReviewStatus.resubmit":
		if e.complexity.ReportReviewStatus.Resubmit == nil {
			break
		}

		return e.complexity.ReportReviewStatus.Resubmit(childComplexity), true

	case "Response.code":
		if e.complexity.Response.Code == nil {
			break
		}

		return e.complexity.Response.Code(childComplexity), true

	case "Response.message":
		if e.complexity.Response.Message == nil {
			break
		}

		return e.complexity.Response.Message(childComplexity), true

	case "Response.success":
		if e.complexity.Response.Success == nil {
			break
		}

		return e.complexity.Response.Success(childComplexity), true

	case "Response.token":
		if e.complexity.Response.Token == nil {
			break
		}

		return e.complexity.Response.Token(childComplexity), true

	case "Screen.data":
		if e.complexity.Screen.Data == nil {
			break
		}

		return e.complexity.Screen.Data(childComplexity), true

	case "Screen.id":
		if e.complexity.Screen.ID == nil {
			break
		}

		return e.complexity.Screen.ID(childComplexity), true

	case "Screen.organisation":
		if e.complexity.Screen.Organisation == nil {
			break
		}

		return e.complexity.Screen.Organisation(childComplexity), true

	case "Screen.status":
		if e.complexity.Screen.Status == nil {
			break
		}

		return e.complexity.Screen.Status(childComplexity), true

	case "Screen.ts":
		if e.complexity.Screen.Ts == nil {
			break
		}

		return e.complexity.Screen.Ts(childComplexity), true

	case "ScreenConnection.edges":
		if e.complexity.ScreenConnection.Edges == nil {
			break
		}

		return e.complexity.ScreenConnection.Edges(childComplexity), true

	case "ScreenConnection.nodes":
		if e.complexity.ScreenConnection.Nodes == nil {
			break
		}

		return e.complexity.ScreenConnection.Nodes(childComplexity), true

	case "ScreenConnection.pageInfo":
		if e.complexity.ScreenConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScreenConnection.PageInfo(childComplexity), true

	case "ScreenConnection.totalCount":
		if e.complexity.ScreenConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScreenConnection.TotalCount(childComplexity), true

	case "ScreenEdge.cursor":
		if e.complexity.ScreenEdge.Cursor == nil {
			break
		}

		return e.complexity.ScreenEdge.Cursor(childComplexity), true

	case "ScreenEdge.node":
		if e.complexity.ScreenEdge.Node == nil {
			break
		}

		return e.complexity.ScreenEdge.Node(childComplexity), true

	case "Social.crunchbase":
		if e.complexity.Social.Crunchbase == nil {
			break
		}

		return e.complexity.Social.Crunchbase(childComplexity), true

	case "Social.facebook":
		if e.complexity.Social.Facebook == nil {
			break
		}

		return e.complexity.Social.Facebook(childComplexity), true

	case "Social.github":
		if e.complexity.Social.Github == nil {
			break
		}

		return e.complexity.Social.Github(childComplexity), true

	case "Social.instagram":
		if e.complexity.Social.Instagram == nil {
			break
		}

		return e.complexity.Social.Instagram(childComplexity), true

	case "Social.linkedin":
		if e.complexity.Social.Linkedin == nil {
			break
		}

		return e.complexity.Social.Linkedin(childComplexity), true

	case "Social.medium":
		if e.complexity.Social.Medium == nil {
			break
		}

		return e.complexity.Social.Medium(childComplexity), true

	case "Social.pinterest":
		if e.complexity.Social.Pinterest == nil {
			break
		}

		return e.complexity.Social.Pinterest(childComplexity), true

	case "Social.twitter":
		if e.complexity.Social.Twitter == nil {
			break
		}

		return e.complexity.Social.Twitter(childComplexity), true

	case "Social.youtube":
		if e.complexity.Social.Youtube == nil {
			break
		}

		return e.complexity.Social.Youtube(childComplexity), true

	case "Staff.emails":
		if e.complexity.Staff.Emails == nil {
			break
		}

		return e.complexity.Staff.Emails(childComplexity), true

	case "Staff.first_name":
		if e.complexity.Staff.FirstName == nil {
			break
		}

		return e.complexity.Staff.FirstName(childComplexity), true

	case "Staff.id":
		if e.complexity.Staff.ID == nil {
			break
		}

		return e.complexity.Staff.ID(childComplexity), true

	case "Staff.identities":
		if e.complexity.Staff.Identities == nil {
			break
		}

		return e.complexity.Staff.Identities(childComplexity), true

	case "Staff.last_name":
		if e.complexity.Staff.LastName == nil {
			break
		}

		return e.complexity.Staff.LastName(childComplexity), true

	case "Staff.phones":
		if e.complexity.Staff.Phones == nil {
			break
		}

		return e.complexity.Staff.Phones(childComplexity), true

	case "Staff.status":
		if e.complexity.Staff.Status == nil {
			break
		}

		return e.complexity.Staff.Status(childComplexity), true

	case "Staff.ts":
		if e.complexity.Staff.Ts == nil {
			break
		}

		return e.complexity.Staff.Ts(childComplexity), true

	case "Subscription.accounts":
		if e.complexity.Subscription.Accounts == nil {
			break
		}

		args, err := ec.field_Subscription_accounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.Accounts(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["token"].(string)), true

	case "Subscription.cdd":
		if e.complexity.Subscription.Cdd == nil {
			break
		}

		args, err := ec.field_Subscription_cdd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.Cdd(childComplexity, args["id"].(string)), true

	case "Subscription.cdds":
		if e.complexity.Subscription.Cdds == nil {
			break
		}

		args, err := ec.field_Subscription_cdds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.Cdds(childComplexity, args["keywords"].(*string), args["status"].([]types.State), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.ts":
		if e.complexity.Tag.Ts == nil {
			break
		}

		return e.complexity.Tag.Ts(childComplexity), true

	case "TagConnection.edges":
		if e.complexity.TagConnection.Edges == nil {
			break
		}

		return e.complexity.TagConnection.Edges(childComplexity), true

	case "TagConnection.nodes":
		if e.complexity.TagConnection.Nodes == nil {
			break
		}

		return e.complexity.TagConnection.Nodes(childComplexity), true

	case "TagConnection.pageInfo":
		if e.complexity.TagConnection.PageInfo == nil {
			break
		}

		return e.complexity.TagConnection.PageInfo(childComplexity), true

	case "TagConnection.totalCount":
		if e.complexity.TagConnection.TotalCount == nil {
			break
		}

		return e.complexity.TagConnection.TotalCount(childComplexity), true

	case "TagEdge.cursor":
		if e.complexity.TagEdge.Cursor == nil {
			break
		}

		return e.complexity.TagEdge.Cursor(childComplexity), true

	case "TagEdge.node":
		if e.complexity.TagEdge.Node == nil {
			break
		}

		return e.complexity.TagEdge.Node(childComplexity), true

	case "Task.approved":
		if e.complexity.Task.Approved == nil {
			break
		}

		return e.complexity.Task.Approved(childComplexity), true

	case "Task.approver":
		if e.complexity.Task.Approver == nil {
			break
		}

		return e.complexity.Task.Approver(childComplexity), true

	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true

	case "Task.comments":
		if e.complexity.Task.Comments == nil {
			break
		}

		args, err := ec.field_Task_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Comments(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.notes":
		if e.complexity.Task.Notes == nil {
			break
		}

		return e.complexity.Task.Notes(childComplexity), true

	case "Task.reporter":
		if e.complexity.Task.Reporter == nil {
			break
		}

		return e.complexity.Task.Reporter(childComplexity), true

	case "Task.stage":
		if e.complexity.Task.Stage == nil {
			break
		}

		return e.complexity.Task.Stage(childComplexity), true

	case "Task.tags":
		if e.complexity.Task.Tags == nil {
			break
		}

		args, err := ec.field_Task_tags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Task.Tags(childComplexity, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string)), true

	case "Task.ts":
		if e.complexity.Task.Ts == nil {
			break
		}

		return e.complexity.Task.Ts(childComplexity), true

	case "Task.version":
		if e.complexity.Task.Version == nil {
			break
		}

		return e.complexity.Task.Version(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.nodes":
		if e.complexity.TaskConnection.Nodes == nil {
			break
		}

		return e.complexity.TaskConnection.Nodes(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskConnection.totalCount":
		if e.complexity.TaskConnection.TotalCount == nil {
			break
		}

		return e.complexity.TaskConnection.TotalCount(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "Transaction.account":
		if e.complexity.Transaction.Account == nil {
			break
		}

		return e.complexity.Transaction.Account(childComplexity), true

	case "Transaction.id":
		if e.complexity.Transaction.ID == nil {
			break
		}

		return e.complexity.Transaction.ID(childComplexity), true

	case "Transaction.transaction_data":
		if e.complexity.Transaction.TransactionData == nil {
			break
		}

		return e.complexity.Transaction.TransactionData(childComplexity), true

	case "Transaction.ts":
		if e.complexity.Transaction.Ts == nil {
			break
		}

		return e.complexity.Transaction.Ts(childComplexity), true

	case "TransactionConnection.edges":
		if e.complexity.TransactionConnection.Edges == nil {
			break
		}

		return e.complexity.TransactionConnection.Edges(childComplexity), true

	case "TransactionConnection.nodes":
		if e.complexity.TransactionConnection.Nodes == nil {
			break
		}

		return e.complexity.TransactionConnection.Nodes(childComplexity), true

	case "TransactionConnection.pageInfo":
		if e.complexity.TransactionConnection.PageInfo == nil {
			break
		}

		return e.complexity.TransactionConnection.PageInfo(childComplexity), true

	case "TransactionConnection.totalCount":
		if e.complexity.TransactionConnection.TotalCount == nil {
			break
		}

		return e.complexity.TransactionConnection.TotalCount(childComplexity), true

	case "TransactionData.account_balances":
		if e.complexity.TransactionData.AccountBalances == nil {
			break
		}

		return e.complexity.TransactionData.AccountBalances(childComplexity), true

	case "TransactionData.affected_amounts":
		if e.complexity.TransactionData.AffectedAmounts == nil {
			break
		}

		return e.complexity.TransactionData.AffectedAmounts(childComplexity), true

	case "TransactionData.amount":
		if e.complexity.TransactionData.Amount == nil {
			break
		}

		return e.complexity.TransactionData.Amount(childComplexity), true

	case "TransactionData.booking_date":
		if e.complexity.TransactionData.BookingDate == nil {
			break
		}

		return e.complexity.TransactionData.BookingDate(childComplexity), true

	case "TransactionData.creation_date":
		if e.complexity.TransactionData.CreationDate == nil {
			break
		}

		return e.complexity.TransactionData.CreationDate(childComplexity), true

	case "TransactionData.currency_code":
		if e.complexity.TransactionData.CurrencyCode == nil {
			break
		}

		return e.complexity.TransactionData.CurrencyCode(childComplexity), true

	case "TransactionData.encoded_key":
		if e.complexity.TransactionData.EncodedKey == nil {
			break
		}

		return e.complexity.TransactionData.EncodedKey(childComplexity), true

	case "TransactionData.external_id":
		if e.complexity.TransactionData.ExternalID == nil {
			break
		}

		return e.complexity.TransactionData.ExternalID(childComplexity), true

	case "TransactionData.fees":
		if e.complexity.TransactionData.Fees == nil {
			break
		}

		return e.complexity.TransactionData.Fees(childComplexity), true

	case "TransactionData.id":
		if e.complexity.TransactionData.ID == nil {
			break
		}

		return e.complexity.TransactionData.ID(childComplexity), true

	case "TransactionData.notes":
		if e.complexity.TransactionData.Notes == nil {
			break
		}

		return e.complexity.TransactionData.Notes(childComplexity), true

	case "TransactionData.parent_account_key":
		if e.complexity.TransactionData.ParentAccountKey == nil {
			break
		}

		return e.complexity.TransactionData.ParentAccountKey(childComplexity), true

	case "TransactionData.payment_order_id":
		if e.complexity.TransactionData.PaymentOrderID == nil {
			break
		}

		return e.complexity.TransactionData.PaymentOrderID(childComplexity), true

	case "TransactionData.transfer_details":
		if e.complexity.TransactionData.TransferDetails == nil {
			break
		}

		return e.complexity.TransactionData.TransferDetails(childComplexity), true

	case "TransactionData.type":
		if e.complexity.TransactionData.Type == nil {
			break
		}

		return e.complexity.TransactionData.Type(childComplexity), true

	case "TransactionData.user_key":
		if e.complexity.TransactionData.UserKey == nil {
			break
		}

		return e.complexity.TransactionData.UserKey(childComplexity), true

	case "TransactionData.value_date":
		if e.complexity.TransactionData.ValueDate == nil {
			break
		}

		return e.complexity.TransactionData.ValueDate(childComplexity), true

	case "TransactionEdge.cursor":
		if e.complexity.TransactionEdge.Cursor == nil {
			break
		}

		return e.complexity.TransactionEdge.Cursor(childComplexity), true

	case "TransactionEdge.node":
		if e.complexity.TransactionEdge.Node == nil {
			break
		}

		return e.complexity.TransactionEdge.Node(childComplexity), true

	case "TransactionFee.Amount":
		if e.complexity.TransactionFee.Amount == nil {
			break
		}

		return e.complexity.TransactionFee.Amount(childComplexity), true

	case "TransactionFee.Name":
		if e.complexity.TransactionFee.Name == nil {
			break
		}

		return e.complexity.TransactionFee.Name(childComplexity), true

	case "TransactionFee.PredefinedFeeKey":
		if e.complexity.TransactionFee.PredefinedFeeKey == nil {
			break
		}

		return e.complexity.TransactionFee.PredefinedFeeKey(childComplexity), true

	case "TransactionFee.TaxAmount":
		if e.complexity.TransactionFee.TaxAmount == nil {
			break
		}

		return e.complexity.TransactionFee.TaxAmount(childComplexity), true

	case "TransactionFee.Trigger":
		if e.complexity.TransactionFee.Trigger == nil {
			break
		}

		return e.complexity.TransactionFee.Trigger(childComplexity), true

	case "TransferDetails.linked_loan_transaction_key":
		if e.complexity.TransferDetails.LinkedLoanTransactionKey == nil {
			break
		}

		return e.complexity.TransferDetails.LinkedLoanTransactionKey(childComplexity), true

	case "TransferFees.base_currency":
		if e.complexity.TransferFees.BaseCurrency == nil {
			break
		}

		return e.complexity.TransferFees.BaseCurrency(childComplexity), true

	case "TransferFees.currency":
		if e.complexity.TransferFees.Currency == nil {
			break
		}

		return e.complexity.TransferFees.Currency(childComplexity), true

	case "TransferFees.fees":
		if e.complexity.TransferFees.Fees == nil {
			break
		}

		return e.complexity.TransferFees.Fees(childComplexity), true

	case "TransferFees.ts":
		if e.complexity.TransferFees.Ts == nil {
			break
		}

		return e.complexity.TransferFees.Ts(childComplexity), true

	case "Validation.actions":
		if e.complexity.Validation.Actions == nil {
			break
		}

		return e.complexity.Validation.Actions(childComplexity), true

	case "Validation.applicant":
		if e.complexity.Validation.Applicant == nil {
			break
		}

		return e.complexity.Validation.Applicant(childComplexity), true

	case "Validation.approved":
		if e.complexity.Validation.Approved == nil {
			break
		}

		return e.complexity.Validation.Approved(childComplexity), true

	case "Validation.data":
		if e.complexity.Validation.Data == nil {
			break
		}

		return e.complexity.Validation.Data(childComplexity), true

	case "Validation.id":
		if e.complexity.Validation.ID == nil {
			break
		}

		return e.complexity.Validation.ID(childComplexity), true

	case "Validation.organisation":
		if e.complexity.Validation.Organisation == nil {
			break
		}

		return e.complexity.Validation.Organisation(childComplexity), true

	case "Validation.status":
		if e.complexity.Validation.Status == nil {
			break
		}

		return e.complexity.Validation.Status(childComplexity), true

	case "Validation.ts":
		if e.complexity.Validation.Ts == nil {
			break
		}

		return e.complexity.Validation.Ts(childComplexity), true

	case "Validation.validation_type":
		if e.complexity.Validation.ValidationType == nil {
			break
		}

		return e.complexity.Validation.ValidationType(childComplexity), true

	case "ValidationConnection.edges":
		if e.complexity.ValidationConnection.Edges == nil {
			break
		}

		return e.complexity.ValidationConnection.Edges(childComplexity), true

	case "ValidationConnection.nodes":
		if e.complexity.ValidationConnection.Nodes == nil {
			break
		}

		return e.complexity.ValidationConnection.Nodes(childComplexity), true

	case "ValidationConnection.pageInfo":
		if e.complexity.ValidationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ValidationConnection.PageInfo(childComplexity), true

	case "ValidationConnection.totalCount":
		if e.complexity.ValidationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ValidationConnection.TotalCount(childComplexity), true

	case "ValidationEdge.cursor":
		if e.complexity.ValidationEdge.Cursor == nil {
			break
		}

		return e.complexity.ValidationEdge.Cursor(childComplexity), true

	case "ValidationEdge.node":
		if e.complexity.ValidationEdge.Node == nil {
			break
		}

		return e.complexity.ValidationEdge.Node(childComplexity), true

	case "VariableFee.applied_rate":
		if e.complexity.VariableFee.AppliedRate == nil {
			break
		}

		return e.complexity.VariableFee.AppliedRate(childComplexity), true

	case "VariableFee.base_rate":
		if e.complexity.VariableFee.BaseRate == nil {
			break
		}

		return e.complexity.VariableFee.BaseRate(childComplexity), true

	case "VariableFee.discount":
		if e.complexity.VariableFee.Discount == nil {
			break
		}

		return e.complexity.VariableFee.Discount(childComplexity), true

	case "VariableFee.partner":
		if e.complexity.VariableFee.Partner == nil {
			break
		}

		return e.complexity.VariableFee.Partner(childComplexity), true

	case "Verification.code":
		if e.complexity.Verification.Code == nil {
			break
		}

		return e.complexity.Verification.Code(childComplexity), true

	case "Verification.id":
		if e.complexity.Verification.ID == nil {
			break
		}

		return e.complexity.Verification.ID(childComplexity), true

	case "Verification.target":
		if e.complexity.Verification.Target == nil {
			break
		}

		return e.complexity.Verification.Target(childComplexity), true

	case "Verification.ts":
		if e.complexity.Verification.Ts == nil {
			break
		}

		return e.complexity.Verification.Ts(childComplexity), true

	case "Verification.type":
		if e.complexity.Verification.Type == nil {
			break
		}

		return e.complexity.Verification.Type(childComplexity), true

	case "Verification.validated":
		if e.complexity.Verification.Validated == nil {
			break
		}

		return e.complexity.Verification.Validated(childComplexity), true

	case "VerificationConnection.edges":
		if e.complexity.VerificationConnection.Edges == nil {
			break
		}

		return e.complexity.VerificationConnection.Edges(childComplexity), true

	case "VerificationConnection.nodes":
		if e.complexity.VerificationConnection.Nodes == nil {
			break
		}

		return e.complexity.VerificationConnection.Nodes(childComplexity), true

	case "VerificationConnection.pageInfo":
		if e.complexity.VerificationConnection.PageInfo == nil {
			break
		}

		return e.complexity.VerificationConnection.PageInfo(childComplexity), true

	case "VerificationConnection.totalCount":
		if e.complexity.VerificationConnection.TotalCount == nil {
			break
		}

		return e.complexity.VerificationConnection.TotalCount(childComplexity), true

	case "VerificationEdge.cursor":
		if e.complexity.VerificationEdge.Cursor == nil {
			break
		}

		return e.complexity.VerificationEdge.Cursor(childComplexity), true

	case "VerificationEdge.node":
		if e.complexity.VerificationEdge.Node == nil {
			break
		}

		return e.complexity.VerificationEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schemas/mutation.graphql", Input: `type Mutation {
  # captures the customer phone number to start onboarding
  createPhone(phone: String!, device: DeviceInput!): Response!
  # allows customer to confirm their phone number via OTP
  confirmPhone(token: String!, code: String!): Response!
  # Creates person's ROAVA login credentials (email, login)
  signup(token: String!, email: String!, passcode: String!): AuthResponse!
  # Creates person's ROAVA profile - capturing name, dob, address etc
  register(person: PersonInput!, address: AddressInput!): Person
  intendedActivities(activities: [ID!]): Response!
  createApplication: Response!
  # verifications
  verifyEmail(email: String!, code: String!): Response!
  resendOTP(phone: String!): Response!
  resendEmailMagicLInk(email: String!): Response!
  # auth
  login(credentials: AuthInput!): AuthResponse!
  loginWithToken(token: String!, authType: AuthType!): AuthResponse!
  refreshToken(token: String!): AuthResponse!
  updateDeviceToken(token: [DeviceTokenInput]!): Response!
  resetPasscode(token: String!, email: String!, passcode: String!): Response!
  requestPasscodeReset(email: String!, device: DeviceInput!): Response!
  confirmPasscodeResetOtp(email: String!, otp: String!): Response!
  # Submit a KYC and AML check for a given customer who has accepted terms & conditions
  submitApplication: Response!
  """
  Customer accepts an array of documents displayed to them during onboarding
  """
  acceptTerms(documents: [ID]!): Response!
  # update a validation status
  updateValidationStatus(
    validation: ID!
    status: State!
    message: String!
  ): Response!
  submitProof(proof: SubmitProofInput!): Response!
  createTransactionPassword(password: String!): Response!
  # create new deposit account
  createAccount(product: ProductInput!): Response!
  # create a new payee using the transaction password
  createPayee(payee: PayeeInput!, password: String!): Response!
  # update an existing payee using the transaction password
  # do not include the payee accounts for when updating a payee
  updatePayee(payee: ID!, payee_input: PayeeInput, password: String!): Response!
  # add new account to existing payee
  addPayeeAccount(payee: ID!, payee_account: PayeeAccountInput!): Response!
  # delete an account from an existing payee - marks as deleted
  deletePayeeAccount(payee: ID!, payee_account: ID!): Response!
  # ask for a customer to resubmit a report
  resubmit(reports: [ReportInput!]!, message: String): Response!
  # Submit the ids of the reports that has been resubmitted to Onfido
  resubmitReports(reports: [ReportInput!]): Response!
  # create new payment instruction
  createPayment(payment: PaymentInput!, password: String!): Response!
  # validate the customer's BVN
  validateBVN(bvn: String!, phone: String!): Response!
  # create and send a new OTP
  # expireTime in seconds
  requestOTP(type: DeliveryMode!, target: String!, expireTime: Int): Response!
  # verify the sent OTP
  verifyOTP(target: String!, token: String!): Response!
  # Code XXXX represents that the user has a GBP account and more data from the user should be require
  validateEmail(email: String!, device: DeviceInput!): Response!
  # If the user has a GBP account, verify the additional required data from the user
  validateUser(user: ValidateUserInput!): Response!
  # customer can make request to reset their passcode
  requestTransactionPasscodeReset(email: String!): Response!
  # reset user password
  resetTransactionPasscode(
    email: String!
    currentPasscode: String!
    newPasscode: String!
  ): Response!
  # set push notification status
  setDevicePreference(type: DevicePreferenceType!, status: Boolean!): Response!
}
`, BuiltIn: false},
	{Name: "graph/schemas/query.graphql", Input: `type Query {
  # fetch person using JWT claims
  me: Person
  # fetch staff using JWT claims
  meStaff: Staff
    @deprecated(
      reason: "Further updates will replace me with an Union of Person and Status"
    )
  # fetch person by given ID
  person(
    # Unique roava ulid for the data record
    id: ID!
  ): Person
  # fetch a list of people
  people(
    # Keywords used to filter the persons
    keywords: String
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Filter person by it's status. If empty, should ignore the field
    onboarded: Boolean
  ): PersonConnection
  # fetch an identity by ID
  identity(
    # The Ulid field for the identity
    id: ID!
  ): Identity
  # fetch a list of identities
  identities: [Identity]
  # query to check if an email already exists in the database
  checkEmail(
    # Email to be checked
    email: String!
  ): Boolean
  # fetch an address by ID
  address(
    # The Ulid field for the address
    id: ID!
  ): Address
  # fetch a list of addresses
  addresses: AddressConnection
  # fetch an address by text in lookup services
  addressLookup(
    # Text to be used in the address lookup
    text: String
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): AddressConnection
  # fetch a device by its unique identifier
  device(
    # Unique id captured from the device itself e.g. the device_id
    identifier: String!
  ): Device
  # fetch a list of devices
  devices(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): DeviceConnection
  # fetch a list of session authentications
  auths: [Auth]
  # fetch an organisation by ID
  organisation(
    # The Ulid field for the organisation
    id: ID!
  ): Organisation
  # fetch a list of organisations
  organisations(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): OrganisationConnection
  # fetch a verification record by ID
  verification(
    # OTP code or email magic link
    code: String!
  ): Verification
  # fetch a list of verifications and their state
  verifications(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): VerificationConnection
  # fetch a country by it's unique ISO 3 alpha country code
  country(
    # Refers to Alpha-3 (three letter) codes from ISO 3166-1. These codes are synonymous with World Bank Codes.
    code: String!
  ): Country
  # fetch a list of countries
  countries(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CountryConnection
  # fetch a country by it's unique ISO 3 character currency code
  currency(
    # 3 letter ISO code for currency
    code: String!
  ): Currency
  # fetch a list of currencies in the ROAVA system including optional argument for supported currencies only
  currencies(
    # Boolean to define to filter for supported currencies or not
    supported: Boolean
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CurrencyConnection
  # fetch an industry by it's ID
  industry(
    # SIC code for an industry or sector
    code: String!
  ): Industry
  # fetch a list of industry sectors an organisation can belong to
  industries(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): IndustryConnection
  # fetch an activity by it's ID
  activity(
    # The Ulid field for the activity
    id: ID!
  ): Activity
  # fetch a list activites (intended reasons for using ROAVA)
  activities(
    # Boolean to filter by supported activities or not
    supported: Boolean
  ): [Activity!]!
  # fetch a message by it's ID
  message(
    # The Ulid field for the message
    id: ID!
  ): Message
  # fetch a list of messages in the platform
  messages(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): MessageConnection
  # get an FX/cross-border payment quotes by id
  quote(
    # The Ulid field for the quote
    id: ID!
  ): Quote
  # get a list of quotes
  quotes(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): QuoteConnection
  # fetch price for a currency pair at given time
  price(pair: String, ts: Int): Fx
  # fetch list of prices for a currency pair by date descending (newest first)
  prices(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): FxConnection
  # get a particular tag by it's ID
  tag(
    # The Ulid field for the tag
    id: ID!
  ): Task
  # fet a list of tags
  tags(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TagConnection
  # fetch a customer's cdd record by id
  cdd(
    # The Ulid field for the cdd
    id: ID!
  ): CDD
  # fetch multiple customer cdd records by optional keywords
  cdds(
    # Keywords used to filter the cdds
    keywords: String
    # Filter CDDs by it's statuses
    status: [State!]
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CDDConnection
  # fetch a validation by validation ID
  validation(
    # The Ulid field for the check
    id: ID!
  ): Validation
  # fetch multiple KYC records
  validations(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): ValidationConnection
  # fetch a customer's KYC check by ID
  check(
    # The Ulid field for the check
    id: ID!
  ): Check
  # fetch multiple KYC records
  checks(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CheckConnection
  # fetch an AML screening record by ID
  screen(
    # The Ulid field for the screen
    id: ID!
  ): Screen
  # fetch multiple AML screening records
  screens(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): ScreenConnection
  # fetch an onfido document report by ID
  report(
    # The Ulid field for the onfido check report
    id: ID!
  ): Report
  # fetch multiple onfido document reports
  reports(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): ReportConnection
  # fetch an document proof by ID
  proof(
    # The Ulid field for the document proof
    id: ID!
  ): Proof
  # fetch multiple document proofs
  proofs(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): ProofConnection
  # fetch a task representing an onboarding review process workflow
  task(
    # The Ulid field for the task
    id: ID!
  ): Task
  # fetch a list of task of onboarding reviews processes & workflows
  tasks(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TaskConnection
  # fetch a comment by ID
  comment(
    # The Ulid field for the comment
    id: ID!
  ): Comment
  # fetch a list of commments
  comments(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CommentConnection
  # fetch a financial product by ID
  product(
    # The Ulid field for the product
    id: ID!
  ): Product
  # fetch a list of financial products available to ROAVA customers
  products(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): ProductConnection
  # fetch a deposit account product by ID
  account(
    # The Ulid field for the account
    id: ID!
  ): Account
  # fetch a list of deposit account products
  accounts(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): AccountConnection
  # fetch an individual payee by ID
  payee(id: ID!): Payee
  # fetch all payees for a given customer
  payees(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): PayeeConnection
  # fetch an individual payment by ID
  payment(id: ID!): Payment
  # fetch all payments for a given customer
  payments(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Filter payments
    filter: PaymentFilter
  ): PaymentConnection
  # fetch an individual transaction by unique ID
  transaction(
    # The Ulid field for the transaction
    id: ID!
  ): Transaction
  # fetch a list of account transactions
  transactions(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Filter transactions by an account id
    account: ID!
    # Filter transactions by a payment list
    payments: [ID!]
  ): TransactionConnection
  # Get fx value from a currency pair
  fx(currency: String!, base_currency: String!): Fx
  # Get transfer fees from a currency pair
  # Fee value it's expressed on currency attribute
  transferFees(currency: String!, base_currency: String!): TransferFees
  # get an record of an accepted document term by an individual by ID
  # get an record of an accepted document term by an individual by ID
  acceptance(
    # The Ulid field for the acceptance document
    id: ID!
  ): Acceptance
  # get all document acceptances for all customers by ID
  acceptances(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): AcceptanceConnection

  # graphql query root node
  node(
    # The unique id of the node
    id: ID!
  ): Node

  # Get an Onfido SDK token to capture photo, selfie
  getOnfidoSDKToken: Response!
}
`, BuiltIn: false},
	{Name: "graph/schemas/subscriptions.graphql", Input: `type Subscription {
     cdds(
    # Keywords used to filter the cdds
    keywords: String,
    # Filter CDDs by it's statuses
    status: [State!],
    # Returns the first n elements from the list.
    first: Int,
    # Returns the elements in the list that come after the specified cursor.
    after: String,
    # Returns the last n elements from the list.
    last: Int,
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CDDConnection

   cdd(
    # The Ulid field for the cdd
    id: ID!
  ): CDD

    accounts(
        # Returns the first n elements from the list.
        first: Int,
        # Returns the elements in the list that come after the specified cursor.
        after: String,
        # Returns the last n elements from the list.
        last: Int,
        # Returns the elements in the list that come before the specified cursor.
        before: String

        token: String!
    ): AccountConnection
}`, BuiltIn: false},
	{Name: "graph/schemas/types.graphql", Input: `# I N T E R F A C E S

# Interface for relay
interface Node {
  # Unique identifier of a node
  id: ID!
}

# API response interface
interface GraphQLResponse {
  # Response message
  message: String!
  # Boolean to represent if a response is a success
  success: Boolean!
  # Response code
  code: Int
}

# something verified via OTP e.g. email | phone
interface Verifiable {
  name: String
  primary: Boolean
  type: VerifiableType!
}

# authors - can be person or organisation
interface Entity {
  # Unique identifier of the entity
  id: ID!
  # Array of identities of an Entity
  identities: [Identity]
}

# E N U M S

# list of items that can be verified
enum VerifiableType {
  EMAIL
  PHONE
  DEVICE
}

# message delivery modes supported
enum DeliveryMode {
  EMAIL
  SMS
  PUSH
}

# list of person states
enum PersonStatus {
  # signed up with email & passcode
  SIGNEDUP
  # enter personal info
  REGISTERED
  # finished ID & verification captured
  VERIFIED
  # already onboarded
  ONBOARDED
  # onboarding process rejected
  REJECTED
  # person exited
  EXITED
}

# list of customer identity states
enum IdentityStatus {
  ACTIVE
  INACTIVE
  FROZEN
}

# list of content types
enum ContentType {
  ARTICLE
  POST
  COMMENT
  DOCUMENT
  VIDEO
  PHOTO
  TERMS_GENERAL
  TERMS_ACCOUNT
  TERMS_FEE
  PRIVACY
}

# list of data states
enum State {
  ACTIVE
  INACTIVE
  BLOCKED
  EXITED
  # writings, applications
  DRAFT
  PENDING
  COMPLETED
  # workflows
  APPROVED
  REJECTED
  DECLINED
  MANUAL_REVIEW
}

# enum of possible device tokens
enum DeviceTokenType {
  FIREBASE
  BIOMETRIC
}

# onboarding checkpoints - a frontend concern
enum OnboardingCheckPoint {
  SIGNUP # enter personal info
  VERIFICATION # provide ID, Video
  ACTIVITIES # provide reasons for using ROAVA
  TERMS # accept terms
  COMPLETE # submit application
}

# enum to represent the validation type
enum ValidationType {
  CHECK
  SCREEN
  PROOF
}

# enum to show device preference type
enum DevicePreferenceType {
  PUSH
}

# S C A L A R S

# raw JSON value
scalar JSON

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193868/roava+screen#Schema

# represents the Comply Advantage AML result
# scalar ComplyAdvantageReport

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014956259/roava+report#Schema

# represents the Onfido kyc report
# scalar OnfidoReport

# T Y P E S

# GraphQL cursor page info type
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue
  startCursor: String
  # When paginating forwards, the cursor to continue
  endCursor: String
}

# API response result
type Response implements GraphQLResponse {
  # Response message
  message: String!
  # Boolean to represent if a response is a success
  success: Boolean!
  # Response code
  code: Int
  # Response token
  token: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/983105548/roava+person

# Person represents an individual including staff or end customer
type Person implements Entity {
  # Roava person identity generated
  id: ID!
  # Person’s title and designation
  title: String
  # Person’s first name
  first_name: String!
  # Person’s last name
  last_name: String!
  # Optional middle name
  middle_name: String
  # Person’s date of birth
  dob: String!
  # Person’s status in ROAVA - rejected implies ROAVA never onboarded the customer. All other statuses are for onboarded customers
  status: PersonStatus
  # Person’s employer
  employer: Organisation
  # Nigerian Bank verification number
  bvn: String
  # Unix timestamp when the record was created
  ts: Int!
  #	Country of residence - 3 letter ISO code for the country
  country_residence: String
  # Array of country codes
  nationality: [String]!
  # Array of email addresses captured for the customer and their verification status
  emails: [Email]!
  # Array of phone numbers captured for the customer and their verification status
  phones: [Phone]!
  # Array of identities for the customer
  identities: [Identity]!
  # Array of addresses for the customer
  addresses: [Address]!
  # Array of activities (reasons for using Roava) captured for the customer
  activities: [Activity]!
  # Customer due diligence record for the person
  cdd: CDD
  # Sets where in the onboarding process Person is
  onboarding_status: OnboardingCheckPoint
}

# The connection type for Person.
type PersonConnection {
  # A list of edges
  edges: [PersonEdge!]!
  # A list of nodes
  nodes: [Person!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type PersonEdge {
  # A cursor for use in pagination.
  node: Person!
  # The item at the end of the edge.
  cursor: String!
}

# Input type to for an individual
input PersonInput {
  # Person’s first name
  first_name: String!
  # Person’s last name
  last_name: String!
  # Person’s date of birth
  dob: String!
  #	Country of residence - 3 letter ISO code for the country
  country_residence: String!
  # Nigerian Bank verification number
  bvn: String
}

# Input type to for applicant being onboarded
input ApplicantInput {
  # Applicant's ID
  applicant_id: String
  # Applicant's first name
  first_name: String!
  # Applicant's last name
  last_name: String!
  # Applicant's email
  email: String!
  # Applicant's date of birth
  dob: String!
  #	 Applicant's Address Input
  address: AddressInput!
  #	Vendor **
  vendor: String
}

# Email type including verified status
type Email implements Verifiable {
  # Name of the Email - home, work, etc...
  name: String
  # Sets if this is the primary Email
  primary: Boolean
  # Type of Verification
  type: VerifiableType!
  # Value of the email entry supplied by the customer
  value: String!
  # Boolean to capture if the input has been verified via OTP
  verified: Boolean!
  # Alias of the Email
  alias: String
}

# Phone type including verified status
type Phone implements Verifiable {
  # Name of the Phone - home, work, etc...
  name: String
  # Sets if this is the primary Phone
  primary: Boolean
  # Type of Verification
  type: VerifiableType!
  # Value of the phone entry supplied by the customer
  value: String!
  # Boolean to capture if the input has been verified via OTP
  verified: Boolean!
  # Carries of the Phone
  carrier: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/983236644/roava+identity

# Identity is how ROAVA represents a customer relationship and can be for a person or organisation
type Identity {
  # The Ulid field for the identity
  id: ID!
  # Reference to the person or organisation who owns this identity (customer relationship)
  owner: Owner!
  # The nickname of the owner of identity wishes to be addressed as
  nickname: String
  # Context of the identity. Ulid of the organisation that this identity is for e.g. ROAVA, Onfido, Twitter, Nubank
  organisation: Organisation!
  # Status of customer identity e.g. ACTIVE, INACTIVE, FROZEN etc
  status: IdentityStatus
  # Set if account is active
  active: Boolean
  # To indicate if the identity is used for authentication. If true, the identifier can contain a username or email and should be hashed
  authentication: Boolean
  # Array of devices for the identity
  devices: [Device]!
  # Unix timestamp when the record was created
  ts: Int!
  # Object creating the details of credentials stored in the identity
  credentials: Credentials!
}

# Credentials object in a person identity; excludes passwords and pins
type Credentials {
  # HASH value of the identifier for the credential - e.g. a username, a client_id for that service. The value is hashed so we don’t leak sensitive information (like usernames, emails) which could contain PII into logs
  identifier: String!
  # Token to refresh authentication
  refresh_token: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014956383/roava+device

# Device (smartphone or tablet) type
type Device implements Verifiable {
  # Roava unique identifier - Ulid
  id: ID!
  # Device's name
  name: String
  # Defines if Device is primary
  primary: Boolean
  # Type of Verification
  type: VerifiableType!
  # Unique device identifier
  identifier: String!
  # Owner of the Device
  owner: Person!
  # Device's Brand
  brand: String!
  # Device's OS
  os: String!
  # Customer can set their device as in-active with ROAVA e.g. if lost
  active: Boolean
  # Boolean to capture if the device has been verified
  verified: Boolean
  # Array of Device specific tokens
  tokens: [DeviceToken]!
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Device
type DeviceConnection {
  # A list of edges
  edges: [DeviceEdge!]!
  # A list of nodes
  nodes: [Device!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type DeviceEdge {
  # The item at the end of the edge.
  node: Device!
  # A cursor for use in pagination
  cursor: String!
}

# device specific token e.g. firebase
type DeviceToken {
  # Device token enum - BIOMETRIC FIREBASE OTHER
  type: DeviceTokenType
  # Value of the token
  value: String
  # Unix timestamp when the record was created
  ts: Int
}

# the input type for devices
input DeviceInput {
  # Unique device identifier
  identifier: String!
  # Device's Brand
  brand: String!
  # Device's OS
  os: String!
  # Array of Device specific tokens input
  tokens: [DeviceTokenInput]!
}

# device specific tokens e.g. firebase
input DeviceTokenInput {
  # Device token enum - BIOMETRIC FIREBASE OTHER
  type: DeviceTokenType!
  # Value of the token
  value: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1103757335/roava+address

# Type to represent an address including geo location details
type Address {
  # The Ulid field for the address
  id: ID!
  # The person or organisation or thing that has the address
  owner: Entity
  # Nickname of address given by customer e.g. home
  name: String
  # Defines if Address is primary
  primary: Boolean
  # Street location of address
  street: String
  # City of the address
  city: String
  # Address county
  county: String
  # State in which address is located
  state: String
  # Post code, zip code etc
  postcode: String
  # Address Country Object
  country: Country
  # Unix timestamp when the record was created
  ts: Int
  # Geolocation coordinates for the address
  location: Location
}

# The connection type for Address
type AddressConnection {
  # A list of edges
  edges: [AddressEdge!]!
  # A list of nodes
  nodes: [Address!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type AddressEdge {
  # The item at the end of the edge.
  node: Address!
  # A cursor for use in pagination
  cursor: String!
}

# Geolocation (lng, lat) details of an address
type Location {
  # Longitude value of the address
  longitude: Float
  # Latitude value of the address
  latitude: Float
}

# Input type and fields required to create new address
input AddressInput {
  # Street location of address
  street: String
  # City of the address
  city: String
  # Address county
  county: String
  # State in which address is located
  state: String
  # Post code, zip code etc
  postcode: String
  # 3 Char ISO standard for the country
  country: String
  # Optional 2 Char ISO codes for country e.g "GB"
  # Used in the AML screen with vendor
  country_2: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193682/roava+country

# Type to represent a list of comprehensive data about (International Organization for Standardization)ISO-3166 Country Codes in English, (International Telecommunications Union) ITU Dialing Codes, ISO Currency Codes and the other related data with geographic information for different countries around the world. The list consists of 251 countries and islands.
type Country {
  # Represents the Capital city of the specific country from Geonames.
  Capital: String!
  # Refers to the Continent in which specific countries are located from Geonames.
  Continent: String!
  # Refers to the full name of country.
  Country_Name: String!
  # Indicates the Distinguishing Signs (DS) of the place of registration of vehicles in international traffic.
  DS: String!
  # Country code from International Telecommunication Union - Telecommunication Standardization Sector (ITU-T) recommendation E.164, sometimes followed by area code.
  Dial: String!
  # Refers to the Electronic Data Gathering, Analysis, and Retrieval system (EDGAR) that performs automated collection, validation, indexing, acceptance, and forwarding of submissions by companies and others who are required by law to file forms with the U.S. Securities and Exchange Commission (the "SEC").
  EDGAR: String!
  # Refers to the codes assigned by the Fédération Internationale de Football Association (FIFA).
  FIFA: String!
  # Indicates the codes from the U.S. Federal Information Processing Standard Publication (FIPS PUB) 10-4.
  FIPS: String!
  # Specifies the Global Administrative Unit Layers (GAUL) from the Food and Agriculture Organization.
  GAUL: String!
  # Represents the identity of a country's Geographic Name.
  Geo_Name_ID: String!
  # Refers to the codes assigned by the International Olympics Committee (IOC).
  IOC: String!
  # Refers to Alpha-2 (two letter) codes from ISO 3166-1.
  ISO3166_1_Alpha_2: String!
  # Refers to Alpha-3 (three letter) codes from ISO 3166-1. These codes are synonymous with World Bank Codes.
  ISO3166_1_Alpha_3: String!
  # Represents a three-letter alphabetic code for currency. The alphabetic code is based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and where possible the third letter corresponds to the first letter of the currency name. For example: the US dollar is represented as USD - the US coming from the ISO 3166 country code and the D for dollar. The Swiss franc is represented by CHF - the CH being the code for Switzerland in the ISO 3166 code and F for franc.
  ISO4217_Currency_Alphabetic_Code: String!
  # Refers to the name of the country against their ISO 4217 currency alphabetical code.
  ISO4217_Currency_Country_Name: String!
  # Indicates the ISO 4217 currency number of minor units.
  ISO4217_Currency_Minor_Unit: Int!
  # Represents the name of currency as per ISO 4217.
  ISO4217_Currency_Name: String!
  # Refers to the three-digit numeric code is useful when currency codes need to be understood in countries that do not use Latin scripts and for computerised systems. Where possible the 3 digit numeric code is the same as the numeric country code.
  ISO4217_Currency_Numeric_Code: Int!
  # Indicates the codes assigned by the International Telecommunications Union (ITU).
  ITU: String!
  # Indicates the Country status, based on the Central Intelligence Agency (CIA) World Factbook.
  Is_Independent: String!
  # This column lists the languages spoken in a country ordered by the number of speakers. The language code is a 'locale' where any two-letter primary-tag is an ISO-639 language abbreviation and any two-letter initial subtag is an ISO-3166 country code.
  Languages: String!
  # Indicates United Nations Statistics Division M49 numeric codes (nearly synonymous with ISO 3166-1 numeric codes, which are based on UN M49. ISO 3166-1 does not include Channel Islands or Sark). These are also prepared by the United Nations Secretariat primarily for use in its publications and databases.
  M49: Int!
  # Refers to the MAchine-Readable Cataloging (MARC) codes from the Library of Congress. It is a standard for encoding bibliographic materials in electronic form. In general, MARC country codes are two letters. For three countries, MARC provides three-letter subdivision codes. In these cases, the first two letters represent the state or province, and the third letter indicates the country. If the first two letters are xx, the code represents a location in an unspecified subdivision of that country. There are five MARC codes that represent parts of United States Minor Outlying Islands: ji Johnston Atoll, xf Midway Islands, wk Wake Island, uc United States Misc. Caribbean Islands, and up United States Misc. Pacific Islands.
  MARC: String!
  # Indicates the Country's official English name.
  Official_Name_English: String!
  # Indicates the Top Level Domain (TLD) from Geonames.
  TLD: String!
  # Specifies the Country abbreviations by the World Meteorological Organization (WMO) used in weather reports.
  WMO: String!
}

# The connection type for Country
type CountryConnection {
  # A list of edges
  edges: [CountryEdge!]!
  # A list of nodes
  nodes: [Country!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type CountryEdge {
  # The item at the end of the edge.
  node: Country!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193706/roava+currency

# Type to represent currencies
type Currency {
  # Official symbol of currency
  symbol: String!
  # Official name of  currency
  name: String!
  # Native character of symbol e.g. $ , £ etc
  symbol_native: String!
  # Number of decimal digits
  decimal_digits: Int!
  # Number of digits rounding
  rounding: Int!
  # 3 letter ISO code for currency
  code: String!
  # Plural description of the currency name
  name_plural: String!
}

# The connection type for Currency
type CurrencyConnection {
  # A list of edges
  edges: [CurrencyEdge!]!
  # A list of nodes
  nodes: [Currency!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type CurrencyEdge {
  # The item at the end of the edge.
  node: Currency!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1084588117/roava+organisation

# Organisations (companies) in the ROAVA universe
type Organisation implements Entity {
  # The Ulid field for the Organisation
  id: ID!
  # The Organisation name
  name: String
  # Keywords related to the Organisation
  keywords: String
  # Short description about the Organisation
  description: String
  # Organisation's website url
  domain: String
  # Organisation's banner image
  banner: String
  # Organisation's revenue
  revenue: Float
  # Organisation's website url
  language: String
  # Organisation's raised money
  raised: Float
  # Quantity of employees of the Organisation
  employees: String
  # Organisation's email
  email: String
  # Unix timestamp when the record was created
  ts: Int
  # Organisation's Addresses
  addresses: [Address]!
  # Organisation's Location Object
  location: OrgLocation
  # Array of Industry of the Organisation
  industries: [Industry]!
  # Organisation's social links
  social: Social
  # Array of image assets from an Organisation
  image_assets: [ImageAssets]!
  # Array of identities from an Organisation
  identities: [Identity]!
}

# The connection type for Organisation
type OrganisationConnection {
  # A list of edges
  edges: [OrganisationEdge!]!
  # A list of nodes
  nodes: [Organisation!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type OrganisationEdge {
  # The item at the end of the edge.
  node: Organisation!
  # A cursor for use in pagination
  cursor: String!
}

# Type to represent social links
type Social {
  # YouTube url
  youtube: String
  # GitHub url
  github: String
  # Facebook url
  facebook: String
  # Pinterest url
  pinterest: String
  # Instagram url
  instagram: String
  # Linkedin url
  linkedin: String
  # Medium url
  medium: String
  # Crunchbase url
  crunchbase: String
  # Twitter url
  twitter: String
}

# Type to represent ImageAssets
type ImageAssets {
  # Defines is an ImageAsset is safe
  safe: Boolean
  # Defines the type of the ImageAsset
  type: String
  # The url of the Image
  image: String
  # Image in SVG
  svg: String
}

# Type to represent a location of an Organization
type OrgLocation {
  # Refers to the continent in which the Organisation is located
  continent: String
  # Country in which organisation is located
  country: String
  # State in which organisation is located
  state: String
  # City of the Organisation
  city: String
  # Country Code of the Organisation
  country_code: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014923419/roava+industry

# Industry represents an industry including Standard Industry Classification (SIC) codes
type Industry {
  # The Ulid field for the Industry
  id: ID!
  # SIC code for an industry or sector
  code: Int!
  # Industry score
  score: Float
  # Section category within the full SIC code list
  section: String
  # Description of industry or sector
  description: String
  # Industry source
  source: String
}

# The connection type for Industry
type IndustryConnection {
  # A list of edges
  edges: [IndustryEdge!]!
  # A list of nodes
  nodes: [Industry!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type IndustryEdge {
  # The item at the end of the edge.
  node: Industry!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/998572196/roava+auth

# Type to represent Auth
type Auth {
  # Unique roava ulid for the data record
  id: ID!
  # Session id
  session: String
  # Identity trying to authenticate
  identity: [Identity]!
  # Boolean to determine if authentication successful
  success: Boolean
  # Count of login attempts
  attempts: Int
  # Unix timestamp when the record was created
  ts: Int
}

# Input type of Auth
input AuthInput {
  # User email to use in the auth
  email: String!
  # User passcode
  passcode: String!
  # The device that is attemping to auth
  device: DeviceInput!
}

type AuthResponse implements GraphQLResponse {
  message: String!
  success: Boolean!
  code: Int
  tokens: AuthTokens
}

type AuthTokens {
  # Unique identifier for the auth token
  auth: String!
  # Token to refresh authentication
  refresh: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014956358/roava+verifications

# OTPs and email magic links to verify identity
type Verification {
  # Unique roava ulid for the data record
  id: ID!
  # OTP or email magic link that is sent to the customer
  code: String
  # Target of the verification based on type
  target: Verifiable!
  # Type of verification being performed email or sms
  type: String
  # Defines if the Verification is validated
  validated: Boolean
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Verification
type VerificationConnection {
  # A list of edges
  edges: [VerificationEdge!]!
  # A list of nodes
  nodes: [Verification!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type VerificationEdge {
  # The item at the end of the edge.
  node: Verification!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1017839830/roava+activity

# A list of potential activities for customers expect to utilise ROAVA
type Activity {
  # Unique roava ulid for the data record
  id: ID!
  # A short description of the activity
  description: String!
  # Expected risk weighting of the activity - 1 (low) to 5 (high risk)
  risk_weighting: Int!
  # Determines if the activity is still supported in ROAVA
  supported: Boolean
  # Unix time stamp indicating when the activity was archived or no longer supported
  archived: Int
  # Unix timestamp when the record was created
  ts: Int
}

# # The connection type for Activity
# type ActivityConnection {
#   # A list of edges
#   edges: [ActivityEdge!]!
#   # A list of nodes
#   nodes: [Activity!]!
#   # Information to aid in pagination
#   pageInfo: PageInfo!
#   # Identifies the total count of items in the connection
#   totalCount: Int
# }

# # An edge in a connection
# type ActivityEdge {
#   # The item at the end of the edge.
#   node: Activity!
#   # A cursor for use in pagination
#   cursor: String!
# }

# Input type of Activity
input ActivityInput {
  # A short description of the activity
  description: String!
  # Expected risk weighting of the activity - 1 (low) to 5 (high risk)
  risk_weighting: Int!
  # Determines if the activity is still supported in ROAVA
  supported: Boolean
  # Unix time stamp indicating when the activity was archived or no longer supported
  archived: Int
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193923/roava%3A+message

# Messages in ROAVA - SMS|Push|Email
type Message {
  # Unique roava ulid for the data record
  id: ID!
  # Reference to the entity who owns this message
  owner: Entity!
  """
  This is the message title which varies by delivery mode / type of message

  - Email - the full HTML template populated to be sent

  - Push - the  content of message card to be displayed in feed

  - SMS - the sms content
  """
  title: String
  """
  Message body which varies by delivery mode / type of message

  - email - the full HTML template populated to be sent

  - push - the  content of message card to be displayed in feed

  - SMS - the sms content
  """
  body: String
  # This field indicates an enumerated status for the message
  status: String
  # A boolean field indicating the message has been read
  has_read: Boolean
  # The delivery mode for the message
  delivery_mode: DeliveryMode!
  """
  The information for the sender based on message type

  - email - sender’s email address

  - sms | push - not required
  """
  sender: String
  """
  The information for the intended recipient of the message based on  type

  - email - target's email address

  - sms - phone number

  - push - device or phone number
  """
  target: Verifiable!
  # Unix timestamp representing data & time the message was dispatched
  sent: Int
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Message
type MessageConnection {
  # A list of edges
  edges: [MessageEdge!]!
  # A list of nodes
  nodes: [Message!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type MessageEdge {
  # The item at the end of the edge.
  node: Message!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1103856061/roava+tag

# Tag defined as data model for referential checks
type Tag {
  # Unique roava ulid for the data record
  id: ID!
  # Tag name
  name: String
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Tag
type TagConnection {
  # A list of edges
  edges: [TagEdge!]!
  # A list of nodes
  nodes: [Tag!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type TagEdge {
  # The item at the end of the edge.
  node: Tag!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193885/roava+cdd

# CDD that combines KYC(roava: check) and AML(roava: screen) results
type CDD {
  # Unique roava ulid for the data record
  id: ID!
  # ROAVA person for which the CDD is being conducted
  owner: Person!
  # Result of any internal screening or watchlists
  watchlist: Boolean
  # Detailed message to customer
  details: String @deprecated(reason: "Description is not necessary here")
  # Status of the CDD record
  status: State!
  # Boolean decision if roava should onboard this customer or not; supplied by staff team
  onboard: Boolean
  # Version number for the cdd record; increment by 1 on each update
  version: Int @deprecated(reason: "Customers now only have single CDD")
  # list of validations performed on a customer
  validations(
    # Filter validations by it's type
    validation_type: ValidationType
    # Filter CDD validations by it's statuses
    status: [State!]
  ): [Validation!]!
  # Boolean to indicate if this is the most current or active CDD file for the customer
  active: Boolean @deprecated(reason: "Customers now only have single CDD")
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for CDD
type CDDConnection {
  # A list of edges
  edges: [CDDEdge!]!
  # A list of nodes
  nodes: [CDD!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type CDDEdge {
  # The item at the end of the edge.
  node: CDD!
  # A cursor for use in pagination
  cursor: String!
}

type Validation {
  # Unique roava ulid for the data record
  id: ID!
  # type of validation being supplied
  validation_type: ValidationType!
  # the Person or Organisation validation is for
  applicant: Owner!
  # the validation result which can be a check, screen or proof
  data: ValidationData!
  # Organisation id for the company/vendor providing the KYC service
  organisation: Organisation!
  # The status of the check
  status: State!
  # approval decision made by ROAVA risk team for this validation
  approved: Boolean
  # Unix timestamp when the record was created
  ts: Int
  # Reference for the actions taken in a Validation
  actions: [Action!]!
}

# Actions taken, such as an onboarding case review
type Action {
  # Unique roava ulid for the data record
  id: ID!
  # Person who created the task
  reporter: Staff!
  ## Person whom task is assigned to
  #assignee: Person!
  ## Person who task is referred to approve the task
  #approver: Person
  # Notes for the task
  notes: String!
  ## ROAVA operations workflow stage
  #stage: String @examples(values: "some_workflow_stage")
  ## Approval status of the task
  #approved: Boolean @examples(values: [true, false])
  # The action type of this action
  status: String!
  ## Version of the task
  #version: Int
  # Unix timestamp when the record was created
  ts: Int!
  ## Array of comments associated to this task
  #comments(
  #  # Returns the first n elements from the list.
  #  first: Int,
  #  # Returns the elements in the list that come after the specified cursor.
  #  after: String,
  #  # Returns the last n elements from the list.
  #  last: Int,
  #  # Returns the elements in the list that come before the specified cursor.
  #  before: String
  #): CommentConnection
  ## Array of tags associated to this task
  #tags(
  #  # Returns the first n elements from the list.
  #  first: Int,
  #  # Returns the elements in the list that come after the specified cursor.
  #  after: String,
  #  # Returns the last n elements from the list.
  #  last: Int,
  #  # Returns the elements in the list that come before the specified cursor.
  #  before: String
  #): TagConnection
}

# union type representing owner of an entity
union Owner = Person | Organisation

# union type representing a validation result which can be a kyc CHECK, aml SCREEN or doucment PROOF
union ValidationData = Check | Screen | Proof

# Type to define a beneficiary - can be payee account or customer account
union BeneficiaryAccount = Account | PayeeAccount

# The connection type for Validation
type ValidationConnection {
  # A list of edges
  edges: [ValidationEdge!]!
  # A list of nodes
  nodes: [Validation!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type ValidationEdge {
  # The item at the end of the edge.
  node: Validation!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/990871725/roava+check

# Checks are performed on an applicant (pereson) and consist of one or more reports
type Check {
  # Unique roava ulid for the data record
  id: ID!
  # Reference for customer or organization who owns the Check Validation
  owner: Owner!
  # Organisation id for the company/vendor providing the KYC service
  organisation: Organisation!
  # The status of the check
  status: State!
  # Unix timestamp when the record was created
  ts: Int
  # Full vendor (onfido) check data payload
  data: CheckData!
}

# The connection type for Check
type CheckConnection {
  # A list of edges
  edges: [CheckEdge!]!
  # A list of nodes
  nodes: [Check!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type CheckEdge {
  # The item at the end of the edge.
  node: Check!
  # A cursor for use in pagination
  cursor: String!
}

# Data type for onfido check payload
type CheckData {
  # Unique roava ulid for the data record
  id: ID!
  # DateTime when the record was created
  created_at: String
  # The status of the check
  status: State!
  # Check uri address
  redirect_uri: String
  # The result of the check
  result: String
  # Boolean to indicate if this check was made in sandbox mode
  sandbox: Boolean
  # The url from the results
  results_uri: String
  # The url of the form
  form_uri: String
  # Boolean to indicate if this check is paused
  paused: Boolean
  # Version number for the check
  version: String
  # Href for the check
  href: String
  # Id of the Applicant
  applicant_id: String
  # Boolean to indicate if applicant provides data
  applicant_provides_data: Boolean
  # Array of Report for this Check
  reports: [Report]!
  # Array of Tags related to this check
  tags(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TagConnection
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014956259/roava+report

# Models an onfido kyc report
type Report {
  # Unique id for the report
  id: String!
  # Data from Onfido
  data: JSON!
  # The status of the report
  status: State!
  # Organisation id for the company/vendor providing the report
  organisation: Organisation
  # Unix timestamp when the record was created
  ts: Int
  # The status of the report review
  review: ReportReviewStatus
}

# Describes the Review Status of a Report
type ReportReviewStatus {
  # Boolean to indicate if the review was submitted
  resubmit: Boolean
  # Message used in the review
  message: String
}

# The connection type for Report
type ReportConnection {
  # A list of edges
  edges: [ReportEdge!]!
  # A list of nodes
  nodes: [Report!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type ReportEdge {
  # The item at the end of the edge.
  node: Report!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193868/roava+screen

# Describes the AML screen result using comply advantage
type Screen {
  # Unique roava ulid for the data record
  id: ID!
  # Full vendor (comply advantage) screen data payload
  data: JSON!
  # Organisation for the company/vendor providing the AML service
  organisation: Organisation
  # The status of the report
  status: State!
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Screen
type ScreenConnection {
  # A list of edges
  edges: [ScreenEdge!]!
  # A list of nodes
  nodes: [Screen!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type ScreenEdge {
  # The item at the end of the edge.
  node: Screen!
  # A cursor for use in pagination
  cursor: String!
}

# Document proofs to be supplied
type Proof {
  # Unique roava ulid for the data record
  id: ID!
  # type of document proof
  type: ProofType!
  # Full data payload for document Proofs
  data: JSON!
  # The status of the report review
  review: ReportReviewStatus
  # Organisation for the company/vendor providing the AML service
  organisation: Organisation
  # The status of the report
  status: State!
  # Unix timestamp when the record was created
  ts: Int
}

# enum representing types of document proofs
enum ProofType {
  ADDRESS
}

# enum representing types of third party available auths
enum AuthType {
  GOOGLE
}

# The connection type for Proof
type ProofConnection {
  # A list of edges
  edges: [ProofEdge!]!
  # A list of nodes
  nodes: [Proof!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type ProofEdge {
  # The item at the end of the edge.
  node: Proof!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1103855717/roava+task

# Task to be completed such as an onboarding case review
type Task {
  # Unique roava ulid for the data record
  id: ID!
  # Person who created the task
  reporter: Person!
  # Person whom task is assigned to
  assignee: Person!
  # Person who task is referred to approve the task
  approver: Person
  # Notes for the task
  notes: String
  # ROAVA operations workflow stage
  stage: String
  # Approval status of the task
  approved: Boolean
  # Version of the task
  version: Int
  # Unix timestamp when the record was created
  ts: Int
  # Array of comments associated to this task
  comments(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CommentConnection
  # Array of tags associated to this task
  tags(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TagConnection
}

# The connection type for Task'
type TaskConnection {
  # A list of edges
  edges: [TaskEdge!]!
  # A list of nodes
  nodes: [Task!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type TaskEdge {
  # The item at the end of the edge.
  node: Task!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1097400336/roava+content

#Roava documents, articles, fee statements, T&Cs, privacy etc
type Content {
  # Unique roava ulid for the data record
  id: ID!
  # Source of the comment
  source: Entity!
  # Type of content - @fee @terms @privacy @article @post @comment @document @photo @video
  type: String
  # Title of the content or document
  title: String
  # Abstract is short description that summarises the document/content
  abstract: String
  # The main body or content of the document. can be a base64 value of the content
  body: String
  # The location of the content
  url: String
  # Value indicating if latest version
  current: Boolean
  # Version number of the content
  version: Int
  # Unix timestamp when the record was created
  ts: Int
  # Array of Comments made in the Content
  comments(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): CommentConnection
  # Array of Tags assiciated to the content
  tags(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TagConnection
  # Array of keywords of the document
  keywords: [String]!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1103790208/roava+comment

# Describes a comment that can be made by customer or staff
type Comment {
  # Unique roava ulid for the data record
  id: ID!
  # The comment creator/author
  author: Person!
  # Type of content - @comment
  type: String
  # The main body or content of the document. can be a base64 value of the content
  body: String
  # Unix timestamp when the record was created
  ts: Int
  # Array of Tags assiciated to the comment
  tags: [Tag]!
}

# The connection type for Comment
type CommentConnection {
  # A list of edges
  edges: [CommentEdge!]!
  # A list of nodes
  nodes: [Comment!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type CommentEdge {
  # The item at the end of the edge.
  node: Comment!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1099202579/roava+acceptance

# Stores something the customer has accepted (like terms and conditions)
type Acceptance {
  # Unique roava ulid for the data record
  id: ID!
  # Reference to the identity  who accepted the item
  identity: Identity!
  # The content (fee, terms) that was accepted
  content: Content!
  # Unix timestamp when the record was created
  ts: Int
}

# The connection type for Acceptance
type AcceptanceConnection {
  # A list of edges
  edges: [AcceptanceEdge!]!
  # A list of nodes
  nodes: [Acceptance!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type AcceptanceEdge {
  # The item at the end of the edge.
  node: Acceptance!
  # A cursor for use in pagination
  cursor: String!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1001193652/roava+fx

# FX rates (prices) for currency pairs
type Fx {
  currency: String!
  base_currency: String!
  buy_rate: Float!
  sell_rate: Float!
  ts: Int!
}

# The connection type for Fx
type FxConnection {
  # A list of edges
  edges: [FxEdge!]!
  # A list of nodes
  nodes: [Fx!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type FxEdge {
  # The item at the end of the edge.
  node: Fx!
  # A cursor for use in pagination
  cursor: String!
}

# Type to define the fees of a transfer
type TransferFees {
  currency: String!
  base_currency: String!
  fees: [Fee!]!
  ts: Int!
}

type Fee {
  lowerBoundary: Float
  upperBoundary: Float
  fee: Float!
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/983400449/roava+quote

# Subscription fees and quotes for Remittance or Account services
type Quote {
  # Unique roava ulid for the data record
  id: ID!
  # If the quote expires or not. If set, an expiry timestamp must be set
  has_expiry: Boolean
  # Unix timestamp representing the expirity the quote
  expires: Int
  # Unix timestamp when the record was created
  ts: Int
  # Represents the Fee in the Quote
  fee: Fee!
  # Represents the Fx value in the Quote
  fx: Fx
}

# The connection type for Quote
type QuoteConnection {
  # A list of edges
  edges: [QuoteEdge!]!
  # A list of nodes
  nodes: [Quote!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type QuoteEdge {
  # The item at the end of the edge.
  node: Quote!
  # A cursor for use in pagination
  cursor: String!
}

# Variable Fee type
type VariableFee {
  # Percentage cost for the roava variable fee
  base_rate: Float
  # Percentage amount for the discount customer is entitled to
  discount: Float
  # Applied percentage rate for variable fee applied_rate = (rate - discount) for the roava variable fee
  applied_rate: Float
  # Percentage cost for the roava partner fee - default = 0
  partner: Int
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1014956164/roava+product

# A ROAVA product which defines the terms and constraints on customer accounts
type Product {
  # Unique roava ulid for the data record
  id: ID!
  # Udentification assigned by an institution
  identification: String
  # Name of the identification scheme
  scheme: String
  # Unix timestamp when the record was created
  ts: Int
  # Details of a Product
  details: ProductDetails!
}

# The connection type for Product
type ProductConnection {
  # A list of edges
  edges: [ProductEdge!]!
  # A list of nodes
  nodes: [Product!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type ProductEdge {
  # The item at the end of the edge.
  node: Product!
  # A cursor for use in pagination
  cursor: String!
}

# Type for the details of a product
type ProductDetails {
  # The category of the Product
  category: String
  # The type of the Product
  type: String
  # The name of the Product
  name: String
  # Defines the state of the product
  state: String
  # Refers to the currency used in the Product
  currency: String
  # Notes for the current Product
  notes: String
  # Defines the state of the credit requirement
  credit_requirement: String
  # Boolean to define if withholding tax is enabled
  withholding_tax_enabled: Boolean
  # Boolean to define if withholding tax is enabled
  allow_offset: Boolean
  # Array of product templates used in the Product
  product_templates: [ProductTemplates]!
  # Array of product fees used in the Product
  product_fees: [ProductFees]!
  # Refers to the product control used in the Product
  product_control: ProductControl
  # Refers to the product maturity of the Product
  product_maturity: ProductMaturity
  # Refers to the overdraft settings used in the Product
  overdraft_setting: OverdraftSetting
  # Refers to the intereset settings used in the Product
  interest_setting: ProductInterestSetting
  # Refers to the product settings used in the Product
  product_setting: ProductSetting
}

# Type to define Accounting Rules
type AccountingRules {
  # Encoded key from the rule
  encoded_key: String
  # The financial resource used in the rule
  financial_resource: String
  # GL Account Key
  gl_key: String
}

# Type to define the opening balance
type OpeningBalance {
  # The default value used in the opening balance
  default_value: Float
  # Max value allowed in the opening balance
  max: Float
  # Min value allowed in the opening balance
  min: Float
}

# Type to define Product Controls
type ProductControl {
  # Number of days of dormancy period
  dormancy_period_days: Int
  # Maximum withdrawal amount allowed
  max_withdrawal_amount: Int
  # The recommended amount for a deposit
  recommended_deposit_amount: Int
  # Refers to the OpeningBalance
  opening_balance: OpeningBalance
}

# Type to define Product Maturity
type ProductMaturity {
  # Temporal unity
  unit: String
  # The default value for the product maturity
  default_value: Int
  # Max value for the product maturity
  max: Int
  # Min value for the product maturity
  min: Int
}

# Type to define the interest rates
type InterestRate {
  # Default value for the interest Rate
  default_value: Float
  # Max value for the interest Rate
  max_value: Float
  # Min value for the interest Rate
  min_value: Float
}

# Type to define the settings of interest rates
type InterestSettings {
  # String representing the quantity of days in a year
  days_in_year: String
  # String representing the quantity of days in a year
  interest_calculation_balance: String
  # Index of the source key
  index_source_key: String
  # String representating the charge frequency of an interest
  charge_frequency: String
  # The charge frequency count of an interest
  charge_frequency_count: Int
  # Interest Rate Review Count
  rate_review_count: Int
  # String representating the review unit of an interest rate
  interest_rate_review_unit: String
  # String representating the interest rate source
  rate_source: String
  # String representating the interest rate terms
  rate_terms: String
  # Array of Interest Rate Tiers
  rate_tiers: [RateTiers]!
  # Interest rate amount
  interest_rate: InterestRate
  # Reference to Interest Rate Settings
  interest_rate_settings: InterestRateSettings
  # Reference to Interest Payment Settings
  interest_payment_settings: InterestPaymentSettings
}

# Type to define the overdraft settings
type OverdraftSetting {
  # Boolean to define if an overdraft is allowed
  allow_overdraft: Boolean
  # Boolean to define if a technical overdraft is allowed
  allow_technical_overdraft: Boolean
  # Overdraft Limit amount
  max_limit: Int
  # Reference to the Interest Settings
  interest_settings: InterestSettings
}

# Type to define the interest rate tiers
type RateTiers {
  # Encoded key from the rule
  encoded_key: String
  # Ending balance of the tier
  ending_balance: Int
  # Ending day of the tiuer
  ending_day: Int
  # Tier interest rate
  interest_rate: Int
}

# Type to define rate settings
type RateSetting {
  # Accrue after maturity of the rate
  accrue_after_maturity: Boolean
  # Index source key of the rate setting
  index_source_key: String
  # String repesenting the charge frequency of the rate
  charge_frequency: String
  # Charge frequency count of the rate
  charge_frequency_count: Int
  # String repesenting the source of the rate
  rate_source: String
  # String repesenting the terms of the rate
  rate_terms: String
  # Array of rate tiers for this setting
  rate_tiers: [RateTiers]!
  # Reference to the Interest Rate
  interest_rate: InterestRate
}

# Type to define the interest payment dates
type InterestPaymentDates {
  # Day to pay the interest
  day: Int
  # Month
  month: Int
}

# Type to define an interest setting
type ProductInterestSetting {
  # Boolean to define if interests can be collected from a locked account
  collect_interest_when_locked: Boolean
  # String representating the amount of the days in a year
  days_in_year: String
  # The balance used to calculate an interest balance
  interest_calculation_balance: String
  # Boolean to represent if an interest is paid into account
  interest_paid_into_account: Boolean
  # String representating the interest payment point
  interest_payment_point: String
  # Interest maxumim balance amount
  maximum_balance: Float
  # Reference for rate setting
  rate_setting: RateSetting
  # Array of Interest Payment Dates
  interest_payment_dates: [InterestPaymentDates]!
}

# Type to define a product setting
type ProductSetting {
  # String representanting the accounting method
  accounting_method: String
  # String representanting the interest accounting
  interest_accounting: String
  # Array of accounting rules
  accounting_rules: [AccountingRules]!
}

# Type to define a product fees
type ProductFees {
  # Fee amount of a product
  amount: Int
  # # String representanting the calculation method
  calculation_method: String
  # String representanting the apply date method
  apply_date_method: String
  # The date when the product fee was created
  creation_date: String
  # Encoded key from the rule
  encoded_key: String
  # String representanting the application of the fee
  fee_application: String
  # Date when the fee was last updated
  last_modified: String
  # Name of the product fee
  name: String
  # State of the product fee
  state: String
  # String representanting how the fee is triggered
  trigger: String
  # Array of accounting rules for the product fee
  accounting_rules: [AccountingRules]!
}

# Type to define a product templates
type ProductTemplates {
  # The date when the product template was created
  creation_date: String
  # Encoded key from the rule
  encoded_key: String
  # Date when the template was last updated
  last_modified_date: String
  # Name of the template
  name: String
  # Type of the template
  type: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1103790225/roava+account

# Representation of a customer account (deposit, savings, loan, credit)
type Account {
  # Unique roava ulid for the data record
  id: ID!
  # Reference for customer or organization who owns account
  owner: Owner!
  # Reference for the financial product linked to the account
  product: Product
  # Friendly name given to account by owner
  name: String
  # Boolean flag to determine if account active
  active: Boolean
  # Account status
  status: String
  # Image background for an account
  image: String
  # Reference for the organization of this account
  organisation: Organisation
  # Unix timestamp when the record was created
  ts: Int
  # Array of tags
  tags(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TagConnection
  # Account can have array of 0..n transactions
  transactions(
    # Returns the first n elements from the list.
    first: Int
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the last n elements from the list.
    last: Int
    # Returns the elements in the list that come before the specified cursor.
    before: String
  ): TransactionConnection
  # Reference data of an account
  account_data: AccountData
  # Account details suchs as IBAN, number and sort codes
  account_details: AccountDetails
}

# The connection type for Account
type AccountConnection {
  # A list of edges
  edges: [AccountEdge!]!
  # A list of nodes
  nodes: [Account!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type AccountEdge {
  # The item at the end of the edge.
  node: Account!
  # A cursor for use in pagination
  cursor: String!
}

# Type to define optional inputs when creating an account
input AccountInput {
  # Friendly name given to account by owner
  name: String
}
# Type to define account details
type AccountDetails {
  # virtual account id from clearbank
  virtual_account_id: String
  # account iban number
  iban: String
  # account number
  account_number: String
  # sort code for the account
  sort_code: String
  # swift/bic code for the account
  swift_bic: String
  # the bank code for the account servicer
  bank_code: String
  # account routing number required in US and Canada
  routing_number: String
}

# Type to define the data of an account
type AccountData {
  # Unique roava ulid for the data record
  id: ID!
  # Key of the account holder
  account_holder_key: String
  # Type of holder type of the account
  account_holder_type: String
  # State of the account
  account_state: String
  # Type of Aaccount
  account_type: String
  # Date that the account was activated
  activation_date: String
  # Date that the account was approved
  approved_date: String
  # Key of the branch associated to the account
  assigned_branch_key: String
  # Key of the centre associated to the account
  assigned_centre_key: String
  # Key of the user associated to the account
  assigned_user_key: String
  # Date when the account was closed
  closed_date: String
  # Date when the account was created
  creation_date: String
  # Key to the credit arragement
  credit_arrangement_key: String
  # 3 digit code of the currency
  currency_code: String
  # Encoded key of the account
  encoded_key: String
  # Last date when the account was evaluated
  last_account_appraisal_date: String
  # Last date when the interest was calculated
  last_interest_calculation_date: String
  # Last date when the interest was stored
  last_interest_stored_date: String
  # Last date when the account was modified
  last_modified_date: String
  # Last date when the overdraft interest was reviewed
  last_overdraft_interest_review_date: String
  # Last date when the interest payments was arreared
  last_set_to_arrears_date: String
  # Date when the account was locked
  locked_date: String
  # Date when the account was considered mature
  maturity_date: String
  # Key of the migration event
  migration_event_key: String
  # Account Name
  name: String
  # Notes about the account
  notes: String
  # Key of the product type of the account
  product_type_key: String
  # Key in the source of the withholding tax
  withholding_tax_source_key: String
  # Reference to overdraft settings of the account
  overdraft_settings: OverdraftSettings
  # Reference to overdraft interest settings of the account
  overdraft_interest_settings: OverdraftInterestSettings
  # Array of settlements of the account
  linked_settlement_account_keys: [String]
  # Reference to internal controls of the account
  internal_controls: InternalControls
  # Reference to interest settings of the account
  interest_settings: InterestSettings
  # Reference to the balances of the account
  balances: Balances
  # Reference to the accrued ammounts of the account
  accrued_amounts: AccruedAmounts
}

# Type to define accrued amounts
type AccruedAmounts {
  # Accrued interest amount
  interest_accrued: Float
  # Negative interest amounts accrued
  negative_interest_accrued: Float
  # Overdraft interest accrued amount
  overdraft_interest_accrued: Float
  # Technical iverdraft interest accrued amount
  technical_overdraft_interest_accrued: Float
}

# Type to define the balances o an account
type Balances {
  # Amount available in the account
  available_balance: Float
  # Amount blocked in the account
  blocked_balance: Float
  # Due date of the fees
  fees_due: Float
  # Forwarded available balance
  forward_available_balance: Float
  # Amount on hold in account
  hold_balance: Float
  # Locked ammount in account
  locked_balance: Float
  # Overdraft amount in account
  overdraft_amount: Float
  # Overdraft interest due date
  overdraft_interest_due: Float
  # Technical overdraft amount in account
  technical_overdraft_amount: Float
  # Technical overdraft interest due date
  technical_overdraft_interest_due: Float
  # Total account balance
  total_balance: Float
}

# Type to define the interest payment settings
type InterestPaymentSettings {
  # The point of payment of the interest
  interest_payment_point: String
  # Array of interest payment dates
  interest_payment_dates: [InterestPaymentDates]
}

# Type to define the internal controls of an account
type InternalControls {
  # Maximum deposit balance amount
  max_deposit_balance: Float
  # Maximum available amount to withdrawal
  max_withdrawal_amount: Float
  # Amount recommended to deposint in the account
  recommended_deposit_amount: Float
  # Targeted amount of an account
  target_amount: Float
}

# Type to define the settings of an interest overdraft
type OverdraftInterestSettings {
  # Reference to the Interest Rate Settings
  interest_rate_settings: InterestRateSettings
}

# Type to define the settings of an interest rate
type InterestRateSettings {
  # Interest Rate Settings encoded key
  encoded_key: String
  # String representating the frequency that the interest will be charged
  interest_charge_frequency: String
  # The charge frequency count of an interest
  interest_charge_frequency_count: Int
  # Interest rate amount
  interest_rate: Int
  # Interest Rate Review Count
  interest_rate_review_count: Int
  # String representating the review unit of an interest rate
  interest_rate_review_unit: String
  # String representating the interest rate source
  interest_rate_source: String
  # String representating the interest rate terms
  interest_rate_terms: String
  # The spread of the interes
  interest_spread: Int
  # Array of Interest Rate Tiers
  interest_rate_tiers: [InterestRateTiers]
}

# Type to define the tiers of an interest rate
type InterestRateTiers {
  # Encoded key of the Interest Rate Tier
  encoded_key: String
  # Ending balance of the tier
  ending_balance: Float
  # Ending day of the tier
  ending_day: Int
  # Interest rate amount
  interest_rate: Float
}

# Type to define the settings of an overdraft
type OverdraftSettings {
  # Boolean to define if overdraft is allowed
  allow_overdraft: Boolean
  # Date when the overdraft will expire
  overdraft_expiry_date: String
  # Overdraft Limit amount
  overdraft_limit: Int
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/977600522/roava+transaction

# Transaction shows changes and activities on customer accounts
type Transaction {
  # Unique roava ulid for the data record
  id: ID!
  # Reference to the account that the transaction is happening
  account: Account!
  # Unix timestamp when the record was created
  ts: Int
  # Reference to the data of the Transaction
  transaction_data: TransactionData
}

# The connection type for Transaction
type TransactionConnection {
  # A list of edges
  edges: [TransactionEdge!]!
  # A list of nodes
  nodes: [Transaction!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type TransactionEdge {
  # The item at the end of the edge.
  node: Transaction!
  # A cursor for use in pagination
  cursor: String!
}

# Type to define the data of a transaction
type TransactionData {
  # Unique roava ulid for the data record
  id: ID!
  # Amount involved in the transaction
  amount: Float
  # Scheduled day that the transaction will happen
  booking_date: String
  # Date when the transaction has been created
  creation_date: String
  # 3 digit code of the currency used in the transaction
  currency_code: String
  # Transaction encoded key
  encoded_key: String
  # Key used in external services to identify this transaction
  external_id: String
  # Description of a transaction
  notes: String
  # Reference to the parent account
  parent_account_key: String
  # ID of a payment order
  payment_order_id: String
  # Type of a transaction
  type: String
  # Reference to the user creating the transaction
  user_key: String
  # Date of the value in the transaction
  value_date: String
  # Reference to the details of the transaction
  transfer_details: TransferDetails
  # Array of fees applied to this transaction
  fees: [TransactionFee]
  # The values involved in the transaction calcule
  affected_amounts: AffectedAmounts
  # The balance of the account involved in the transaction
  account_balances: AccountBalances
}

type TransactionFee {
  Amount: Int
  Name: String
  PredefinedFeeKey: String
  TaxAmount: Int
  Trigger: String
}

# Type to define an account balance in a Transaction
type AccountBalances {
  # Total balance of the account
  total_balance: Float
}

# Type to define an account balance in a Transaction
type AffectedAmounts {
  # Total amount of fees applied to the transaction
  fees_amount: Float
  # Fraction of the transaction
  fraction_amount: Float
  # Total amount of funds used in the transaction
  funds_amount: Float
  # Interest applied to the transaction
  interest_amount: Float
  # Overdraft amount applied to the transaction
  overdraft_amount: Float
  # Overdraft fees applied to the transaction
  overdraft_fees_amount: Float
  # Overdraft interest rate applied to the transaction
  overdraft_interest_amount: Float
  # Thecnical overdraft amount applied to the transaction
  technical_overdraft_amount: Float
  # Thecnical overdraft interest rate applied to the transaction
  technical_overdraft_interest_amount: Float
}

# Type to define the details of a transfer
type TransferDetails {
  # Reference the loan linked to the transfer
  linked_loan_transaction_key: String
}

input SubmitProofInput {
  type: ProofType!
  # base64 string of the image captured
  data: String!
  # status = PENDING as default and is optional
  status: State
}

# Product input required for opening accounts
input ProductInput {
  # Unique roava ulid for the data record
  id: ID!
  # Udentification assigned by an institution
  identification: String
  # Name of the identification scheme
  scheme: String
}

# https://fcmbuk.atlassian.net/wiki/spaces/ROAV/pages/1282539527/roava+payee

# Type to define a payee
type Payee {
  # Unique roava ulid for the data record
  id: ID!
  # identity that owns the payee
  owner: Identity!
  # name of payee
  name: String!
  # avatar (optional) for the payee
  avatar: String
  # unix timestamp when payee created
  ts: Int
  # beneficiary/payee accounts created by customer
  accounts: [PayeeAccount]!
}

# Type to define a payee/beneficiary account features
type PayeeAccount {
  # unique id of the payee account
  id: ID!
  # nickname of beneficiary account assigned by customer
  name: String
  # currency code for the currency
  currency: String
  # optional payee account account_number
  account_number: String
  # optional payee account sort_code
  sort_code: String
  # optional payee account iban
  iban: String
  # optional payee account swift_bic
  swift_bic: String
  # optional payee account bank_code
  bank_code: String
  # optional payee account routing_number
  routing_number: String
  # optional payee phone_number
  phone_number: String
}

# Type for creating a new payee
input PayeeInput {
  # name of payee/beneficiariy
  name: String!
  # avatar (optional) for the payee
  avatar: String
  # account information provided when creating payee
  accounts: [PayeeAccountInput]!
}

input PayeeAccountInput {
  # nickname of beneficiary account assigned by customer
  name: String
  # currency code for the currency
  currency: String
  # optional payee account account_number
  account_number: String
  # optional payee account sort_code
  sort_code: String
  # optional payee account iban
  iban: String
  # optional payee account swift_bic
  swift_bic: String
  # optional payee account bank_code
  bank_code: String
  # optional payee account routing_number
  routing_number: String
  # optional payee phone_number
  phone_number: String
}

# The connection type for Payee
type PayeeConnection {
  # A list of edges
  edges: [PayeeEdge!]!
  # A list of nodes
  nodes: [Payee!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type PayeeEdge {
  # The item at the end of the edge.
  node: Payee!
  # A cursor for use in pagination
  cursor: String!
}

# Report input required to ask for a resubmit
input ReportInput {
  id: ID!
}

# Type to define a payment
type Payment {
  # unique roava ulid for the payment
  id: String
  # unique value generated by the client which the server uses to recognize subsequent retries of the same request
  idempotency_key: String!
  # the owner (person|organisation) providing payment instruction
  owner: Owner!
  # total fee and charges applicable to payment
  charge: Float
  # reference string provided by the customer
  reference: String
  # status of the payment - default=PENDING
  status: State
  # optional image (base64 string) provided by the customer
  image: String
  # notes attahed to the payment by the customer
  notes: String
  # quote for international payments
  quote: Quote
  # optional tags applied to the payment
  tags: [Tag]
  # beneficiary account receiving the payment
  beneficiary: Beneficiary!
  # source account from which moneies will be debited
  funding_source: Account!
  # currency of the payment instruction
  currency: Currency
  # ammount to be debited from funding source/account
  funding_amount: Float!
  # unix timestamp when payee created
  ts: Int
}

# Type to define a beneficiary account
type Beneficiary {
  # beneficiary (Payee Account | Account) for this payment
  account: BeneficiaryAccount!
  # currency of the beneficiary account
  currency: Currency
  # amount to be credited to beneficiary account
  amount: Float!
}

# The connection type for Payment
type PaymentConnection {
  # A list of edges
  edges: [PaymentEdge!]!
  # A list of nodes
  nodes: [Payment!]!
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Identifies the total count of items in the connection
  totalCount: Int
}

# An edge in a connection
type PaymentEdge {
  # The item at the end of the edge.
  node: Payment!
  # A cursor for use in pagination
  cursor: String!
}

# Input type for creating new payments
input PaymentInput {
  # unique value generated by the client which the server uses to recognize subsequent retries of the same request
  idempotency_key: String!
  # the owner (person|organisation) providing payment instruction
  owner: ID!
  # total fee and charges applicable to payment
  charge: Float
  # reference string provided by the customer
  reference: String
  # status of the payment - default=PENDING
  status: State
  # optional image (base64 string) provided by the customer
  image: String
  # notes attahed to the payment by the customer
  notes: String
  # unique ulid for the quote international payments
  quote: String
  # optional tags applied to the payment
  tags: [ID!]
  # beneficiary account receiving the payment
  beneficiary: BeneficiaryInput!
  # unique id of source account from which moneies will be debited
  funding_source: String!
  # 3 letter ISO currency code of the funding account for payment
  currency: String
  # ammount to be debited from funding source/account
  funding_amount: Float!
}

# Type to input a beneficiary account for a payment
input BeneficiaryInput {
  # id of beneficiary (Payee Account | Account) for this payment
  account: String!
  # 3 letter ISO currency code of the beneficiary account
  currency: String
  # amount to be credited to beneficiary account
  amount: Float!
}

# Type to define a staff member account
type Staff {
  # unique ulid for the staff member
  id: ID!
  # First name of the Staff member
  first_name: String!
  # Last name of the Staff member
  last_name: String!
  # Current status of the Staff member
  status: StaffStatus!
  # Array of email addresses the staff member
  emails: [Email]!
  # Array of phone numbersof the staff member
  phones: [Phone]!
  # Role of the Staff Member in Roava
  # role: [Role!]
  # Array of identities for the staff member
  identities: [Identity]!
  # Unix timestamp when the record was created
  ts: Int!
}

# list of Staff states
enum StaffStatus {
  ACTIVE
  INACTIVE
  EXITED
}

# Input used to validate the user data if the user has a GBP Account
input ValidateUserInput {
  email: String!
  first_name: String!
  last_name: String!
  dob: String!
  account_number: String!
  sort_code: String!
  device: DeviceInput!
}

# Possible status for Payments
enum PaymentStatus {
  PENDING,
  APPROVED
}

# Filter for Payments
input PaymentFilter {
  # id from payee
  payee_id: String
  # status of payment
  status: PaymentStatus
  # limit of returned data
  limit: Int
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Account_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Account_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_CDD_validations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *types.ValidationType
	if tmp, ok := rawArgs["validation_type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validation_type"))
		arg0, err = ec.unmarshalOValidationType2ᚖmsᚗapiᚋtypesᚐValidationType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["validation_type"] = arg0
	var arg1 []types.State
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalOState2ᚕmsᚗapiᚋtypesᚐStateᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_CheckData_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Content_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Content_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_acceptTerms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["documents"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documents"))
		arg0, err = ec.unmarshalNID2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["documents"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPayeeAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payee"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee"] = arg0
	var arg1 types.PayeeAccountInput
	if tmp, ok := rawArgs["payee_account"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee_account"))
		arg1, err = ec.unmarshalNPayeeAccountInput2msᚗapiᚋtypesᚐPayeeAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee_account"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_confirmPasscodeResetOtp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_confirmPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ProductInput
	if tmp, ok := rawArgs["product"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product"))
		arg0, err = ec.unmarshalNProductInput2msᚗapiᚋtypesᚐProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["product"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPayee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.PayeeInput
	if tmp, ok := rawArgs["payee"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee"))
		arg0, err = ec.unmarshalNPayeeInput2msᚗapiᚋtypesᚐPayeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.PaymentInput
	if tmp, ok := rawArgs["payment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
		arg0, err = ec.unmarshalNPaymentInput2msᚗapiᚋtypesᚐPaymentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payment"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 types.DeviceInput
	if tmp, ok := rawArgs["device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
		arg1, err = ec.unmarshalNDeviceInput2msᚗapiᚋtypesᚐDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["device"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createTransactionPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePayeeAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payee"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["payee_account"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee_account"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee_account"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_intendedActivities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["activities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activities"))
		arg0, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activities"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_loginWithToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 types.AuthType
	if tmp, ok := rawArgs["authType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authType"))
		arg1, err = ec.unmarshalNAuthType2msᚗapiᚋtypesᚐAuthType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.AuthInput
	if tmp, ok := rawArgs["credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
		arg0, err = ec.unmarshalNAuthInput2msᚗapiᚋtypesᚐAuthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["credentials"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.PersonInput
	if tmp, ok := rawArgs["person"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
		arg0, err = ec.unmarshalNPersonInput2msᚗapiᚋtypesᚐPersonInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["person"] = arg0
	var arg1 types.AddressInput
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg1, err = ec.unmarshalNAddressInput2msᚗapiᚋtypesᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_requestOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DeliveryMode
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalNDeliveryMode2msᚗapiᚋtypesᚐDeliveryMode(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["target"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("target"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["target"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["expireTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expireTime"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["expireTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_requestPasscodeReset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 types.DeviceInput
	if tmp, ok := rawArgs["device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
		arg1, err = ec.unmarshalNDeviceInput2msᚗapiᚋtypesᚐDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["device"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_requestTransactionPasscodeReset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resendEmailMagicLInk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resendOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPasscode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["passcode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passcode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passcode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_resetTransactionPasscode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["currentPasscode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentPasscode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currentPasscode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["newPasscode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPasscode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPasscode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_resubmitReports_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*types.ReportInput
	if tmp, ok := rawArgs["reports"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reports"))
		arg0, err = ec.unmarshalOReportInput2ᚕᚖmsᚗapiᚋtypesᚐReportInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reports"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resubmit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*types.ReportInput
	if tmp, ok := rawArgs["reports"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reports"))
		arg0, err = ec.unmarshalNReportInput2ᚕᚖmsᚗapiᚋtypesᚐReportInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reports"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setDevicePreference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DevicePreferenceType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalNDevicePreferenceType2msᚗapiᚋtypesᚐDevicePreferenceType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_signup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["passcode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passcode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passcode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_submitProof_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.SubmitProofInput
	if tmp, ok := rawArgs["proof"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof"))
		arg0, err = ec.unmarshalNSubmitProofInput2msᚗapiᚋtypesᚐSubmitProofInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["proof"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeviceToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*types.DeviceTokenInput
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNDeviceTokenInput2ᚕᚖmsᚗapiᚋtypesᚐDeviceTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePayee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payee"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee"] = arg0
	var arg1 *types.PayeeInput
	if tmp, ok := rawArgs["payee_input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee_input"))
		arg1, err = ec.unmarshalOPayeeInput2ᚖmsᚗapiᚋtypesᚐPayeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payee_input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateValidationStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["validation"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validation"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["validation"] = arg0
	var arg1 types.State
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNState2msᚗapiᚋtypesᚐState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_validateBVN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["bvn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bvn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bvn"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_validateEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 types.DeviceInput
	if tmp, ok := rawArgs["device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
		arg1, err = ec.unmarshalNDeviceInput2msᚗapiᚋtypesᚐDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["device"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_validateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ValidateUserInput
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalNValidateUserInput2msᚗapiᚋtypesᚐValidateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["target"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("target"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["target"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_acceptance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_acceptances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_account_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_activities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["supported"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supported"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supported"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_addressLookup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["text"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_address_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cdd_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cdds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["keywords"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keywords"] = arg0
	var arg1 []types.State
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalOState2ᚕmsᚗapiᚋtypesᚐStateᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_checkEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_checks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_countries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_country_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_currencies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["supported"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supported"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supported"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_currency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_device_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["identifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_devices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_fx_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currency"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["base_currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_currency"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["base_currency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_industries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_industry_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_message_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_messages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organisation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organisations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_payee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_payees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_payment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_payments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *types.PaymentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentFilter2ᚖmsᚗapiᚋtypesᚐPaymentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_people_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["keywords"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keywords"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg2
	var arg3 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["onboarded"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("onboarded"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["onboarded"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_person_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_price_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["pair"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pair"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pair"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["ts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ts"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_prices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_proof_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_proofs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_quote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_quotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_reports_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_screen_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_screens_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_tag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_task_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_transaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["account"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
		arg4, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["account"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["payments"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payments"))
		arg5, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payments"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_transferFees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currency"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["base_currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_currency"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["base_currency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_validation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_validations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_verification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_verifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Subscription_accounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_cdd_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_cdds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["keywords"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keywords"] = arg0
	var arg1 []types.State
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalOState2ᚕmsᚗapiᚋtypesᚐStateᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg5
	return args, nil
}

func (ec *executionContext) field_Task_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_Task_tags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Acceptance_id(ctx context.Context, field graphql.CollectedField, obj *types.Acceptance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Acceptance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Acceptance_identity(ctx context.Context, field graphql.CollectedField, obj *types.Acceptance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Acceptance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Acceptance_content(ctx context.Context, field graphql.CollectedField, obj *types.Acceptance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Acceptance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Content)
	fc.Result = res
	return ec.marshalNContent2ᚖmsᚗapiᚋtypesᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Acceptance_ts(ctx context.Context, field graphql.CollectedField, obj *types.Acceptance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Acceptance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AcceptanceEdge)
	fc.Result = res
	return ec.marshalNAcceptanceEdge2ᚕᚖmsᚗapiᚋtypesᚐAcceptanceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Acceptance)
	fc.Result = res
	return ec.marshalNAcceptance2ᚕᚖmsᚗapiᚋtypesᚐAcceptanceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Acceptance)
	fc.Result = res
	return ec.marshalNAcceptance2ᚖmsᚗapiᚋtypesᚐAcceptance(ctx, field.Selections, res)
}

func (ec *executionContext) _AcceptanceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AcceptanceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AcceptanceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_owner(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Owner)
	fc.Result = res
	return ec.marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_product(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_name(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_active(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_status(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_image(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_ts(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_tags(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Account_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TagConnection)
	fc.Result = res
	return ec.marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_transactions(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Account_transactions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransactionConnection)
	fc.Result = res
	return ec.marshalOTransactionConnection2ᚖmsᚗapiᚋtypesᚐTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_account_data(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountData)
	fc.Result = res
	return ec.marshalOAccountData2ᚖmsᚗapiᚋtypesᚐAccountData(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_account_details(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountDetails)
	fc.Result = res
	return ec.marshalOAccountDetails2ᚖmsᚗapiᚋtypesᚐAccountDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountBalances_total_balance(ctx context.Context, field graphql.CollectedField, obj *types.AccountBalances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountBalances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountEdge)
	fc.Result = res
	return ec.marshalNAccountEdge2ᚕᚖmsᚗapiᚋtypesᚐAccountEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.AccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚕᚖmsᚗapiᚋtypesᚐAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.AccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_account_holder_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountHolderKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_account_holder_type(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountHolderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_account_state(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_account_type(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_activation_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_approved_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_assigned_branch_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedBranchKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_assigned_centre_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedCentreKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_assigned_user_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedUserKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_closed_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClosedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_creation_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_credit_arrangement_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditArrangementKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_currency_code(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_account_appraisal_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAccountAppraisalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_interest_calculation_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastInterestCalculationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_interest_stored_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastInterestStoredDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_modified_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_overdraft_interest_review_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastOverdraftInterestReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_last_set_to_arrears_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSetToArrearsDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_locked_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_maturity_date(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaturityDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_migration_event_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MigrationEventKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_name(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_notes(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_product_type_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductTypeKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_withholding_tax_source_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithholdingTaxSourceKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_overdraft_settings(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OverdraftSettings)
	fc.Result = res
	return ec.marshalOOverdraftSettings2ᚖmsᚗapiᚋtypesᚐOverdraftSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_overdraft_interest_settings(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftInterestSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OverdraftInterestSettings)
	fc.Result = res
	return ec.marshalOOverdraftInterestSettings2ᚖmsᚗapiᚋtypesᚐOverdraftInterestSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_linked_settlement_account_keys(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedSettlementAccountKeys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_internal_controls(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalControls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InternalControls)
	fc.Result = res
	return ec.marshalOInternalControls2ᚖmsᚗapiᚋtypesᚐInternalControls(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_interest_settings(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestSettings)
	fc.Result = res
	return ec.marshalOInterestSettings2ᚖmsᚗapiᚋtypesᚐInterestSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_balances(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Balances)
	fc.Result = res
	return ec.marshalOBalances2ᚖmsᚗapiᚋtypesᚐBalances(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountData_accrued_amounts(ctx context.Context, field graphql.CollectedField, obj *types.AccountData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccruedAmounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccruedAmounts)
	fc.Result = res
	return ec.marshalOAccruedAmounts2ᚖmsᚗapiᚋtypesᚐAccruedAmounts(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_virtual_account_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirtualAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_iban(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_account_number(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_sort_code(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_swift_bic(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwiftBic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_bank_code(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountDetails_routing_number(ctx context.Context, field graphql.CollectedField, obj *types.AccountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AccountEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AccountEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountingRules_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountingRules) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountingRules",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountingRules_financial_resource(ctx context.Context, field graphql.CollectedField, obj *types.AccountingRules) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountingRules",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinancialResource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountingRules_gl_key(ctx context.Context, field graphql.CollectedField, obj *types.AccountingRules) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountingRules",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccruedAmounts_interest_accrued(ctx context.Context, field graphql.CollectedField, obj *types.AccruedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccruedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestAccrued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AccruedAmounts_negative_interest_accrued(ctx context.Context, field graphql.CollectedField, obj *types.AccruedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccruedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NegativeInterestAccrued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AccruedAmounts_overdraft_interest_accrued(ctx context.Context, field graphql.CollectedField, obj *types.AccruedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccruedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftInterestAccrued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AccruedAmounts_technical_overdraft_interest_accrued(ctx context.Context, field graphql.CollectedField, obj *types.AccruedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccruedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalOverdraftInterestAccrued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_id(ctx context.Context, field graphql.CollectedField, obj *types.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_reporter(ctx context.Context, field graphql.CollectedField, obj *types.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Staff)
	fc.Result = res
	return ec.marshalNStaff2ᚖmsᚗapiᚋtypesᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_notes(ctx context.Context, field graphql.CollectedField, obj *types.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_status(ctx context.Context, field graphql.CollectedField, obj *types.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_ts(ctx context.Context, field graphql.CollectedField, obj *types.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_id(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_description(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_risk_weighting(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskWeighting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_supported(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supported, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_archived(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_ts(ctx context.Context, field graphql.CollectedField, obj *types.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_id(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_owner(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.Entity)
	fc.Result = res
	return ec.marshalOEntity2msᚗapiᚋtypesᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_name(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_primary(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_street(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_city(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_county(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.County, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_state(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_postcode(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_country(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_ts(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_location(ctx context.Context, field graphql.CollectedField, obj *types.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖmsᚗapiᚋtypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AddressConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AddressEdge)
	fc.Result = res
	return ec.marshalNAddressEdge2ᚕᚖmsᚗapiᚋtypesᚐAddressEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.AddressConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚕᚖmsᚗapiᚋtypesᚐAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AddressConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.AddressConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AddressEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _AddressEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AddressEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddressEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_fees_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeesAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_fraction_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FractionAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_funds_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundsAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_interest_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_overdraft_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_overdraft_fees_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftFeesAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_overdraft_interest_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftInterestAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_technical_overdraft_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalOverdraftAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _AffectedAmounts_technical_overdraft_interest_amount(ctx context.Context, field graphql.CollectedField, obj *types.AffectedAmounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AffectedAmounts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalOverdraftInterestAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_id(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_session(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_identity(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_success(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_attempts(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Auth_ts(ctx context.Context, field graphql.CollectedField, obj *types.Auth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResponse_message(ctx context.Context, field graphql.CollectedField, obj *types.AuthResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResponse_success(ctx context.Context, field graphql.CollectedField, obj *types.AuthResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResponse_code(ctx context.Context, field graphql.CollectedField, obj *types.AuthResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResponse_tokens(ctx context.Context, field graphql.CollectedField, obj *types.AuthResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AuthTokens)
	fc.Result = res
	return ec.marshalOAuthTokens2ᚖmsᚗapiᚋtypesᚐAuthTokens(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthTokens_auth(ctx context.Context, field graphql.CollectedField, obj *types.AuthTokens) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthTokens",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthTokens_refresh(ctx context.Context, field graphql.CollectedField, obj *types.AuthTokens) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AuthTokens",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refresh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_available_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_blocked_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockedBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_fees_due(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeesDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_forward_available_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForwardAvailableBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_hold_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HoldBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_locked_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_overdraft_amount(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_overdraft_interest_due(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftInterestDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_technical_overdraft_amount(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalOverdraftAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_technical_overdraft_interest_due(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalOverdraftInterestDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balances_total_balance(ctx context.Context, field graphql.CollectedField, obj *types.Balances) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Balances",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_account(ctx context.Context, field graphql.CollectedField, obj *types.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.BeneficiaryAccount)
	fc.Result = res
	return ec.marshalNBeneficiaryAccount2msᚗapiᚋtypesᚐBeneficiaryAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_currency(ctx context.Context, field graphql.CollectedField, obj *types.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_amount(ctx context.Context, field graphql.CollectedField, obj *types.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_id(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_owner(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_watchlist(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Watchlist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_details(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_status(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_onboard(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Onboard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_version(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_validations(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CDD_validations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CDD().Validations(rctx, obj, args["validation_type"].(*types.ValidationType), args["status"].([]types.State))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Validation)
	fc.Result = res
	return ec.marshalNValidation2ᚕᚖmsᚗapiᚋtypesᚐValidationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_active(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CDD_ts(ctx context.Context, field graphql.CollectedField, obj *types.Cdd) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDD",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CDDConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CDDEdge)
	fc.Result = res
	return ec.marshalNCDDEdge2ᚕᚖmsᚗapiᚋtypesᚐCDDEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.CDDConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Cdd)
	fc.Result = res
	return ec.marshalNCDD2ᚕᚖmsᚗapiᚋtypesᚐCddᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CDDConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.CDDConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CDDEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Cdd)
	fc.Result = res
	return ec.marshalNCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx, field.Selections, res)
}

func (ec *executionContext) _CDDEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CDDEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CDDEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_id(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_owner(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Owner)
	fc.Result = res
	return ec.marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_status(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_ts(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_data(ctx context.Context, field graphql.CollectedField, obj *types.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CheckData)
	fc.Result = res
	return ec.marshalNCheckData2ᚖmsᚗapiᚋtypesᚐCheckData(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CheckConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CheckEdge)
	fc.Result = res
	return ec.marshalNCheckEdge2ᚕᚖmsᚗapiᚋtypesᚐCheckEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.CheckConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Check)
	fc.Result = res
	return ec.marshalNCheck2ᚕᚖmsᚗapiᚋtypesᚐCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CheckConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.CheckConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_id(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_created_at(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_status(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_redirect_uri(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_result(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_sandbox(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sandbox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_results_uri(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultsURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_form_uri(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_paused(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paused, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_version(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_href(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Href, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_applicant_id(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_applicant_provides_data(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicantProvidesData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_reports(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Report)
	fc.Result = res
	return ec.marshalNReport2ᚕᚖmsᚗapiᚋtypesᚐReport(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckData_tags(ctx context.Context, field graphql.CollectedField, obj *types.CheckData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CheckData_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TagConnection)
	fc.Result = res
	return ec.marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CheckEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Check)
	fc.Result = res
	return ec.marshalNCheck2ᚖmsᚗapiᚋtypesᚐCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CheckEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_author(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_type(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_body(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_ts(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_tags(ctx context.Context, field graphql.CollectedField, obj *types.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖmsᚗapiᚋtypesᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CommentEdge)
	fc.Result = res
	return ec.marshalNCommentEdge2ᚕᚖmsᚗapiᚋtypesᚐCommentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖmsᚗapiᚋtypesᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CommentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖmsᚗapiᚋtypesᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CommentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_id(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_source(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Entity)
	fc.Result = res
	return ec.marshalNEntity2msᚗapiᚋtypesᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_type(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_title(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_abstract(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Abstract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_body(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_url(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_current(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Current, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_version(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_ts(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_comments(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Content_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CommentConnection)
	fc.Result = res
	return ec.marshalOCommentConnection2ᚖmsᚗapiᚋtypesᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_tags(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Content_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TagConnection)
	fc.Result = res
	return ec.marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Content_keywords(ctx context.Context, field graphql.CollectedField, obj *types.Content) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Capital(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Continent(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Continent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Country_Name(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_DS(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Dial(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_EDGAR(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edgar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_FIFA(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fifa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_FIPS(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fips, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_GAUL(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gaul, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Geo_Name_ID(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeoNameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_IOC(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ioc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO3166_1_Alpha_2(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso3166_1Alpha2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO3166_1_Alpha_3(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso3166_1Alpha3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO4217_Currency_Alphabetic_Code(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso4217CurrencyAlphabeticCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO4217_Currency_Country_Name(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso4217CurrencyCountryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO4217_Currency_Minor_Unit(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso4217CurrencyMinorUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO4217_Currency_Name(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso4217CurrencyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ISO4217_Currency_Numeric_Code(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso4217CurrencyNumericCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_ITU(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Itu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Is_Independent(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsIndependent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Languages(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Languages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_M49(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.M49, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_MARC(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_Official_Name_English(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficialNameEnglish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_TLD(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tld, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Country_WMO(ctx context.Context, field graphql.CollectedField, obj *types.Country) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wmo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CountryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CountryEdge)
	fc.Result = res
	return ec.marshalNCountryEdge2ᚕᚖmsᚗapiᚋtypesᚐCountryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.CountryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚕᚖmsᚗapiᚋtypesᚐCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CountryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.CountryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CountryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _CountryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CountryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_identifier(ctx context.Context, field graphql.CollectedField, obj *types.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_refresh_token(ctx context.Context, field graphql.CollectedField, obj *types.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_symbol(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_name(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_symbol_native(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SymbolNative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_decimal_digits(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecimalDigits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_rounding(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rounding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_code(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_name_plural(ctx context.Context, field graphql.CollectedField, obj *types.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Currency",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePlural, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CurrencyEdge)
	fc.Result = res
	return ec.marshalNCurrencyEdge2ᚕᚖmsᚗapiᚋtypesᚐCurrencyEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚕᚖmsᚗapiᚋtypesᚐCurrencyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrencyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CurrencyEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrencyEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_id(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_name(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_primary(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_type(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.VerifiableType)
	fc.Result = res
	return ec.marshalNVerifiableType2msᚗapiᚋtypesᚐVerifiableType(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_identifier(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_owner(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_brand(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_os(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Os, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_active(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_verified(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_tokens(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.DeviceToken)
	fc.Result = res
	return ec.marshalNDeviceToken2ᚕᚖmsᚗapiᚋtypesᚐDeviceToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Device_ts(ctx context.Context, field graphql.CollectedField, obj *types.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.DeviceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.DeviceEdge)
	fc.Result = res
	return ec.marshalNDeviceEdge2ᚕᚖmsᚗapiᚋtypesᚐDeviceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.DeviceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚕᚖmsᚗapiᚋtypesᚐDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.DeviceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.DeviceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.DeviceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.DeviceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceToken_type(ctx context.Context, field graphql.CollectedField, obj *types.DeviceToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DeviceTokenType)
	fc.Result = res
	return ec.marshalODeviceTokenType2ᚖmsᚗapiᚋtypesᚐDeviceTokenType(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceToken_value(ctx context.Context, field graphql.CollectedField, obj *types.DeviceToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceToken_ts(ctx context.Context, field graphql.CollectedField, obj *types.DeviceToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_name(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_primary(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_type(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.VerifiableType)
	fc.Result = res
	return ec.marshalNVerifiableType2msᚗapiᚋtypesᚐVerifiableType(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_value(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_verified(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Email_alias(ctx context.Context, field graphql.CollectedField, obj *types.Email) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_lowerBoundary(ctx context.Context, field graphql.CollectedField, obj *types.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowerBoundary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_upperBoundary(ctx context.Context, field graphql.CollectedField, obj *types.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpperBoundary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_fee(ctx context.Context, field graphql.CollectedField, obj *types.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fx_currency(ctx context.Context, field graphql.CollectedField, obj *types.Fx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fx",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fx_base_currency(ctx context.Context, field graphql.CollectedField, obj *types.Fx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fx",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fx_buy_rate(ctx context.Context, field graphql.CollectedField, obj *types.Fx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fx",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fx_sell_rate(ctx context.Context, field graphql.CollectedField, obj *types.Fx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fx",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fx_ts(ctx context.Context, field graphql.CollectedField, obj *types.Fx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fx",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FxConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.FxConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.FxEdge)
	fc.Result = res
	return ec.marshalNFxEdge2ᚕᚖmsᚗapiᚋtypesᚐFxEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FxConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.FxConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Fx)
	fc.Result = res
	return ec.marshalNFx2ᚕᚖmsᚗapiᚋtypesᚐFxᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FxConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.FxConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FxConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.FxConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _FxEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.FxEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Fx)
	fc.Result = res
	return ec.marshalNFx2ᚖmsᚗapiᚋtypesᚐFx(ctx, field.Selections, res)
}

func (ec *executionContext) _FxEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.FxEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FxEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_id(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_owner(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Owner)
	fc.Result = res
	return ec.marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_nickname(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nickname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_status(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.IdentityStatus)
	fc.Result = res
	return ec.marshalOIdentityStatus2ᚖmsᚗapiᚋtypesᚐIdentityStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_active(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_authentication(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authentication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_devices(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Device)
	fc.Result = res
	return ec.marshalNDevice2ᚕᚖmsᚗapiᚋtypesᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_ts(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Identity_credentials(ctx context.Context, field graphql.CollectedField, obj *types.Identity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Credentials)
	fc.Result = res
	return ec.marshalNCredentials2ᚖmsᚗapiᚋtypesᚐCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageAssets_safe(ctx context.Context, field graphql.CollectedField, obj *types.ImageAssets) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageAssets",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Safe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageAssets_type(ctx context.Context, field graphql.CollectedField, obj *types.ImageAssets) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageAssets",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageAssets_image(ctx context.Context, field graphql.CollectedField, obj *types.ImageAssets) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageAssets",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageAssets_svg(ctx context.Context, field graphql.CollectedField, obj *types.ImageAssets) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageAssets",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Svg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_id(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_code(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_score(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_section(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_description(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Industry_source(ctx context.Context, field graphql.CollectedField, obj *types.Industry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Industry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.IndustryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.IndustryEdge)
	fc.Result = res
	return ec.marshalNIndustryEdge2ᚕᚖmsᚗapiᚋtypesᚐIndustryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.IndustryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Industry)
	fc.Result = res
	return ec.marshalNIndustry2ᚕᚖmsᚗapiᚋtypesᚐIndustryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.IndustryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.IndustryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.IndustryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Industry)
	fc.Result = res
	return ec.marshalNIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.IndustryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndustryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestPaymentDates_day(ctx context.Context, field graphql.CollectedField, obj *types.InterestPaymentDates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestPaymentDates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestPaymentDates_month(ctx context.Context, field graphql.CollectedField, obj *types.InterestPaymentDates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestPaymentDates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestPaymentSettings_interest_payment_point(ctx context.Context, field graphql.CollectedField, obj *types.InterestPaymentSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestPaymentSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaymentPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestPaymentSettings_interest_payment_dates(ctx context.Context, field graphql.CollectedField, obj *types.InterestPaymentSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestPaymentSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaymentDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.InterestPaymentDates)
	fc.Result = res
	return ec.marshalOInterestPaymentDates2ᚕᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRate_default_value(ctx context.Context, field graphql.CollectedField, obj *types.InterestRate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRate_max_value(ctx context.Context, field graphql.CollectedField, obj *types.InterestRate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRate_min_value(ctx context.Context, field graphql.CollectedField, obj *types.InterestRate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_charge_frequency(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestChargeFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_charge_frequency_count(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestChargeFrequencyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate_review_count(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateReviewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate_review_unit(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateReviewUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate_source(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate_terms(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateTerms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_spread(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestSpread, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateSettings_interest_rate_tiers(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateTiers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.InterestRateTiers)
	fc.Result = res
	return ec.marshalOInterestRateTiers2ᚕᚖmsᚗapiᚋtypesᚐInterestRateTiers(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateTiers_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateTiers_ending_balance(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateTiers_ending_day(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndingDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestRateTiers_interest_rate(ctx context.Context, field graphql.CollectedField, obj *types.InterestRateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestRateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_days_in_year(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysInYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_interest_calculation_balance(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestCalculationBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_index_source_key(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndexSourceKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_charge_frequency(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_charge_frequency_count(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeFrequencyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_rate_review_count(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateReviewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_interest_rate_review_unit(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateReviewUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_rate_source(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_rate_terms(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateTerms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_rate_tiers(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateTiers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.RateTiers)
	fc.Result = res
	return ec.marshalNRateTiers2ᚕᚖmsᚗapiᚋtypesᚐRateTiers(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_interest_rate(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestRate)
	fc.Result = res
	return ec.marshalOInterestRate2ᚖmsᚗapiᚋtypesᚐInterestRate(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_interest_rate_settings(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestRateSettings)
	fc.Result = res
	return ec.marshalOInterestRateSettings2ᚖmsᚗapiᚋtypesᚐInterestRateSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _InterestSettings_interest_payment_settings(ctx context.Context, field graphql.CollectedField, obj *types.InterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaymentSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestPaymentSettings)
	fc.Result = res
	return ec.marshalOInterestPaymentSettings2ᚖmsᚗapiᚋtypesᚐInterestPaymentSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalControls_max_deposit_balance(ctx context.Context, field graphql.CollectedField, obj *types.InternalControls) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalControls",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDepositBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalControls_max_withdrawal_amount(ctx context.Context, field graphql.CollectedField, obj *types.InternalControls) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalControls",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxWithdrawalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalControls_recommended_deposit_amount(ctx context.Context, field graphql.CollectedField, obj *types.InternalControls) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalControls",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecommendedDepositAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalControls_target_amount(ctx context.Context, field graphql.CollectedField, obj *types.InternalControls) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InternalControls",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_longitude(ctx context.Context, field graphql.CollectedField, obj *types.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_latitude(ctx context.Context, field graphql.CollectedField, obj *types.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_id(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_owner(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Entity)
	fc.Result = res
	return ec.marshalNEntity2msᚗapiᚋtypesᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_title(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_body(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_status(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_has_read(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_delivery_mode(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.DeliveryMode)
	fc.Result = res
	return ec.marshalNDeliveryMode2msᚗapiᚋtypesᚐDeliveryMode(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_sender(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_target(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Verifiable)
	fc.Result = res
	return ec.marshalNVerifiable2msᚗapiᚋtypesᚐVerifiable(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_sent(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_ts(ctx context.Context, field graphql.CollectedField, obj *types.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.MessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.MessageEdge)
	fc.Result = res
	return ec.marshalNMessageEdge2ᚕᚖmsᚗapiᚋtypesᚐMessageEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.MessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Message)
	fc.Result = res
	return ec.marshalNMessage2ᚕᚖmsᚗapiᚋtypesᚐMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.MessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.MessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.MessageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Message)
	fc.Result = res
	return ec.marshalNMessage2ᚖmsᚗapiᚋtypesᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _MessageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.MessageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessageEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPhone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePhone(rctx, args["phone"].(string), args["device"].(types.DeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_confirmPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_confirmPhone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfirmPhone(rctx, args["token"].(string), args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_signup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_signup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Signup(rctx, args["token"].(string), args["email"].(string), args["passcode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖmsᚗapiᚋtypesᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Register(rctx, args["person"].(types.PersonInput), args["address"].(types.AddressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_intendedActivities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_intendedActivities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().IntendedActivities(rctx, args["activities"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateApplication(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyEmail(rctx, args["email"].(string), args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resendOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resendOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResendOtp(rctx, args["phone"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resendEmailMagicLInk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resendEmailMagicLInk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResendEmailMagicLInk(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["credentials"].(types.AuthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖmsᚗapiᚋtypesᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_loginWithToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_loginWithToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginWithToken(rctx, args["token"].(string), args["authType"].(types.AuthType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖmsᚗapiᚋtypesᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_refreshToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshToken(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖmsᚗapiᚋtypesᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDeviceToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDeviceToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeviceToken(rctx, args["token"].([]*types.DeviceTokenInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPasscode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPasscode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPasscode(rctx, args["token"].(string), args["email"].(string), args["passcode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestPasscodeReset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestPasscodeReset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestPasscodeReset(rctx, args["email"].(string), args["device"].(types.DeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_confirmPasscodeResetOtp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_confirmPasscodeResetOtp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfirmPasscodeResetOtp(rctx, args["email"].(string), args["otp"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitApplication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitApplication(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_acceptTerms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_acceptTerms_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AcceptTerms(rctx, args["documents"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateValidationStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateValidationStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateValidationStatus(rctx, args["validation"].(string), args["status"].(types.State), args["message"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitProof(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitProof_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitProof(rctx, args["proof"].(types.SubmitProofInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTransactionPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTransactionPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTransactionPassword(rctx, args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccount(rctx, args["product"].(types.ProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPayee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPayee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePayee(rctx, args["payee"].(types.PayeeInput), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePayee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePayee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePayee(rctx, args["payee"].(string), args["payee_input"].(*types.PayeeInput), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPayeeAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPayeeAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPayeeAccount(rctx, args["payee"].(string), args["payee_account"].(types.PayeeAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePayeeAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePayeeAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePayeeAccount(rctx, args["payee"].(string), args["payee_account"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resubmit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resubmit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Resubmit(rctx, args["reports"].([]*types.ReportInput), args["message"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resubmitReports(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resubmitReports_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResubmitReports(rctx, args["reports"].([]*types.ReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePayment(rctx, args["payment"].(types.PaymentInput), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_validateBVN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_validateBVN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ValidateBvn(rctx, args["bvn"].(string), args["phone"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestOtp(rctx, args["type"].(types.DeliveryMode), args["target"].(string), args["expireTime"].(*int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyOtp(rctx, args["target"].(string), args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_validateEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_validateEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ValidateEmail(rctx, args["email"].(string), args["device"].(types.DeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_validateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_validateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ValidateUser(rctx, args["user"].(types.ValidateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestTransactionPasscodeReset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestTransactionPasscodeReset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestTransactionPasscodeReset(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetTransactionPasscode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetTransactionPasscode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetTransactionPasscode(rctx, args["email"].(string), args["currentPasscode"].(string), args["newPasscode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setDevicePreference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setDevicePreference_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetDevicePreference(rctx, args["type"].(types.DevicePreferenceType), args["status"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _OpeningBalance_default_value(ctx context.Context, field graphql.CollectedField, obj *types.OpeningBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OpeningBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _OpeningBalance_max(ctx context.Context, field graphql.CollectedField, obj *types.OpeningBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OpeningBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _OpeningBalance_min(ctx context.Context, field graphql.CollectedField, obj *types.OpeningBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OpeningBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgLocation_continent(ctx context.Context, field graphql.CollectedField, obj *types.OrgLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Continent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgLocation_country(ctx context.Context, field graphql.CollectedField, obj *types.OrgLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgLocation_state(ctx context.Context, field graphql.CollectedField, obj *types.OrgLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgLocation_city(ctx context.Context, field graphql.CollectedField, obj *types.OrgLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgLocation_country_code(ctx context.Context, field graphql.CollectedField, obj *types.OrgLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_id(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_name(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_keywords(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_description(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_domain(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_banner(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_revenue(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_language(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_raised(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raised, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_employees(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_email(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_ts(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_addresses(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚕᚖmsᚗapiᚋtypesᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_location(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OrgLocation)
	fc.Result = res
	return ec.marshalOOrgLocation2ᚖmsᚗapiᚋtypesᚐOrgLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_industries(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Industry)
	fc.Result = res
	return ec.marshalNIndustry2ᚕᚖmsᚗapiᚋtypesᚐIndustry(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_social(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Social, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Social)
	fc.Result = res
	return ec.marshalOSocial2ᚖmsᚗapiᚋtypesᚐSocial(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_image_assets(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAssets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ImageAssets)
	fc.Result = res
	return ec.marshalNImageAssets2ᚕᚖmsᚗapiᚋtypesᚐImageAssets(ctx, field.Selections, res)
}

func (ec *executionContext) _Organisation_identities(ctx context.Context, field graphql.CollectedField, obj *types.Organisation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.OrganisationEdge)
	fc.Result = res
	return ec.marshalNOrganisationEdge2ᚕᚖmsᚗapiᚋtypesᚐOrganisationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚕᚖmsᚗapiᚋtypesᚐOrganisationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganisationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.OrganisationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganisationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftInterestSettings_interest_rate_settings(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftInterestSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftInterestSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRateSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestRateSettings)
	fc.Result = res
	return ec.marshalOInterestRateSettings2ᚖmsᚗapiᚋtypesᚐInterestRateSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSetting_allow_overdraft(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowOverdraft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSetting_allow_technical_overdraft(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowTechnicalOverdraft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSetting_max_limit(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSetting_interest_settings(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestSettings)
	fc.Result = res
	return ec.marshalOInterestSettings2ᚖmsᚗapiᚋtypesᚐInterestSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSettings_allow_overdraft(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowOverdraft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSettings_overdraft_expiry_date(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OverdraftSettings_overdraft_limit(ctx context.Context, field graphql.CollectedField, obj *types.OverdraftSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OverdraftSettings",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *types.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *types.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *types.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *types.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_id(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_owner(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_name(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_avatar(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_ts(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Payee_accounts(ctx context.Context, field graphql.CollectedField, obj *types.Payee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Accounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PayeeAccount)
	fc.Result = res
	return ec.marshalNPayeeAccount2ᚕᚖmsᚗapiᚋtypesᚐPayeeAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_id(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_name(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_currency(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_account_number(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_sort_code(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_iban(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_swift_bic(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwiftBic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_bank_code(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_routing_number(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeAccount_phone_number(ctx context.Context, field graphql.CollectedField, obj *types.PayeeAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.PayeeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PayeeEdge)
	fc.Result = res
	return ec.marshalNPayeeEdge2ᚕᚖmsᚗapiᚋtypesᚐPayeeEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.PayeeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Payee)
	fc.Result = res
	return ec.marshalNPayee2ᚕᚖmsᚗapiᚋtypesᚐPayeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.PayeeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.PayeeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.PayeeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Payee)
	fc.Result = res
	return ec.marshalNPayee2ᚖmsᚗapiᚋtypesᚐPayee(ctx, field.Selections, res)
}

func (ec *executionContext) _PayeeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.PayeeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayeeEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_id(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_idempotency_key(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdempotencyKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_owner(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Owner)
	fc.Result = res
	return ec.marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_charge(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_reference(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_status(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.State)
	fc.Result = res
	return ec.marshalOState2ᚖmsᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_image(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_notes(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_quote(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Quote)
	fc.Result = res
	return ec.marshalOQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_tags(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖmsᚗapiᚋtypesᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_beneficiary(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Beneficiary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Beneficiary)
	fc.Result = res
	return ec.marshalNBeneficiary2ᚖmsᚗapiᚋtypesᚐBeneficiary(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_funding_source(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_currency(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_funding_amount(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_ts(ctx context.Context, field graphql.CollectedField, obj *types.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.PaymentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PaymentEdge)
	fc.Result = res
	return ec.marshalNPaymentEdge2ᚕᚖmsᚗapiᚋtypesᚐPaymentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.PaymentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚕᚖmsᚗapiᚋtypesᚐPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.PaymentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.PaymentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.PaymentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚖmsᚗapiᚋtypesᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.PaymentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_id(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_title(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_first_name(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_last_name(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_middle_name(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_dob(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_status(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PersonStatus)
	fc.Result = res
	return ec.marshalOPersonStatus2ᚖmsᚗapiᚋtypesᚐPersonStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_employer(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_bvn(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bvn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_ts(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_country_residence(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryResidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_nationality(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_emails(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚕᚖmsᚗapiᚋtypesᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_phones(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚕᚖmsᚗapiᚋtypesᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_identities(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_addresses(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚕᚖmsᚗapiᚋtypesᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_activities(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕᚖmsᚗapiᚋtypesᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_cdd(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cdd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Cdd)
	fc.Result = res
	return ec.marshalOCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_onboarding_status(ctx context.Context, field graphql.CollectedField, obj *types.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnboardingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OnboardingCheckPoint)
	fc.Result = res
	return ec.marshalOOnboardingCheckPoint2ᚖmsᚗapiᚋtypesᚐOnboardingCheckPoint(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.PersonConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PersonEdge)
	fc.Result = res
	return ec.marshalNPersonEdge2ᚕᚖmsᚗapiᚋtypesᚐPersonEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.PersonConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚕᚖmsᚗapiᚋtypesᚐPersonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.PersonConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.PersonConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.PersonEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.PersonEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PersonEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_name(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_primary(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_type(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.VerifiableType)
	fc.Result = res
	return ec.marshalNVerifiableType2msᚗapiᚋtypesᚐVerifiableType(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_value(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_verified(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Phone_carrier(ctx context.Context, field graphql.CollectedField, obj *types.Phone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *types.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_identification(ctx context.Context, field graphql.CollectedField, obj *types.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_scheme(ctx context.Context, field graphql.CollectedField, obj *types.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scheme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_ts(ctx context.Context, field graphql.CollectedField, obj *types.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_details(ctx context.Context, field graphql.CollectedField, obj *types.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ProductDetails)
	fc.Result = res
	return ec.marshalNProductDetails2ᚖmsᚗapiᚋtypesᚐProductDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ProductConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ProductEdge)
	fc.Result = res
	return ec.marshalNProductEdge2ᚕᚖmsᚗapiᚋtypesᚐProductEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.ProductConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖmsᚗapiᚋtypesᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ProductConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.ProductConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductControl_dormancy_period_days(ctx context.Context, field graphql.CollectedField, obj *types.ProductControl) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductControl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DormancyPeriodDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductControl_max_withdrawal_amount(ctx context.Context, field graphql.CollectedField, obj *types.ProductControl) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductControl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxWithdrawalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductControl_recommended_deposit_amount(ctx context.Context, field graphql.CollectedField, obj *types.ProductControl) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductControl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecommendedDepositAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductControl_opening_balance(ctx context.Context, field graphql.CollectedField, obj *types.ProductControl) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductControl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpeningBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OpeningBalance)
	fc.Result = res
	return ec.marshalOOpeningBalance2ᚖmsᚗapiᚋtypesᚐOpeningBalance(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_category(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_type(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_name(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_state(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_currency(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_notes(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_credit_requirement(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditRequirement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_withholding_tax_enabled(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithholdingTaxEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_allow_offset(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowOffset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_product_templates(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ProductTemplates)
	fc.Result = res
	return ec.marshalNProductTemplates2ᚕᚖmsᚗapiᚋtypesᚐProductTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_product_fees(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductFees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ProductFees)
	fc.Result = res
	return ec.marshalNProductFees2ᚕᚖmsᚗapiᚋtypesᚐProductFees(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_product_control(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductControl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProductControl)
	fc.Result = res
	return ec.marshalOProductControl2ᚖmsᚗapiᚋtypesᚐProductControl(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_product_maturity(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductMaturity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProductMaturity)
	fc.Result = res
	return ec.marshalOProductMaturity2ᚖmsᚗapiᚋtypesᚐProductMaturity(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_overdraft_setting(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdraftSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OverdraftSetting)
	fc.Result = res
	return ec.marshalOOverdraftSetting2ᚖmsᚗapiᚋtypesᚐOverdraftSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_interest_setting(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProductInterestSetting)
	fc.Result = res
	return ec.marshalOProductInterestSetting2ᚖmsᚗapiᚋtypesᚐProductInterestSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductDetails_product_setting(ctx context.Context, field graphql.CollectedField, obj *types.ProductDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProductSetting)
	fc.Result = res
	return ec.marshalOProductSetting2ᚖmsᚗapiᚋtypesᚐProductSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ProductEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ProductEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_amount(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_calculation_method(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CalculationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_apply_date_method(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyDateMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_creation_date(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_fee_application(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeeApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_last_modified(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_name(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_state(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_trigger(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trigger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductFees_accounting_rules(ctx context.Context, field graphql.CollectedField, obj *types.ProductFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountingRules)
	fc.Result = res
	return ec.marshalNAccountingRules2ᚕᚖmsᚗapiᚋtypesᚐAccountingRules(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_collect_interest_when_locked(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectInterestWhenLocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_days_in_year(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysInYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_interest_calculation_balance(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestCalculationBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_interest_paid_into_account(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaidIntoAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_interest_payment_point(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaymentPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_maximum_balance(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_rate_setting(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RateSetting)
	fc.Result = res
	return ec.marshalORateSetting2ᚖmsᚗapiᚋtypesᚐRateSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductInterestSetting_interest_payment_dates(ctx context.Context, field graphql.CollectedField, obj *types.ProductInterestSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductInterestSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestPaymentDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.InterestPaymentDates)
	fc.Result = res
	return ec.marshalNInterestPaymentDates2ᚕᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductMaturity_unit(ctx context.Context, field graphql.CollectedField, obj *types.ProductMaturity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductMaturity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductMaturity_default_value(ctx context.Context, field graphql.CollectedField, obj *types.ProductMaturity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductMaturity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductMaturity_max(ctx context.Context, field graphql.CollectedField, obj *types.ProductMaturity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductMaturity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductMaturity_min(ctx context.Context, field graphql.CollectedField, obj *types.ProductMaturity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductMaturity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSetting_accounting_method(ctx context.Context, field graphql.CollectedField, obj *types.ProductSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSetting_interest_accounting(ctx context.Context, field graphql.CollectedField, obj *types.ProductSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestAccounting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSetting_accounting_rules(ctx context.Context, field graphql.CollectedField, obj *types.ProductSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountingRules)
	fc.Result = res
	return ec.marshalNAccountingRules2ᚕᚖmsᚗapiᚋtypesᚐAccountingRules(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductTemplates_creation_date(ctx context.Context, field graphql.CollectedField, obj *types.ProductTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductTemplates_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.ProductTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductTemplates_last_modified_date(ctx context.Context, field graphql.CollectedField, obj *types.ProductTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductTemplates_name(ctx context.Context, field graphql.CollectedField, obj *types.ProductTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductTemplates_type(ctx context.Context, field graphql.CollectedField, obj *types.ProductTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_id(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_type(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.ProofType)
	fc.Result = res
	return ec.marshalNProofType2msᚗapiᚋtypesᚐProofType(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_data(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSON2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_review(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ReportReviewStatus)
	fc.Result = res
	return ec.marshalOReportReviewStatus2ᚖmsᚗapiᚋtypesᚐReportReviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_status(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Proof_ts(ctx context.Context, field graphql.CollectedField, obj *types.Proof) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Proof",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ProofConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ProofEdge)
	fc.Result = res
	return ec.marshalNProofEdge2ᚕᚖmsᚗapiᚋtypesᚐProofEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.ProofConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Proof)
	fc.Result = res
	return ec.marshalNProof2ᚕᚖmsᚗapiᚋtypesᚐProofᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ProofConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.ProofConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ProofEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Proof)
	fc.Result = res
	return ec.marshalNProof2ᚖmsᚗapiᚋtypesᚐProof(ctx, field.Selections, res)
}

func (ec *executionContext) _ProofEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ProofEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProofEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_meStaff(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MeStaff(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖmsᚗapiᚋtypesᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_person(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_person_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Person(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_people(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_people_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().People(rctx, args["keywords"].(*string), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["onboarded"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PersonConnection)
	fc.Result = res
	return ec.marshalOPersonConnection2ᚖmsᚗapiᚋtypesᚐPersonConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Identity(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Identity)
	fc.Result = res
	return ec.marshalOIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_identities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Identities(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.Identity)
	fc.Result = res
	return ec.marshalOIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checkEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckEmail(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_address(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_address_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Address(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_addresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Addresses(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddressConnection)
	fc.Result = res
	return ec.marshalOAddressConnection2ᚖmsᚗapiᚋtypesᚐAddressConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_addressLookup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_addressLookup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddressLookup(rctx, args["text"].(*string), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddressConnection)
	fc.Result = res
	return ec.marshalOAddressConnection2ᚖmsᚗapiᚋtypesᚐAddressConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_device(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_device_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Device(rctx, args["identifier"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_devices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_devices_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Devices(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DeviceConnection)
	fc.Result = res
	return ec.marshalODeviceConnection2ᚖmsᚗapiᚋtypesᚐDeviceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_auths(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Auths(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.Auth)
	fc.Result = res
	return ec.marshalOAuth2ᚕᚖmsᚗapiᚋtypesᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organisation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organisation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organisation(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organisations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organisations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organisations(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OrganisationConnection)
	fc.Result = res
	return ec.marshalOOrganisationConnection2ᚖmsᚗapiᚋtypesᚐOrganisationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_verification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_verification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Verification(rctx, args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Verification)
	fc.Result = res
	return ec.marshalOVerification2ᚖmsᚗapiᚋtypesᚐVerification(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_verifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_verifications_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Verifications(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.VerificationConnection)
	fc.Result = res
	return ec.marshalOVerificationConnection2ᚖmsᚗapiᚋtypesᚐVerificationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_country(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_country_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Country(rctx, args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_countries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_countries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Countries(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CountryConnection)
	fc.Result = res
	return ec.marshalOCountryConnection2ᚖmsᚗapiᚋtypesᚐCountryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_currency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_currency_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Currency(rctx, args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_currencies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_currencies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Currencies(rctx, args["supported"].(*bool), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CurrencyConnection)
	fc.Result = res
	return ec.marshalOCurrencyConnection2ᚖmsᚗapiᚋtypesᚐCurrencyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_industry(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_industry_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Industry(rctx, args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Industry)
	fc.Result = res
	return ec.marshalOIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_industries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_industries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Industries(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.IndustryConnection)
	fc.Result = res
	return ec.marshalOIndustryConnection2ᚖmsᚗapiᚋtypesᚐIndustryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_activity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_activity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Activity(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖmsᚗapiᚋtypesᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_activities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_activities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Activities(rctx, args["supported"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕᚖmsᚗapiᚋtypesᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_message(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_message_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Message(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖmsᚗapiᚋtypesᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_messages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_messages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Messages(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.MessageConnection)
	fc.Result = res
	return ec.marshalOMessageConnection2ᚖmsᚗapiᚋtypesᚐMessageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_quote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_quote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Quote(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Quote)
	fc.Result = res
	return ec.marshalOQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_quotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_quotes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Quotes(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.QuoteConnection)
	fc.Result = res
	return ec.marshalOQuoteConnection2ᚖmsᚗapiᚋtypesᚐQuoteConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_price(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_price_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Price(rctx, args["pair"].(*string), args["ts"].(*int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Fx)
	fc.Result = res
	return ec.marshalOFx2ᚖmsᚗapiᚋtypesᚐFx(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_prices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_prices_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Prices(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.FxConnection)
	fc.Result = res
	return ec.marshalOFxConnection2ᚖmsᚗapiᚋtypesᚐFxConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tag(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Task)
	fc.Result = res
	return ec.marshalOTask2ᚖmsᚗapiᚋtypesᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tags(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TagConnection)
	fc.Result = res
	return ec.marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cdd(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cdd_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cdd(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Cdd)
	fc.Result = res
	return ec.marshalOCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cdds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cdds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cdds(rctx, args["keywords"].(*string), args["status"].([]types.State), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CDDConnection)
	fc.Result = res
	return ec.marshalOCDDConnection2ᚖmsᚗapiᚋtypesᚐCDDConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_validation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_validation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Validation(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Validation)
	fc.Result = res
	return ec.marshalOValidation2ᚖmsᚗapiᚋtypesᚐValidation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_validations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_validations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Validations(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ValidationConnection)
	fc.Result = res
	return ec.marshalOValidationConnection2ᚖmsᚗapiᚋtypesᚐValidationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Check(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Check)
	fc.Result = res
	return ec.marshalOCheck2ᚖmsᚗapiᚋtypesᚐCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Checks(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CheckConnection)
	fc.Result = res
	return ec.marshalOCheckConnection2ᚖmsᚗapiᚋtypesᚐCheckConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_screen(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_screen_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Screen(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Screen)
	fc.Result = res
	return ec.marshalOScreen2ᚖmsᚗapiᚋtypesᚐScreen(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_screens(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_screens_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Screens(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ScreenConnection)
	fc.Result = res
	return ec.marshalOScreenConnection2ᚖmsᚗapiᚋtypesᚐScreenConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Report(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Report)
	fc.Result = res
	return ec.marshalOReport2ᚖmsᚗapiᚋtypesᚐReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_reports(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_reports_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Reports(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ReportConnection)
	fc.Result = res
	return ec.marshalOReportConnection2ᚖmsᚗapiᚋtypesᚐReportConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_proof(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_proof_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Proof(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Proof)
	fc.Result = res
	return ec.marshalOProof2ᚖmsᚗapiᚋtypesᚐProof(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_proofs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_proofs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Proofs(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProofConnection)
	fc.Result = res
	return ec.marshalOProofConnection2ᚖmsᚗapiᚋtypesᚐProofConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_task(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_task_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Task(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Task)
	fc.Result = res
	return ec.marshalOTask2ᚖmsᚗapiᚋtypesᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tasks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tasks(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TaskConnection)
	fc.Result = res
	return ec.marshalOTaskConnection2ᚖmsᚗapiᚋtypesᚐTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Comment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚖmsᚗapiᚋtypesᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Comments(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CommentConnection)
	fc.Result = res
	return ec.marshalOCommentConnection2ᚖmsᚗapiᚋtypesᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_product_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Product(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_products_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ProductConnection)
	fc.Result = res
	return ec.marshalOProductConnection2ᚖmsᚗapiᚋtypesᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_account_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Account(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalOAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accounts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Accounts(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountConnection)
	fc.Result = res
	return ec.marshalOAccountConnection2ᚖmsᚗapiᚋtypesᚐAccountConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payee(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Payee)
	fc.Result = res
	return ec.marshalOPayee2ᚖmsᚗapiᚋtypesᚐPayee(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payees_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payees(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PayeeConnection)
	fc.Result = res
	return ec.marshalOPayeeConnection2ᚖmsᚗapiᚋtypesᚐPayeeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖmsᚗapiᚋtypesᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payments(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["filter"].(*types.PaymentFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PaymentConnection)
	fc.Result = res
	return ec.marshalOPaymentConnection2ᚖmsᚗapiᚋtypesᚐPaymentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_transaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_transaction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Transaction(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖmsᚗapiᚋtypesᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_transactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_transactions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Transactions(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["account"].(string), args["payments"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransactionConnection)
	fc.Result = res
	return ec.marshalOTransactionConnection2ᚖmsᚗapiᚋtypesᚐTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fx(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fx_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Fx(rctx, args["currency"].(string), args["base_currency"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Fx)
	fc.Result = res
	return ec.marshalOFx2ᚖmsᚗapiᚋtypesᚐFx(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_transferFees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_transferFees_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TransferFees(rctx, args["currency"].(string), args["base_currency"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransferFees)
	fc.Result = res
	return ec.marshalOTransferFees2ᚖmsᚗapiᚋtypesᚐTransferFees(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_acceptance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_acceptance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Acceptance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Acceptance)
	fc.Result = res
	return ec.marshalOAcceptance2ᚖmsᚗapiᚋtypesᚐAcceptance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_acceptances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_acceptances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Acceptances(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AcceptanceConnection)
	fc.Result = res
	return ec.marshalOAcceptanceConnection2ᚖmsᚗapiᚋtypesᚐAcceptanceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.Node)
	fc.Result = res
	return ec.marshalONode2msᚗapiᚋtypesᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOnfidoSDKToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOnfidoSDKToken(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_id(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_has_expiry(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasExpiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_expires(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expires, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_ts(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_fee(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Fee)
	fc.Result = res
	return ec.marshalNFee2ᚖmsᚗapiᚋtypesᚐFee(ctx, field.Selections, res)
}

func (ec *executionContext) _Quote_fx(ctx context.Context, field graphql.CollectedField, obj *types.Quote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fx, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Fx)
	fc.Result = res
	return ec.marshalOFx2ᚖmsᚗapiᚋtypesᚐFx(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.QuoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.QuoteEdge)
	fc.Result = res
	return ec.marshalNQuoteEdge2ᚕᚖmsᚗapiᚋtypesᚐQuoteEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.QuoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Quote)
	fc.Result = res
	return ec.marshalNQuote2ᚕᚖmsᚗapiᚋtypesᚐQuoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.QuoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.QuoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.QuoteEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Quote)
	fc.Result = res
	return ec.marshalNQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx, field.Selections, res)
}

func (ec *executionContext) _QuoteEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.QuoteEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuoteEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_accrue_after_maturity(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccrueAfterMaturity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_index_source_key(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndexSourceKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_charge_frequency(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_charge_frequency_count(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeFrequencyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_rate_source(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_rate_terms(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateTerms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_rate_tiers(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateTiers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.RateTiers)
	fc.Result = res
	return ec.marshalNRateTiers2ᚕᚖmsᚗapiᚋtypesᚐRateTiers(ctx, field.Selections, res)
}

func (ec *executionContext) _RateSetting_interest_rate(ctx context.Context, field graphql.CollectedField, obj *types.RateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.InterestRate)
	fc.Result = res
	return ec.marshalOInterestRate2ᚖmsᚗapiᚋtypesᚐInterestRate(ctx, field.Selections, res)
}

func (ec *executionContext) _RateTiers_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.RateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RateTiers_ending_balance(ctx context.Context, field graphql.CollectedField, obj *types.RateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndingBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RateTiers_ending_day(ctx context.Context, field graphql.CollectedField, obj *types.RateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndingDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RateTiers_interest_rate(ctx context.Context, field graphql.CollectedField, obj *types.RateTiers) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RateTiers",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_id(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_data(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSON2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_status(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_ts(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Report_review(ctx context.Context, field graphql.CollectedField, obj *types.Report) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Report",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ReportReviewStatus)
	fc.Result = res
	return ec.marshalOReportReviewStatus2ᚖmsᚗapiᚋtypesᚐReportReviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ReportConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ReportEdge)
	fc.Result = res
	return ec.marshalNReportEdge2ᚕᚖmsᚗapiᚋtypesᚐReportEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.ReportConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Report)
	fc.Result = res
	return ec.marshalNReport2ᚕᚖmsᚗapiᚋtypesᚐReportᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ReportConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.ReportConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ReportEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Report)
	fc.Result = res
	return ec.marshalNReport2ᚖmsᚗapiᚋtypesᚐReport(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ReportEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportReviewStatus_resubmit(ctx context.Context, field graphql.CollectedField, obj *types.ReportReviewStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportReviewStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ReportReviewStatus_message(ctx context.Context, field graphql.CollectedField, obj *types.ReportReviewStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReportReviewStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Response_message(ctx context.Context, field graphql.CollectedField, obj *types.Response) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Response_success(ctx context.Context, field graphql.CollectedField, obj *types.Response) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Response_code(ctx context.Context, field graphql.CollectedField, obj *types.Response) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Response_token(ctx context.Context, field graphql.CollectedField, obj *types.Response) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Screen_id(ctx context.Context, field graphql.CollectedField, obj *types.Screen) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Screen",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Screen_data(ctx context.Context, field graphql.CollectedField, obj *types.Screen) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Screen",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSON2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Screen_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Screen) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Screen",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Screen_status(ctx context.Context, field graphql.CollectedField, obj *types.Screen) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Screen",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Screen_ts(ctx context.Context, field graphql.CollectedField, obj *types.Screen) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Screen",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ScreenConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ScreenEdge)
	fc.Result = res
	return ec.marshalNScreenEdge2ᚕᚖmsᚗapiᚋtypesᚐScreenEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.ScreenConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Screen)
	fc.Result = res
	return ec.marshalNScreen2ᚕᚖmsᚗapiᚋtypesᚐScreenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ScreenConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.ScreenConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ScreenEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Screen)
	fc.Result = res
	return ec.marshalNScreen2ᚖmsᚗapiᚋtypesᚐScreen(ctx, field.Selections, res)
}

func (ec *executionContext) _ScreenEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ScreenEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScreenEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_youtube(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Youtube, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_github(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Github, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_facebook(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_pinterest(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pinterest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_instagram(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instagram, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_linkedin(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linkedin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_medium(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_crunchbase(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Crunchbase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Social_twitter(ctx context.Context, field graphql.CollectedField, obj *types.Social) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_id(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_first_name(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_last_name(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_status(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.StaffStatus)
	fc.Result = res
	return ec.marshalNStaffStatus2msᚗapiᚋtypesᚐStaffStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_emails(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚕᚖmsᚗapiᚋtypesᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_phones(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚕᚖmsᚗapiᚋtypesᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_identities(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Identity)
	fc.Result = res
	return ec.marshalNIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_ts(ctx context.Context, field graphql.CollectedField, obj *types.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_cdds(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_cdds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().Cdds(rctx, args["keywords"].(*string), args["status"].([]types.State), args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *types.CDDConnection)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOCDDConnection2ᚖmsᚗapiᚋtypesᚐCDDConnection(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_cdd(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_cdd_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().Cdd(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *types.Cdd)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_accounts(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_accounts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().Accounts(rctx, args["first"].(*int64), args["after"].(*string), args["last"].(*int64), args["before"].(*string), args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *types.AccountConnection)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOAccountConnection2ᚖmsᚗapiᚋtypesᚐAccountConnection(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *types.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *types.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_ts(ctx context.Context, field graphql.CollectedField, obj *types.Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TagConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.TagConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.TagEdge)
	fc.Result = res
	return ec.marshalNTagEdge2ᚕᚖmsᚗapiᚋtypesᚐTagEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TagConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.TagConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖmsᚗapiᚋtypesᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TagConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.TagConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TagConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.TagConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TagEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.TagEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖmsᚗapiᚋtypesᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _TagEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.TagEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_id(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_reporter(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_assignee(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_approver(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Person)
	fc.Result = res
	return ec.marshalOPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_notes(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_stage(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_approved(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_version(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_ts(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_comments(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Task_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CommentConnection)
	fc.Result = res
	return ec.marshalOCommentConnection2ᚖmsᚗapiᚋtypesᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Task_tags(ctx context.Context, field graphql.CollectedField, obj *types.Task) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Task_tags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TagConnection)
	fc.Result = res
	return ec.marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.TaskConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.TaskEdge)
	fc.Result = res
	return ec.marshalNTaskEdge2ᚕᚖmsᚗapiᚋtypesᚐTaskEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.TaskConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Task)
	fc.Result = res
	return ec.marshalNTask2ᚕᚖmsᚗapiᚋtypesᚐTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.TaskConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.TaskConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.TaskEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Task)
	fc.Result = res
	return ec.marshalNTask2ᚖmsᚗapiᚋtypesᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.TaskEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Transaction_id(ctx context.Context, field graphql.CollectedField, obj *types.Transaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Transaction_account(ctx context.Context, field graphql.CollectedField, obj *types.Transaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Transaction_ts(ctx context.Context, field graphql.CollectedField, obj *types.Transaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Transaction_transaction_data(ctx context.Context, field graphql.CollectedField, obj *types.Transaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransactionData)
	fc.Result = res
	return ec.marshalOTransactionData2ᚖmsᚗapiᚋtypesᚐTransactionData(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.TransactionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.TransactionEdge)
	fc.Result = res
	return ec.marshalNTransactionEdge2ᚕᚖmsᚗapiᚋtypesᚐTransactionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.TransactionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Transaction)
	fc.Result = res
	return ec.marshalNTransaction2ᚕᚖmsᚗapiᚋtypesᚐTransactionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.TransactionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.TransactionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_id(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_amount(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_booking_date(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_creation_date(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_currency_code(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_encoded_key(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncodedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_external_id(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_notes(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_parent_account_key(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentAccountKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_payment_order_id(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_type(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_user_key(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_value_date(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_transfer_details(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransferDetails)
	fc.Result = res
	return ec.marshalOTransferDetails2ᚖmsᚗapiᚋtypesᚐTransferDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_fees(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*types.TransactionFee)
	fc.Result = res
	return ec.marshalOTransactionFee2ᚕᚖmsᚗapiᚋtypesᚐTransactionFee(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_affected_amounts(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedAmounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AffectedAmounts)
	fc.Result = res
	return ec.marshalOAffectedAmounts2ᚖmsᚗapiᚋtypesᚐAffectedAmounts(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionData_account_balances(ctx context.Context, field graphql.CollectedField, obj *types.TransactionData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountBalances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountBalances)
	fc.Result = res
	return ec.marshalOAccountBalances2ᚖmsᚗapiᚋtypesᚐAccountBalances(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.TransactionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Transaction)
	fc.Result = res
	return ec.marshalNTransaction2ᚖmsᚗapiᚋtypesᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.TransactionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionFee_Amount(ctx context.Context, field graphql.CollectedField, obj *types.TransactionFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionFee_Name(ctx context.Context, field graphql.CollectedField, obj *types.TransactionFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionFee_PredefinedFeeKey(ctx context.Context, field graphql.CollectedField, obj *types.TransactionFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PredefinedFeeKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionFee_TaxAmount(ctx context.Context, field graphql.CollectedField, obj *types.TransactionFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _TransactionFee_Trigger(ctx context.Context, field graphql.CollectedField, obj *types.TransactionFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransactionFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trigger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferDetails_linked_loan_transaction_key(ctx context.Context, field graphql.CollectedField, obj *types.TransferDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedLoanTransactionKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferFees_currency(ctx context.Context, field graphql.CollectedField, obj *types.TransferFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferFees_base_currency(ctx context.Context, field graphql.CollectedField, obj *types.TransferFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferFees_fees(ctx context.Context, field graphql.CollectedField, obj *types.TransferFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Fee)
	fc.Result = res
	return ec.marshalNFee2ᚕᚖmsᚗapiᚋtypesᚐFeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferFees_ts(ctx context.Context, field graphql.CollectedField, obj *types.TransferFees) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferFees",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_id(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_validation_type(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.ValidationType)
	fc.Result = res
	return ec.marshalNValidationType2msᚗapiᚋtypesᚐValidationType(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_applicant(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applicant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Owner)
	fc.Result = res
	return ec.marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_data(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.ValidationData)
	fc.Result = res
	return ec.marshalNValidationData2msᚗapiᚋtypesᚐValidationData(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_organisation(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_status(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.State)
	fc.Result = res
	return ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_approved(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_ts(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Validation_actions(ctx context.Context, field graphql.CollectedField, obj *types.Validation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Validation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Action)
	fc.Result = res
	return ec.marshalNAction2ᚕᚖmsᚗapiᚋtypesᚐActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ValidationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ValidationEdge)
	fc.Result = res
	return ec.marshalNValidationEdge2ᚕᚖmsᚗapiᚋtypesᚐValidationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.ValidationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Validation)
	fc.Result = res
	return ec.marshalNValidation2ᚕᚖmsᚗapiᚋtypesᚐValidationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ValidationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.ValidationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ValidationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Validation)
	fc.Result = res
	return ec.marshalNValidation2ᚖmsᚗapiᚋtypesᚐValidation(ctx, field.Selections, res)
}

func (ec *executionContext) _ValidationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ValidationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ValidationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VariableFee_base_rate(ctx context.Context, field graphql.CollectedField, obj *types.VariableFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VariableFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VariableFee_discount(ctx context.Context, field graphql.CollectedField, obj *types.VariableFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VariableFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VariableFee_applied_rate(ctx context.Context, field graphql.CollectedField, obj *types.VariableFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VariableFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VariableFee_partner(ctx context.Context, field graphql.CollectedField, obj *types.VariableFee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VariableFee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_id(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_code(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_target(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Verifiable)
	fc.Result = res
	return ec.marshalNVerifiable2msᚗapiᚋtypesᚐVerifiable(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_type(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_validated(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Verification_ts(ctx context.Context, field graphql.CollectedField, obj *types.Verification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Verification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.VerificationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.VerificationEdge)
	fc.Result = res
	return ec.marshalNVerificationEdge2ᚕᚖmsᚗapiᚋtypesᚐVerificationEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *types.VerificationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Verification)
	fc.Result = res
	return ec.marshalNVerification2ᚕᚖmsᚗapiᚋtypesᚐVerificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.VerificationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *types.VerificationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.VerificationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Verification)
	fc.Result = res
	return ec.marshalNVerification2ᚖmsᚗapiᚋtypesᚐVerification(ctx, field.Selections, res)
}

func (ec *executionContext) _VerificationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.VerificationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerificationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountInput(ctx context.Context, obj interface{}) (types.AccountInput, error) {
	var it types.AccountInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActivityInput(ctx context.Context, obj interface{}) (types.ActivityInput, error) {
	var it types.ActivityInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "risk_weighting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("risk_weighting"))
			it.RiskWeighting, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supported":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supported"))
			it.Supported, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "archived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archived"))
			it.Archived, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddressInput(ctx context.Context, obj interface{}) (types.AddressInput, error) {
	var it types.AddressInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "street":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
			it.Street, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "county":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county"))
			it.County, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postcode"))
			it.Postcode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_2"))
			it.Country2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicantInput(ctx context.Context, obj interface{}) (types.ApplicantInput, error) {
	var it types.ApplicantInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "applicant_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicant_id"))
			it.ApplicantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNAddressInput2ᚖmsᚗapiᚋtypesᚐAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor"))
			it.Vendor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthInput(ctx context.Context, obj interface{}) (types.AuthInput, error) {
	var it types.AuthInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "passcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passcode"))
			it.Passcode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
			it.Device, err = ec.unmarshalNDeviceInput2ᚖmsᚗapiᚋtypesᚐDeviceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBeneficiaryInput(ctx context.Context, obj interface{}) (types.BeneficiaryInput, error) {
	var it types.BeneficiaryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "account":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			it.Account, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceInput(ctx context.Context, obj interface{}) (types.DeviceInput, error) {
	var it types.DeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand"))
			it.Brand, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "os":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("os"))
			it.Os, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tokens":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokens"))
			it.Tokens, err = ec.unmarshalNDeviceTokenInput2ᚕᚖmsᚗapiᚋtypesᚐDeviceTokenInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceTokenInput(ctx context.Context, obj interface{}) (types.DeviceTokenInput, error) {
	var it types.DeviceTokenInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNDeviceTokenType2msᚗapiᚋtypesᚐDeviceTokenType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayeeAccountInput(ctx context.Context, obj interface{}) (types.PayeeAccountInput, error) {
	var it types.PayeeAccountInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "account_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account_number"))
			it.AccountNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_code"))
			it.SortCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iban":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			it.Iban, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "swift_bic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("swift_bic"))
			it.SwiftBic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bank_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bank_code"))
			it.BankCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "routing_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routing_number"))
			it.RoutingNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayeeInput(ctx context.Context, obj interface{}) (types.PayeeInput, error) {
	var it types.PayeeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatar"))
			it.Avatar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounts"))
			it.Accounts, err = ec.unmarshalNPayeeAccountInput2ᚕᚖmsᚗapiᚋtypesᚐPayeeAccountInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentFilter(ctx context.Context, obj interface{}) (types.PaymentFilter, error) {
	var it types.PaymentFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "payee_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payee_id"))
			it.PayeeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOPaymentStatus2ᚖmsᚗapiᚋtypesᚐPaymentStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentInput(ctx context.Context, obj interface{}) (types.PaymentInput, error) {
	var it types.PaymentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "idempotency_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idempotency_key"))
			it.IdempotencyKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "charge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charge"))
			it.Charge, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOState2ᚖmsᚗapiᚋtypesᚐState(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			it.Notes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quote":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quote"))
			it.Quote, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "beneficiary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("beneficiary"))
			it.Beneficiary, err = ec.unmarshalNBeneficiaryInput2ᚖmsᚗapiᚋtypesᚐBeneficiaryInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "funding_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("funding_source"))
			it.FundingSource, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "funding_amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("funding_amount"))
			it.FundingAmount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonInput(ctx context.Context, obj interface{}) (types.PersonInput, error) {
	var it types.PersonInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_residence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_residence"))
			it.CountryResidence, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bvn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bvn"))
			it.Bvn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductInput(ctx context.Context, obj interface{}) (types.ProductInput, error) {
	var it types.ProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "identification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identification"))
			it.Identification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scheme":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scheme"))
			it.Scheme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReportInput(ctx context.Context, obj interface{}) (types.ReportInput, error) {
	var it types.ReportInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitProofInput(ctx context.Context, obj interface{}) (types.SubmitProofInput, error) {
	var it types.SubmitProofInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNProofType2msᚗapiᚋtypesᚐProofType(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOState2ᚖmsᚗapiᚋtypesᚐState(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputValidateUserInput(ctx context.Context, obj interface{}) (types.ValidateUserInput, error) {
	var it types.ValidateUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "account_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account_number"))
			it.AccountNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_code"))
			it.SortCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
			it.Device, err = ec.unmarshalNDeviceInput2ᚖmsᚗapiᚋtypesᚐDeviceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BeneficiaryAccount(ctx context.Context, sel ast.SelectionSet, obj types.BeneficiaryAccount) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Account:
		return ec._Account(ctx, sel, &obj)
	case *types.Account:
		if obj == nil {
			return graphql.Null
		}
		return ec._Account(ctx, sel, obj)
	case types.PayeeAccount:
		return ec._PayeeAccount(ctx, sel, &obj)
	case *types.PayeeAccount:
		if obj == nil {
			return graphql.Null
		}
		return ec._PayeeAccount(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet, obj types.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Person:
		return ec._Person(ctx, sel, &obj)
	case *types.Person:
		if obj == nil {
			return graphql.Null
		}
		return ec._Person(ctx, sel, obj)
	case types.Organisation:
		return ec._Organisation(ctx, sel, &obj)
	case *types.Organisation:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organisation(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _GraphQLResponse(ctx context.Context, sel ast.SelectionSet, obj types.GraphQLResponse) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Response:
		return ec._Response(ctx, sel, &obj)
	case *types.Response:
		if obj == nil {
			return graphql.Null
		}
		return ec._Response(ctx, sel, obj)
	case types.AuthResponse:
		return ec._AuthResponse(ctx, sel, &obj)
	case *types.AuthResponse:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthResponse(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj types.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Owner(ctx context.Context, sel ast.SelectionSet, obj types.Owner) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Person:
		return ec._Person(ctx, sel, &obj)
	case *types.Person:
		if obj == nil {
			return graphql.Null
		}
		return ec._Person(ctx, sel, obj)
	case types.Organisation:
		return ec._Organisation(ctx, sel, &obj)
	case *types.Organisation:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organisation(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ValidationData(ctx context.Context, sel ast.SelectionSet, obj types.ValidationData) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Check:
		return ec._Check(ctx, sel, &obj)
	case *types.Check:
		if obj == nil {
			return graphql.Null
		}
		return ec._Check(ctx, sel, obj)
	case types.Screen:
		return ec._Screen(ctx, sel, &obj)
	case *types.Screen:
		if obj == nil {
			return graphql.Null
		}
		return ec._Screen(ctx, sel, obj)
	case types.Proof:
		return ec._Proof(ctx, sel, &obj)
	case *types.Proof:
		if obj == nil {
			return graphql.Null
		}
		return ec._Proof(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Verifiable(ctx context.Context, sel ast.SelectionSet, obj types.Verifiable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Email:
		return ec._Email(ctx, sel, &obj)
	case *types.Email:
		if obj == nil {
			return graphql.Null
		}
		return ec._Email(ctx, sel, obj)
	case types.Phone:
		return ec._Phone(ctx, sel, &obj)
	case *types.Phone:
		if obj == nil {
			return graphql.Null
		}
		return ec._Phone(ctx, sel, obj)
	case types.Device:
		return ec._Device(ctx, sel, &obj)
	case *types.Device:
		if obj == nil {
			return graphql.Null
		}
		return ec._Device(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var acceptanceImplementors = []string{"Acceptance"}

func (ec *executionContext) _Acceptance(ctx context.Context, sel ast.SelectionSet, obj *types.Acceptance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, acceptanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Acceptance")
		case "id":
			out.Values[i] = ec._Acceptance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identity":
			out.Values[i] = ec._Acceptance_identity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Acceptance_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Acceptance_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var acceptanceConnectionImplementors = []string{"AcceptanceConnection"}

func (ec *executionContext) _AcceptanceConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AcceptanceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, acceptanceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AcceptanceConnection")
		case "edges":
			out.Values[i] = ec._AcceptanceConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._AcceptanceConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._AcceptanceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AcceptanceConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var acceptanceEdgeImplementors = []string{"AcceptanceEdge"}

func (ec *executionContext) _AcceptanceEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AcceptanceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, acceptanceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AcceptanceEdge")
		case "node":
			out.Values[i] = ec._AcceptanceEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._AcceptanceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountImplementors = []string{"Account", "BeneficiaryAccount"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *types.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Account_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "product":
			out.Values[i] = ec._Account_product(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Account_name(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Account_active(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Account_status(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Account_image(ctx, field, obj)
		case "organisation":
			out.Values[i] = ec._Account_organisation(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Account_ts(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Account_tags(ctx, field, obj)
		case "transactions":
			out.Values[i] = ec._Account_transactions(ctx, field, obj)
		case "account_data":
			out.Values[i] = ec._Account_account_data(ctx, field, obj)
		case "account_details":
			out.Values[i] = ec._Account_account_details(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountBalancesImplementors = []string{"AccountBalances"}

func (ec *executionContext) _AccountBalances(ctx context.Context, sel ast.SelectionSet, obj *types.AccountBalances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountBalancesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountBalances")
		case "total_balance":
			out.Values[i] = ec._AccountBalances_total_balance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountConnectionImplementors = []string{"AccountConnection"}

func (ec *executionContext) _AccountConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AccountConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountConnection")
		case "edges":
			out.Values[i] = ec._AccountConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._AccountConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._AccountConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AccountConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountDataImplementors = []string{"AccountData"}

func (ec *executionContext) _AccountData(ctx context.Context, sel ast.SelectionSet, obj *types.AccountData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountData")
		case "id":
			out.Values[i] = ec._AccountData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account_holder_key":
			out.Values[i] = ec._AccountData_account_holder_key(ctx, field, obj)
		case "account_holder_type":
			out.Values[i] = ec._AccountData_account_holder_type(ctx, field, obj)
		case "account_state":
			out.Values[i] = ec._AccountData_account_state(ctx, field, obj)
		case "account_type":
			out.Values[i] = ec._AccountData_account_type(ctx, field, obj)
		case "activation_date":
			out.Values[i] = ec._AccountData_activation_date(ctx, field, obj)
		case "approved_date":
			out.Values[i] = ec._AccountData_approved_date(ctx, field, obj)
		case "assigned_branch_key":
			out.Values[i] = ec._AccountData_assigned_branch_key(ctx, field, obj)
		case "assigned_centre_key":
			out.Values[i] = ec._AccountData_assigned_centre_key(ctx, field, obj)
		case "assigned_user_key":
			out.Values[i] = ec._AccountData_assigned_user_key(ctx, field, obj)
		case "closed_date":
			out.Values[i] = ec._AccountData_closed_date(ctx, field, obj)
		case "creation_date":
			out.Values[i] = ec._AccountData_creation_date(ctx, field, obj)
		case "credit_arrangement_key":
			out.Values[i] = ec._AccountData_credit_arrangement_key(ctx, field, obj)
		case "currency_code":
			out.Values[i] = ec._AccountData_currency_code(ctx, field, obj)
		case "encoded_key":
			out.Values[i] = ec._AccountData_encoded_key(ctx, field, obj)
		case "last_account_appraisal_date":
			out.Values[i] = ec._AccountData_last_account_appraisal_date(ctx, field, obj)
		case "last_interest_calculation_date":
			out.Values[i] = ec._AccountData_last_interest_calculation_date(ctx, field, obj)
		case "last_interest_stored_date":
			out.Values[i] = ec._AccountData_last_interest_stored_date(ctx, field, obj)
		case "last_modified_date":
			out.Values[i] = ec._AccountData_last_modified_date(ctx, field, obj)
		case "last_overdraft_interest_review_date":
			out.Values[i] = ec._AccountData_last_overdraft_interest_review_date(ctx, field, obj)
		case "last_set_to_arrears_date":
			out.Values[i] = ec._AccountData_last_set_to_arrears_date(ctx, field, obj)
		case "locked_date":
			out.Values[i] = ec._AccountData_locked_date(ctx, field, obj)
		case "maturity_date":
			out.Values[i] = ec._AccountData_maturity_date(ctx, field, obj)
		case "migration_event_key":
			out.Values[i] = ec._AccountData_migration_event_key(ctx, field, obj)
		case "name":
			out.Values[i] = ec._AccountData_name(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._AccountData_notes(ctx, field, obj)
		case "product_type_key":
			out.Values[i] = ec._AccountData_product_type_key(ctx, field, obj)
		case "withholding_tax_source_key":
			out.Values[i] = ec._AccountData_withholding_tax_source_key(ctx, field, obj)
		case "overdraft_settings":
			out.Values[i] = ec._AccountData_overdraft_settings(ctx, field, obj)
		case "overdraft_interest_settings":
			out.Values[i] = ec._AccountData_overdraft_interest_settings(ctx, field, obj)
		case "linked_settlement_account_keys":
			out.Values[i] = ec._AccountData_linked_settlement_account_keys(ctx, field, obj)
		case "internal_controls":
			out.Values[i] = ec._AccountData_internal_controls(ctx, field, obj)
		case "interest_settings":
			out.Values[i] = ec._AccountData_interest_settings(ctx, field, obj)
		case "balances":
			out.Values[i] = ec._AccountData_balances(ctx, field, obj)
		case "accrued_amounts":
			out.Values[i] = ec._AccountData_accrued_amounts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountDetailsImplementors = []string{"AccountDetails"}

func (ec *executionContext) _AccountDetails(ctx context.Context, sel ast.SelectionSet, obj *types.AccountDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountDetails")
		case "virtual_account_id":
			out.Values[i] = ec._AccountDetails_virtual_account_id(ctx, field, obj)
		case "iban":
			out.Values[i] = ec._AccountDetails_iban(ctx, field, obj)
		case "account_number":
			out.Values[i] = ec._AccountDetails_account_number(ctx, field, obj)
		case "sort_code":
			out.Values[i] = ec._AccountDetails_sort_code(ctx, field, obj)
		case "swift_bic":
			out.Values[i] = ec._AccountDetails_swift_bic(ctx, field, obj)
		case "bank_code":
			out.Values[i] = ec._AccountDetails_bank_code(ctx, field, obj)
		case "routing_number":
			out.Values[i] = ec._AccountDetails_routing_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountEdgeImplementors = []string{"AccountEdge"}

func (ec *executionContext) _AccountEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AccountEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountEdge")
		case "node":
			out.Values[i] = ec._AccountEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._AccountEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountingRulesImplementors = []string{"AccountingRules"}

func (ec *executionContext) _AccountingRules(ctx context.Context, sel ast.SelectionSet, obj *types.AccountingRules) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountingRulesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountingRules")
		case "encoded_key":
			out.Values[i] = ec._AccountingRules_encoded_key(ctx, field, obj)
		case "financial_resource":
			out.Values[i] = ec._AccountingRules_financial_resource(ctx, field, obj)
		case "gl_key":
			out.Values[i] = ec._AccountingRules_gl_key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accruedAmountsImplementors = []string{"AccruedAmounts"}

func (ec *executionContext) _AccruedAmounts(ctx context.Context, sel ast.SelectionSet, obj *types.AccruedAmounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accruedAmountsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccruedAmounts")
		case "interest_accrued":
			out.Values[i] = ec._AccruedAmounts_interest_accrued(ctx, field, obj)
		case "negative_interest_accrued":
			out.Values[i] = ec._AccruedAmounts_negative_interest_accrued(ctx, field, obj)
		case "overdraft_interest_accrued":
			out.Values[i] = ec._AccruedAmounts_overdraft_interest_accrued(ctx, field, obj)
		case "technical_overdraft_interest_accrued":
			out.Values[i] = ec._AccruedAmounts_technical_overdraft_interest_accrued(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var actionImplementors = []string{"Action"}

func (ec *executionContext) _Action(ctx context.Context, sel ast.SelectionSet, obj *types.Action) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Action")
		case "id":
			out.Values[i] = ec._Action_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reporter":
			out.Values[i] = ec._Action_reporter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notes":
			out.Values[i] = ec._Action_notes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Action_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Action_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var activityImplementors = []string{"Activity"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *types.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "id":
			out.Values[i] = ec._Activity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Activity_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "risk_weighting":
			out.Values[i] = ec._Activity_risk_weighting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supported":
			out.Values[i] = ec._Activity_supported(ctx, field, obj)
		case "archived":
			out.Values[i] = ec._Activity_archived(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Activity_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *types.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "id":
			out.Values[i] = ec._Address_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Address_owner(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Address_name(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Address_primary(ctx, field, obj)
		case "street":
			out.Values[i] = ec._Address_street(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Address_city(ctx, field, obj)
		case "county":
			out.Values[i] = ec._Address_county(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Address_state(ctx, field, obj)
		case "postcode":
			out.Values[i] = ec._Address_postcode(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Address_country(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Address_ts(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Address_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addressConnectionImplementors = []string{"AddressConnection"}

func (ec *executionContext) _AddressConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AddressConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddressConnection")
		case "edges":
			out.Values[i] = ec._AddressConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._AddressConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._AddressConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AddressConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addressEdgeImplementors = []string{"AddressEdge"}

func (ec *executionContext) _AddressEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AddressEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddressEdge")
		case "node":
			out.Values[i] = ec._AddressEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._AddressEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var affectedAmountsImplementors = []string{"AffectedAmounts"}

func (ec *executionContext) _AffectedAmounts(ctx context.Context, sel ast.SelectionSet, obj *types.AffectedAmounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, affectedAmountsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AffectedAmounts")
		case "fees_amount":
			out.Values[i] = ec._AffectedAmounts_fees_amount(ctx, field, obj)
		case "fraction_amount":
			out.Values[i] = ec._AffectedAmounts_fraction_amount(ctx, field, obj)
		case "funds_amount":
			out.Values[i] = ec._AffectedAmounts_funds_amount(ctx, field, obj)
		case "interest_amount":
			out.Values[i] = ec._AffectedAmounts_interest_amount(ctx, field, obj)
		case "overdraft_amount":
			out.Values[i] = ec._AffectedAmounts_overdraft_amount(ctx, field, obj)
		case "overdraft_fees_amount":
			out.Values[i] = ec._AffectedAmounts_overdraft_fees_amount(ctx, field, obj)
		case "overdraft_interest_amount":
			out.Values[i] = ec._AffectedAmounts_overdraft_interest_amount(ctx, field, obj)
		case "technical_overdraft_amount":
			out.Values[i] = ec._AffectedAmounts_technical_overdraft_amount(ctx, field, obj)
		case "technical_overdraft_interest_amount":
			out.Values[i] = ec._AffectedAmounts_technical_overdraft_interest_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authImplementors = []string{"Auth"}

func (ec *executionContext) _Auth(ctx context.Context, sel ast.SelectionSet, obj *types.Auth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Auth")
		case "id":
			out.Values[i] = ec._Auth_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "session":
			out.Values[i] = ec._Auth_session(ctx, field, obj)
		case "identity":
			out.Values[i] = ec._Auth_identity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "success":
			out.Values[i] = ec._Auth_success(ctx, field, obj)
		case "attempts":
			out.Values[i] = ec._Auth_attempts(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Auth_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authResponseImplementors = []string{"AuthResponse", "GraphQLResponse"}

func (ec *executionContext) _AuthResponse(ctx context.Context, sel ast.SelectionSet, obj *types.AuthResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthResponse")
		case "message":
			out.Values[i] = ec._AuthResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "success":
			out.Values[i] = ec._AuthResponse_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._AuthResponse_code(ctx, field, obj)
		case "tokens":
			out.Values[i] = ec._AuthResponse_tokens(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authTokensImplementors = []string{"AuthTokens"}

func (ec *executionContext) _AuthTokens(ctx context.Context, sel ast.SelectionSet, obj *types.AuthTokens) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authTokensImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthTokens")
		case "auth":
			out.Values[i] = ec._AuthTokens_auth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refresh":
			out.Values[i] = ec._AuthTokens_refresh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balancesImplementors = []string{"Balances"}

func (ec *executionContext) _Balances(ctx context.Context, sel ast.SelectionSet, obj *types.Balances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balancesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Balances")
		case "available_balance":
			out.Values[i] = ec._Balances_available_balance(ctx, field, obj)
		case "blocked_balance":
			out.Values[i] = ec._Balances_blocked_balance(ctx, field, obj)
		case "fees_due":
			out.Values[i] = ec._Balances_fees_due(ctx, field, obj)
		case "forward_available_balance":
			out.Values[i] = ec._Balances_forward_available_balance(ctx, field, obj)
		case "hold_balance":
			out.Values[i] = ec._Balances_hold_balance(ctx, field, obj)
		case "locked_balance":
			out.Values[i] = ec._Balances_locked_balance(ctx, field, obj)
		case "overdraft_amount":
			out.Values[i] = ec._Balances_overdraft_amount(ctx, field, obj)
		case "overdraft_interest_due":
			out.Values[i] = ec._Balances_overdraft_interest_due(ctx, field, obj)
		case "technical_overdraft_amount":
			out.Values[i] = ec._Balances_technical_overdraft_amount(ctx, field, obj)
		case "technical_overdraft_interest_due":
			out.Values[i] = ec._Balances_technical_overdraft_interest_due(ctx, field, obj)
		case "total_balance":
			out.Values[i] = ec._Balances_total_balance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var beneficiaryImplementors = []string{"Beneficiary"}

func (ec *executionContext) _Beneficiary(ctx context.Context, sel ast.SelectionSet, obj *types.Beneficiary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, beneficiaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Beneficiary")
		case "account":
			out.Values[i] = ec._Beneficiary_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":
			out.Values[i] = ec._Beneficiary_currency(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Beneficiary_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cDDImplementors = []string{"CDD"}

func (ec *executionContext) _CDD(ctx context.Context, sel ast.SelectionSet, obj *types.Cdd) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cDDImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CDD")
		case "id":
			out.Values[i] = ec._CDD_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "owner":
			out.Values[i] = ec._CDD_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "watchlist":
			out.Values[i] = ec._CDD_watchlist(ctx, field, obj)
		case "details":
			out.Values[i] = ec._CDD_details(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CDD_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "onboard":
			out.Values[i] = ec._CDD_onboard(ctx, field, obj)
		case "version":
			out.Values[i] = ec._CDD_version(ctx, field, obj)
		case "validations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CDD_validations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "active":
			out.Values[i] = ec._CDD_active(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._CDD_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cDDConnectionImplementors = []string{"CDDConnection"}

func (ec *executionContext) _CDDConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CDDConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cDDConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CDDConnection")
		case "edges":
			out.Values[i] = ec._CDDConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._CDDConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CDDConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CDDConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cDDEdgeImplementors = []string{"CDDEdge"}

func (ec *executionContext) _CDDEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CDDEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cDDEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CDDEdge")
		case "node":
			out.Values[i] = ec._CDDEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._CDDEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkImplementors = []string{"Check", "ValidationData"}

func (ec *executionContext) _Check(ctx context.Context, sel ast.SelectionSet, obj *types.Check) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Check")
		case "id":
			out.Values[i] = ec._Check_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Check_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":
			out.Values[i] = ec._Check_organisation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Check_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Check_ts(ctx, field, obj)
		case "data":
			out.Values[i] = ec._Check_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkConnectionImplementors = []string{"CheckConnection"}

func (ec *executionContext) _CheckConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CheckConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckConnection")
		case "edges":
			out.Values[i] = ec._CheckConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._CheckConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CheckConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CheckConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkDataImplementors = []string{"CheckData"}

func (ec *executionContext) _CheckData(ctx context.Context, sel ast.SelectionSet, obj *types.CheckData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckData")
		case "id":
			out.Values[i] = ec._CheckData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			out.Values[i] = ec._CheckData_created_at(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CheckData_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "redirect_uri":
			out.Values[i] = ec._CheckData_redirect_uri(ctx, field, obj)
		case "result":
			out.Values[i] = ec._CheckData_result(ctx, field, obj)
		case "sandbox":
			out.Values[i] = ec._CheckData_sandbox(ctx, field, obj)
		case "results_uri":
			out.Values[i] = ec._CheckData_results_uri(ctx, field, obj)
		case "form_uri":
			out.Values[i] = ec._CheckData_form_uri(ctx, field, obj)
		case "paused":
			out.Values[i] = ec._CheckData_paused(ctx, field, obj)
		case "version":
			out.Values[i] = ec._CheckData_version(ctx, field, obj)
		case "href":
			out.Values[i] = ec._CheckData_href(ctx, field, obj)
		case "applicant_id":
			out.Values[i] = ec._CheckData_applicant_id(ctx, field, obj)
		case "applicant_provides_data":
			out.Values[i] = ec._CheckData_applicant_provides_data(ctx, field, obj)
		case "reports":
			out.Values[i] = ec._CheckData_reports(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":
			out.Values[i] = ec._CheckData_tags(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkEdgeImplementors = []string{"CheckEdge"}

func (ec *executionContext) _CheckEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CheckEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckEdge")
		case "node":
			out.Values[i] = ec._CheckEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._CheckEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *types.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":
			out.Values[i] = ec._Comment_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Comment_type(ctx, field, obj)
		case "body":
			out.Values[i] = ec._Comment_body(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Comment_ts(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Comment_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentConnectionImplementors = []string{"CommentConnection"}

func (ec *executionContext) _CommentConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CommentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentConnection")
		case "edges":
			out.Values[i] = ec._CommentConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._CommentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CommentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CommentConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentEdgeImplementors = []string{"CommentEdge"}

func (ec *executionContext) _CommentEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CommentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentEdge")
		case "node":
			out.Values[i] = ec._CommentEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._CommentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentImplementors = []string{"Content"}

func (ec *executionContext) _Content(ctx context.Context, sel ast.SelectionSet, obj *types.Content) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Content")
		case "id":
			out.Values[i] = ec._Content_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "source":
			out.Values[i] = ec._Content_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Content_type(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Content_title(ctx, field, obj)
		case "abstract":
			out.Values[i] = ec._Content_abstract(ctx, field, obj)
		case "body":
			out.Values[i] = ec._Content_body(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Content_url(ctx, field, obj)
		case "current":
			out.Values[i] = ec._Content_current(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Content_version(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Content_ts(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._Content_comments(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Content_tags(ctx, field, obj)
		case "keywords":
			out.Values[i] = ec._Content_keywords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countryImplementors = []string{"Country"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *types.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "Capital":
			out.Values[i] = ec._Country_Capital(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Continent":
			out.Values[i] = ec._Country_Continent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Country_Name":
			out.Values[i] = ec._Country_Country_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DS":
			out.Values[i] = ec._Country_DS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Dial":
			out.Values[i] = ec._Country_Dial(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "EDGAR":
			out.Values[i] = ec._Country_EDGAR(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "FIFA":
			out.Values[i] = ec._Country_FIFA(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "FIPS":
			out.Values[i] = ec._Country_FIPS(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "GAUL":
			out.Values[i] = ec._Country_GAUL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Geo_Name_ID":
			out.Values[i] = ec._Country_Geo_Name_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "IOC":
			out.Values[i] = ec._Country_IOC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO3166_1_Alpha_2":
			out.Values[i] = ec._Country_ISO3166_1_Alpha_2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO3166_1_Alpha_3":
			out.Values[i] = ec._Country_ISO3166_1_Alpha_3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO4217_Currency_Alphabetic_Code":
			out.Values[i] = ec._Country_ISO4217_Currency_Alphabetic_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO4217_Currency_Country_Name":
			out.Values[i] = ec._Country_ISO4217_Currency_Country_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO4217_Currency_Minor_Unit":
			out.Values[i] = ec._Country_ISO4217_Currency_Minor_Unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO4217_Currency_Name":
			out.Values[i] = ec._Country_ISO4217_Currency_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ISO4217_Currency_Numeric_Code":
			out.Values[i] = ec._Country_ISO4217_Currency_Numeric_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ITU":
			out.Values[i] = ec._Country_ITU(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Is_Independent":
			out.Values[i] = ec._Country_Is_Independent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Languages":
			out.Values[i] = ec._Country_Languages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "M49":
			out.Values[i] = ec._Country_M49(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MARC":
			out.Values[i] = ec._Country_MARC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Official_Name_English":
			out.Values[i] = ec._Country_Official_Name_English(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "TLD":
			out.Values[i] = ec._Country_TLD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "WMO":
			out.Values[i] = ec._Country_WMO(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countryConnectionImplementors = []string{"CountryConnection"}

func (ec *executionContext) _CountryConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CountryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountryConnection")
		case "edges":
			out.Values[i] = ec._CountryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._CountryConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CountryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CountryConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countryEdgeImplementors = []string{"CountryEdge"}

func (ec *executionContext) _CountryEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CountryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountryEdge")
		case "node":
			out.Values[i] = ec._CountryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._CountryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var credentialsImplementors = []string{"Credentials"}

func (ec *executionContext) _Credentials(ctx context.Context, sel ast.SelectionSet, obj *types.Credentials) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, credentialsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Credentials")
		case "identifier":
			out.Values[i] = ec._Credentials_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refresh_token":
			out.Values[i] = ec._Credentials_refresh_token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currencyImplementors = []string{"Currency"}

func (ec *executionContext) _Currency(ctx context.Context, sel ast.SelectionSet, obj *types.Currency) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currencyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Currency")
		case "symbol":
			out.Values[i] = ec._Currency_symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Currency_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "symbol_native":
			out.Values[i] = ec._Currency_symbol_native(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decimal_digits":
			out.Values[i] = ec._Currency_decimal_digits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rounding":
			out.Values[i] = ec._Currency_rounding(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Currency_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name_plural":
			out.Values[i] = ec._Currency_name_plural(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currencyConnectionImplementors = []string{"CurrencyConnection"}

func (ec *executionContext) _CurrencyConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CurrencyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currencyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrencyConnection")
		case "edges":
			out.Values[i] = ec._CurrencyConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._CurrencyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._CurrencyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CurrencyConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currencyEdgeImplementors = []string{"CurrencyEdge"}

func (ec *executionContext) _CurrencyEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CurrencyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currencyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrencyEdge")
		case "node":
			out.Values[i] = ec._CurrencyEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._CurrencyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceImplementors = []string{"Device", "Verifiable"}

func (ec *executionContext) _Device(ctx context.Context, sel ast.SelectionSet, obj *types.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Device")
		case "id":
			out.Values[i] = ec._Device_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Device_name(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Device_primary(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Device_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifier":
			out.Values[i] = ec._Device_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Device_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brand":
			out.Values[i] = ec._Device_brand(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "os":
			out.Values[i] = ec._Device_os(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Device_active(ctx, field, obj)
		case "verified":
			out.Values[i] = ec._Device_verified(ctx, field, obj)
		case "tokens":
			out.Values[i] = ec._Device_tokens(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Device_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceConnectionImplementors = []string{"DeviceConnection"}

func (ec *executionContext) _DeviceConnection(ctx context.Context, sel ast.SelectionSet, obj *types.DeviceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConnection")
		case "edges":
			out.Values[i] = ec._DeviceConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._DeviceConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DeviceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._DeviceConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceEdgeImplementors = []string{"DeviceEdge"}

func (ec *executionContext) _DeviceEdge(ctx context.Context, sel ast.SelectionSet, obj *types.DeviceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceEdge")
		case "node":
			out.Values[i] = ec._DeviceEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._DeviceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceTokenImplementors = []string{"DeviceToken"}

func (ec *executionContext) _DeviceToken(ctx context.Context, sel ast.SelectionSet, obj *types.DeviceToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceTokenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceToken")
		case "type":
			out.Values[i] = ec._DeviceToken_type(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DeviceToken_value(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._DeviceToken_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailImplementors = []string{"Email", "Verifiable"}

func (ec *executionContext) _Email(ctx context.Context, sel ast.SelectionSet, obj *types.Email) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Email")
		case "name":
			out.Values[i] = ec._Email_name(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Email_primary(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Email_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Email_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verified":
			out.Values[i] = ec._Email_verified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alias":
			out.Values[i] = ec._Email_alias(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feeImplementors = []string{"Fee"}

func (ec *executionContext) _Fee(ctx context.Context, sel ast.SelectionSet, obj *types.Fee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fee")
		case "lowerBoundary":
			out.Values[i] = ec._Fee_lowerBoundary(ctx, field, obj)
		case "upperBoundary":
			out.Values[i] = ec._Fee_upperBoundary(ctx, field, obj)
		case "fee":
			out.Values[i] = ec._Fee_fee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fxImplementors = []string{"Fx"}

func (ec *executionContext) _Fx(ctx context.Context, sel ast.SelectionSet, obj *types.Fx) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fxImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fx")
		case "currency":
			out.Values[i] = ec._Fx_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_currency":
			out.Values[i] = ec._Fx_base_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buy_rate":
			out.Values[i] = ec._Fx_buy_rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sell_rate":
			out.Values[i] = ec._Fx_sell_rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Fx_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fxConnectionImplementors = []string{"FxConnection"}

func (ec *executionContext) _FxConnection(ctx context.Context, sel ast.SelectionSet, obj *types.FxConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fxConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FxConnection")
		case "edges":
			out.Values[i] = ec._FxConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._FxConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._FxConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FxConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fxEdgeImplementors = []string{"FxEdge"}

func (ec *executionContext) _FxEdge(ctx context.Context, sel ast.SelectionSet, obj *types.FxEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fxEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FxEdge")
		case "node":
			out.Values[i] = ec._FxEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._FxEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identityImplementors = []string{"Identity"}

func (ec *executionContext) _Identity(ctx context.Context, sel ast.SelectionSet, obj *types.Identity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Identity")
		case "id":
			out.Values[i] = ec._Identity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Identity_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nickname":
			out.Values[i] = ec._Identity_nickname(ctx, field, obj)
		case "organisation":
			out.Values[i] = ec._Identity_organisation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Identity_status(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Identity_active(ctx, field, obj)
		case "authentication":
			out.Values[i] = ec._Identity_authentication(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._Identity_devices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Identity_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "credentials":
			out.Values[i] = ec._Identity_credentials(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageAssetsImplementors = []string{"ImageAssets"}

func (ec *executionContext) _ImageAssets(ctx context.Context, sel ast.SelectionSet, obj *types.ImageAssets) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageAssetsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageAssets")
		case "safe":
			out.Values[i] = ec._ImageAssets_safe(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ImageAssets_type(ctx, field, obj)
		case "image":
			out.Values[i] = ec._ImageAssets_image(ctx, field, obj)
		case "svg":
			out.Values[i] = ec._ImageAssets_svg(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryImplementors = []string{"Industry"}

func (ec *executionContext) _Industry(ctx context.Context, sel ast.SelectionSet, obj *types.Industry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, industryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Industry")
		case "id":
			out.Values[i] = ec._Industry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Industry_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._Industry_score(ctx, field, obj)
		case "section":
			out.Values[i] = ec._Industry_section(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Industry_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Industry_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryConnectionImplementors = []string{"IndustryConnection"}

func (ec *executionContext) _IndustryConnection(ctx context.Context, sel ast.SelectionSet, obj *types.IndustryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, industryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryConnection")
		case "edges":
			out.Values[i] = ec._IndustryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._IndustryConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._IndustryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._IndustryConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryEdgeImplementors = []string{"IndustryEdge"}

func (ec *executionContext) _IndustryEdge(ctx context.Context, sel ast.SelectionSet, obj *types.IndustryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, industryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryEdge")
		case "node":
			out.Values[i] = ec._IndustryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._IndustryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestPaymentDatesImplementors = []string{"InterestPaymentDates"}

func (ec *executionContext) _InterestPaymentDates(ctx context.Context, sel ast.SelectionSet, obj *types.InterestPaymentDates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestPaymentDatesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestPaymentDates")
		case "day":
			out.Values[i] = ec._InterestPaymentDates_day(ctx, field, obj)
		case "month":
			out.Values[i] = ec._InterestPaymentDates_month(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestPaymentSettingsImplementors = []string{"InterestPaymentSettings"}

func (ec *executionContext) _InterestPaymentSettings(ctx context.Context, sel ast.SelectionSet, obj *types.InterestPaymentSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestPaymentSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestPaymentSettings")
		case "interest_payment_point":
			out.Values[i] = ec._InterestPaymentSettings_interest_payment_point(ctx, field, obj)
		case "interest_payment_dates":
			out.Values[i] = ec._InterestPaymentSettings_interest_payment_dates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestRateImplementors = []string{"InterestRate"}

func (ec *executionContext) _InterestRate(ctx context.Context, sel ast.SelectionSet, obj *types.InterestRate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestRateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestRate")
		case "default_value":
			out.Values[i] = ec._InterestRate_default_value(ctx, field, obj)
		case "max_value":
			out.Values[i] = ec._InterestRate_max_value(ctx, field, obj)
		case "min_value":
			out.Values[i] = ec._InterestRate_min_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestRateSettingsImplementors = []string{"InterestRateSettings"}

func (ec *executionContext) _InterestRateSettings(ctx context.Context, sel ast.SelectionSet, obj *types.InterestRateSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestRateSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestRateSettings")
		case "encoded_key":
			out.Values[i] = ec._InterestRateSettings_encoded_key(ctx, field, obj)
		case "interest_charge_frequency":
			out.Values[i] = ec._InterestRateSettings_interest_charge_frequency(ctx, field, obj)
		case "interest_charge_frequency_count":
			out.Values[i] = ec._InterestRateSettings_interest_charge_frequency_count(ctx, field, obj)
		case "interest_rate":
			out.Values[i] = ec._InterestRateSettings_interest_rate(ctx, field, obj)
		case "interest_rate_review_count":
			out.Values[i] = ec._InterestRateSettings_interest_rate_review_count(ctx, field, obj)
		case "interest_rate_review_unit":
			out.Values[i] = ec._InterestRateSettings_interest_rate_review_unit(ctx, field, obj)
		case "interest_rate_source":
			out.Values[i] = ec._InterestRateSettings_interest_rate_source(ctx, field, obj)
		case "interest_rate_terms":
			out.Values[i] = ec._InterestRateSettings_interest_rate_terms(ctx, field, obj)
		case "interest_spread":
			out.Values[i] = ec._InterestRateSettings_interest_spread(ctx, field, obj)
		case "interest_rate_tiers":
			out.Values[i] = ec._InterestRateSettings_interest_rate_tiers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestRateTiersImplementors = []string{"InterestRateTiers"}

func (ec *executionContext) _InterestRateTiers(ctx context.Context, sel ast.SelectionSet, obj *types.InterestRateTiers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestRateTiersImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestRateTiers")
		case "encoded_key":
			out.Values[i] = ec._InterestRateTiers_encoded_key(ctx, field, obj)
		case "ending_balance":
			out.Values[i] = ec._InterestRateTiers_ending_balance(ctx, field, obj)
		case "ending_day":
			out.Values[i] = ec._InterestRateTiers_ending_day(ctx, field, obj)
		case "interest_rate":
			out.Values[i] = ec._InterestRateTiers_interest_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestSettingsImplementors = []string{"InterestSettings"}

func (ec *executionContext) _InterestSettings(ctx context.Context, sel ast.SelectionSet, obj *types.InterestSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterestSettings")
		case "days_in_year":
			out.Values[i] = ec._InterestSettings_days_in_year(ctx, field, obj)
		case "interest_calculation_balance":
			out.Values[i] = ec._InterestSettings_interest_calculation_balance(ctx, field, obj)
		case "index_source_key":
			out.Values[i] = ec._InterestSettings_index_source_key(ctx, field, obj)
		case "charge_frequency":
			out.Values[i] = ec._InterestSettings_charge_frequency(ctx, field, obj)
		case "charge_frequency_count":
			out.Values[i] = ec._InterestSettings_charge_frequency_count(ctx, field, obj)
		case "rate_review_count":
			out.Values[i] = ec._InterestSettings_rate_review_count(ctx, field, obj)
		case "interest_rate_review_unit":
			out.Values[i] = ec._InterestSettings_interest_rate_review_unit(ctx, field, obj)
		case "rate_source":
			out.Values[i] = ec._InterestSettings_rate_source(ctx, field, obj)
		case "rate_terms":
			out.Values[i] = ec._InterestSettings_rate_terms(ctx, field, obj)
		case "rate_tiers":
			out.Values[i] = ec._InterestSettings_rate_tiers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "interest_rate":
			out.Values[i] = ec._InterestSettings_interest_rate(ctx, field, obj)
		case "interest_rate_settings":
			out.Values[i] = ec._InterestSettings_interest_rate_settings(ctx, field, obj)
		case "interest_payment_settings":
			out.Values[i] = ec._InterestSettings_interest_payment_settings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var internalControlsImplementors = []string{"InternalControls"}

func (ec *executionContext) _InternalControls(ctx context.Context, sel ast.SelectionSet, obj *types.InternalControls) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, internalControlsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalControls")
		case "max_deposit_balance":
			out.Values[i] = ec._InternalControls_max_deposit_balance(ctx, field, obj)
		case "max_withdrawal_amount":
			out.Values[i] = ec._InternalControls_max_withdrawal_amount(ctx, field, obj)
		case "recommended_deposit_amount":
			out.Values[i] = ec._InternalControls_recommended_deposit_amount(ctx, field, obj)
		case "target_amount":
			out.Values[i] = ec._InternalControls_target_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *types.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "longitude":
			out.Values[i] = ec._Location_longitude(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._Location_latitude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageImplementors = []string{"Message"}

func (ec *executionContext) _Message(ctx context.Context, sel ast.SelectionSet, obj *types.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Message")
		case "id":
			out.Values[i] = ec._Message_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Message_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Message_title(ctx, field, obj)
		case "body":
			out.Values[i] = ec._Message_body(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Message_status(ctx, field, obj)
		case "has_read":
			out.Values[i] = ec._Message_has_read(ctx, field, obj)
		case "delivery_mode":
			out.Values[i] = ec._Message_delivery_mode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sender":
			out.Values[i] = ec._Message_sender(ctx, field, obj)
		case "target":
			out.Values[i] = ec._Message_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sent":
			out.Values[i] = ec._Message_sent(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Message_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageConnectionImplementors = []string{"MessageConnection"}

func (ec *executionContext) _MessageConnection(ctx context.Context, sel ast.SelectionSet, obj *types.MessageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageConnection")
		case "edges":
			out.Values[i] = ec._MessageConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._MessageConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._MessageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._MessageConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageEdgeImplementors = []string{"MessageEdge"}

func (ec *executionContext) _MessageEdge(ctx context.Context, sel ast.SelectionSet, obj *types.MessageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageEdge")
		case "node":
			out.Values[i] = ec._MessageEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._MessageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createPhone":
			out.Values[i] = ec._Mutation_createPhone(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "confirmPhone":
			out.Values[i] = ec._Mutation_confirmPhone(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signup":
			out.Values[i] = ec._Mutation_signup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "register":
			out.Values[i] = ec._Mutation_register(ctx, field)
		case "intendedActivities":
			out.Values[i] = ec._Mutation_intendedActivities(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createApplication":
			out.Values[i] = ec._Mutation_createApplication(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyEmail":
			out.Values[i] = ec._Mutation_verifyEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resendOTP":
			out.Values[i] = ec._Mutation_resendOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resendEmailMagicLInk":
			out.Values[i] = ec._Mutation_resendEmailMagicLInk(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginWithToken":
			out.Values[i] = ec._Mutation_loginWithToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._Mutation_refreshToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDeviceToken":
			out.Values[i] = ec._Mutation_updateDeviceToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPasscode":
			out.Values[i] = ec._Mutation_resetPasscode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestPasscodeReset":
			out.Values[i] = ec._Mutation_requestPasscodeReset(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "confirmPasscodeResetOtp":
			out.Values[i] = ec._Mutation_confirmPasscodeResetOtp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitApplication":
			out.Values[i] = ec._Mutation_submitApplication(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "acceptTerms":
			out.Values[i] = ec._Mutation_acceptTerms(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateValidationStatus":
			out.Values[i] = ec._Mutation_updateValidationStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitProof":
			out.Values[i] = ec._Mutation_submitProof(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTransactionPassword":
			out.Values[i] = ec._Mutation_createTransactionPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAccount":
			out.Values[i] = ec._Mutation_createAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPayee":
			out.Values[i] = ec._Mutation_createPayee(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePayee":
			out.Values[i] = ec._Mutation_updatePayee(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPayeeAccount":
			out.Values[i] = ec._Mutation_addPayeeAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePayeeAccount":
			out.Values[i] = ec._Mutation_deletePayeeAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resubmit":
			out.Values[i] = ec._Mutation_resubmit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resubmitReports":
			out.Values[i] = ec._Mutation_resubmitReports(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPayment":
			out.Values[i] = ec._Mutation_createPayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validateBVN":
			out.Values[i] = ec._Mutation_validateBVN(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestOTP":
			out.Values[i] = ec._Mutation_requestOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyOTP":
			out.Values[i] = ec._Mutation_verifyOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validateEmail":
			out.Values[i] = ec._Mutation_validateEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validateUser":
			out.Values[i] = ec._Mutation_validateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestTransactionPasscodeReset":
			out.Values[i] = ec._Mutation_requestTransactionPasscodeReset(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetTransactionPasscode":
			out.Values[i] = ec._Mutation_resetTransactionPasscode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setDevicePreference":
			out.Values[i] = ec._Mutation_setDevicePreference(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var openingBalanceImplementors = []string{"OpeningBalance"}

func (ec *executionContext) _OpeningBalance(ctx context.Context, sel ast.SelectionSet, obj *types.OpeningBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openingBalanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpeningBalance")
		case "default_value":
			out.Values[i] = ec._OpeningBalance_default_value(ctx, field, obj)
		case "max":
			out.Values[i] = ec._OpeningBalance_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._OpeningBalance_min(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgLocationImplementors = []string{"OrgLocation"}

func (ec *executionContext) _OrgLocation(ctx context.Context, sel ast.SelectionSet, obj *types.OrgLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgLocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgLocation")
		case "continent":
			out.Values[i] = ec._OrgLocation_continent(ctx, field, obj)
		case "country":
			out.Values[i] = ec._OrgLocation_country(ctx, field, obj)
		case "state":
			out.Values[i] = ec._OrgLocation_state(ctx, field, obj)
		case "city":
			out.Values[i] = ec._OrgLocation_city(ctx, field, obj)
		case "country_code":
			out.Values[i] = ec._OrgLocation_country_code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organisationImplementors = []string{"Organisation", "Entity", "Owner"}

func (ec *executionContext) _Organisation(ctx context.Context, sel ast.SelectionSet, obj *types.Organisation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organisationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organisation")
		case "id":
			out.Values[i] = ec._Organisation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Organisation_name(ctx, field, obj)
		case "keywords":
			out.Values[i] = ec._Organisation_keywords(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Organisation_description(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._Organisation_domain(ctx, field, obj)
		case "banner":
			out.Values[i] = ec._Organisation_banner(ctx, field, obj)
		case "revenue":
			out.Values[i] = ec._Organisation_revenue(ctx, field, obj)
		case "language":
			out.Values[i] = ec._Organisation_language(ctx, field, obj)
		case "raised":
			out.Values[i] = ec._Organisation_raised(ctx, field, obj)
		case "employees":
			out.Values[i] = ec._Organisation_employees(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Organisation_email(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Organisation_ts(ctx, field, obj)
		case "addresses":
			out.Values[i] = ec._Organisation_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":
			out.Values[i] = ec._Organisation_location(ctx, field, obj)
		case "industries":
			out.Values[i] = ec._Organisation_industries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "social":
			out.Values[i] = ec._Organisation_social(ctx, field, obj)
		case "image_assets":
			out.Values[i] = ec._Organisation_image_assets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identities":
			out.Values[i] = ec._Organisation_identities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organisationConnectionImplementors = []string{"OrganisationConnection"}

func (ec *executionContext) _OrganisationConnection(ctx context.Context, sel ast.SelectionSet, obj *types.OrganisationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organisationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganisationConnection")
		case "edges":
			out.Values[i] = ec._OrganisationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._OrganisationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._OrganisationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._OrganisationConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organisationEdgeImplementors = []string{"OrganisationEdge"}

func (ec *executionContext) _OrganisationEdge(ctx context.Context, sel ast.SelectionSet, obj *types.OrganisationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organisationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganisationEdge")
		case "node":
			out.Values[i] = ec._OrganisationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._OrganisationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var overdraftInterestSettingsImplementors = []string{"OverdraftInterestSettings"}

func (ec *executionContext) _OverdraftInterestSettings(ctx context.Context, sel ast.SelectionSet, obj *types.OverdraftInterestSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, overdraftInterestSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OverdraftInterestSettings")
		case "interest_rate_settings":
			out.Values[i] = ec._OverdraftInterestSettings_interest_rate_settings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var overdraftSettingImplementors = []string{"OverdraftSetting"}

func (ec *executionContext) _OverdraftSetting(ctx context.Context, sel ast.SelectionSet, obj *types.OverdraftSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, overdraftSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OverdraftSetting")
		case "allow_overdraft":
			out.Values[i] = ec._OverdraftSetting_allow_overdraft(ctx, field, obj)
		case "allow_technical_overdraft":
			out.Values[i] = ec._OverdraftSetting_allow_technical_overdraft(ctx, field, obj)
		case "max_limit":
			out.Values[i] = ec._OverdraftSetting_max_limit(ctx, field, obj)
		case "interest_settings":
			out.Values[i] = ec._OverdraftSetting_interest_settings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var overdraftSettingsImplementors = []string{"OverdraftSettings"}

func (ec *executionContext) _OverdraftSettings(ctx context.Context, sel ast.SelectionSet, obj *types.OverdraftSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, overdraftSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OverdraftSettings")
		case "allow_overdraft":
			out.Values[i] = ec._OverdraftSettings_allow_overdraft(ctx, field, obj)
		case "overdraft_expiry_date":
			out.Values[i] = ec._OverdraftSettings_overdraft_expiry_date(ctx, field, obj)
		case "overdraft_limit":
			out.Values[i] = ec._OverdraftSettings_overdraft_limit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *types.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payeeImplementors = []string{"Payee"}

func (ec *executionContext) _Payee(ctx context.Context, sel ast.SelectionSet, obj *types.Payee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payeeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payee")
		case "id":
			out.Values[i] = ec._Payee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Payee_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Payee_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._Payee_avatar(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Payee_ts(ctx, field, obj)
		case "accounts":
			out.Values[i] = ec._Payee_accounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payeeAccountImplementors = []string{"PayeeAccount", "BeneficiaryAccount"}

func (ec *executionContext) _PayeeAccount(ctx context.Context, sel ast.SelectionSet, obj *types.PayeeAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payeeAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayeeAccount")
		case "id":
			out.Values[i] = ec._PayeeAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PayeeAccount_name(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._PayeeAccount_currency(ctx, field, obj)
		case "account_number":
			out.Values[i] = ec._PayeeAccount_account_number(ctx, field, obj)
		case "sort_code":
			out.Values[i] = ec._PayeeAccount_sort_code(ctx, field, obj)
		case "iban":
			out.Values[i] = ec._PayeeAccount_iban(ctx, field, obj)
		case "swift_bic":
			out.Values[i] = ec._PayeeAccount_swift_bic(ctx, field, obj)
		case "bank_code":
			out.Values[i] = ec._PayeeAccount_bank_code(ctx, field, obj)
		case "routing_number":
			out.Values[i] = ec._PayeeAccount_routing_number(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._PayeeAccount_phone_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payeeConnectionImplementors = []string{"PayeeConnection"}

func (ec *executionContext) _PayeeConnection(ctx context.Context, sel ast.SelectionSet, obj *types.PayeeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payeeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayeeConnection")
		case "edges":
			out.Values[i] = ec._PayeeConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._PayeeConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PayeeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PayeeConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payeeEdgeImplementors = []string{"PayeeEdge"}

func (ec *executionContext) _PayeeEdge(ctx context.Context, sel ast.SelectionSet, obj *types.PayeeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payeeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayeeEdge")
		case "node":
			out.Values[i] = ec._PayeeEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._PayeeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentImplementors = []string{"Payment"}

func (ec *executionContext) _Payment(ctx context.Context, sel ast.SelectionSet, obj *types.Payment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payment")
		case "id":
			out.Values[i] = ec._Payment_id(ctx, field, obj)
		case "idempotency_key":
			out.Values[i] = ec._Payment_idempotency_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Payment_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "charge":
			out.Values[i] = ec._Payment_charge(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Payment_reference(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Payment_status(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Payment_image(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._Payment_notes(ctx, field, obj)
		case "quote":
			out.Values[i] = ec._Payment_quote(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Payment_tags(ctx, field, obj)
		case "beneficiary":
			out.Values[i] = ec._Payment_beneficiary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "funding_source":
			out.Values[i] = ec._Payment_funding_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":
			out.Values[i] = ec._Payment_currency(ctx, field, obj)
		case "funding_amount":
			out.Values[i] = ec._Payment_funding_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Payment_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentConnectionImplementors = []string{"PaymentConnection"}

func (ec *executionContext) _PaymentConnection(ctx context.Context, sel ast.SelectionSet, obj *types.PaymentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentConnection")
		case "edges":
			out.Values[i] = ec._PaymentConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._PaymentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PaymentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PaymentConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentEdgeImplementors = []string{"PaymentEdge"}

func (ec *executionContext) _PaymentEdge(ctx context.Context, sel ast.SelectionSet, obj *types.PaymentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentEdge")
		case "node":
			out.Values[i] = ec._PaymentEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._PaymentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImplementors = []string{"Person", "Entity", "Owner"}

func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *types.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "id":
			out.Values[i] = ec._Person_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Person_title(ctx, field, obj)
		case "first_name":
			out.Values[i] = ec._Person_first_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "last_name":
			out.Values[i] = ec._Person_last_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middle_name":
			out.Values[i] = ec._Person_middle_name(ctx, field, obj)
		case "dob":
			out.Values[i] = ec._Person_dob(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Person_status(ctx, field, obj)
		case "employer":
			out.Values[i] = ec._Person_employer(ctx, field, obj)
		case "bvn":
			out.Values[i] = ec._Person_bvn(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Person_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country_residence":
			out.Values[i] = ec._Person_country_residence(ctx, field, obj)
		case "nationality":
			out.Values[i] = ec._Person_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emails":
			out.Values[i] = ec._Person_emails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phones":
			out.Values[i] = ec._Person_phones(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identities":
			out.Values[i] = ec._Person_identities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addresses":
			out.Values[i] = ec._Person_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activities":
			out.Values[i] = ec._Person_activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cdd":
			out.Values[i] = ec._Person_cdd(ctx, field, obj)
		case "onboarding_status":
			out.Values[i] = ec._Person_onboarding_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personConnectionImplementors = []string{"PersonConnection"}

func (ec *executionContext) _PersonConnection(ctx context.Context, sel ast.SelectionSet, obj *types.PersonConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonConnection")
		case "edges":
			out.Values[i] = ec._PersonConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._PersonConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._PersonConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PersonConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personEdgeImplementors = []string{"PersonEdge"}

func (ec *executionContext) _PersonEdge(ctx context.Context, sel ast.SelectionSet, obj *types.PersonEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonEdge")
		case "node":
			out.Values[i] = ec._PersonEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._PersonEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneImplementors = []string{"Phone", "Verifiable"}

func (ec *executionContext) _Phone(ctx context.Context, sel ast.SelectionSet, obj *types.Phone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Phone")
		case "name":
			out.Values[i] = ec._Phone_name(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Phone_primary(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Phone_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Phone_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verified":
			out.Values[i] = ec._Phone_verified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "carrier":
			out.Values[i] = ec._Phone_carrier(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productImplementors = []string{"Product"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *types.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identification":
			out.Values[i] = ec._Product_identification(ctx, field, obj)
		case "scheme":
			out.Values[i] = ec._Product_scheme(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Product_ts(ctx, field, obj)
		case "details":
			out.Values[i] = ec._Product_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productConnectionImplementors = []string{"ProductConnection"}

func (ec *executionContext) _ProductConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ProductConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductConnection")
		case "edges":
			out.Values[i] = ec._ProductConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._ProductConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProductConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProductConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productControlImplementors = []string{"ProductControl"}

func (ec *executionContext) _ProductControl(ctx context.Context, sel ast.SelectionSet, obj *types.ProductControl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productControlImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductControl")
		case "dormancy_period_days":
			out.Values[i] = ec._ProductControl_dormancy_period_days(ctx, field, obj)
		case "max_withdrawal_amount":
			out.Values[i] = ec._ProductControl_max_withdrawal_amount(ctx, field, obj)
		case "recommended_deposit_amount":
			out.Values[i] = ec._ProductControl_recommended_deposit_amount(ctx, field, obj)
		case "opening_balance":
			out.Values[i] = ec._ProductControl_opening_balance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productDetailsImplementors = []string{"ProductDetails"}

func (ec *executionContext) _ProductDetails(ctx context.Context, sel ast.SelectionSet, obj *types.ProductDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductDetails")
		case "category":
			out.Values[i] = ec._ProductDetails_category(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ProductDetails_type(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProductDetails_name(ctx, field, obj)
		case "state":
			out.Values[i] = ec._ProductDetails_state(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._ProductDetails_currency(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._ProductDetails_notes(ctx, field, obj)
		case "credit_requirement":
			out.Values[i] = ec._ProductDetails_credit_requirement(ctx, field, obj)
		case "withholding_tax_enabled":
			out.Values[i] = ec._ProductDetails_withholding_tax_enabled(ctx, field, obj)
		case "allow_offset":
			out.Values[i] = ec._ProductDetails_allow_offset(ctx, field, obj)
		case "product_templates":
			out.Values[i] = ec._ProductDetails_product_templates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "product_fees":
			out.Values[i] = ec._ProductDetails_product_fees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "product_control":
			out.Values[i] = ec._ProductDetails_product_control(ctx, field, obj)
		case "product_maturity":
			out.Values[i] = ec._ProductDetails_product_maturity(ctx, field, obj)
		case "overdraft_setting":
			out.Values[i] = ec._ProductDetails_overdraft_setting(ctx, field, obj)
		case "interest_setting":
			out.Values[i] = ec._ProductDetails_interest_setting(ctx, field, obj)
		case "product_setting":
			out.Values[i] = ec._ProductDetails_product_setting(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productEdgeImplementors = []string{"ProductEdge"}

func (ec *executionContext) _ProductEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ProductEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductEdge")
		case "node":
			out.Values[i] = ec._ProductEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._ProductEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productFeesImplementors = []string{"ProductFees"}

func (ec *executionContext) _ProductFees(ctx context.Context, sel ast.SelectionSet, obj *types.ProductFees) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productFeesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductFees")
		case "amount":
			out.Values[i] = ec._ProductFees_amount(ctx, field, obj)
		case "calculation_method":
			out.Values[i] = ec._ProductFees_calculation_method(ctx, field, obj)
		case "apply_date_method":
			out.Values[i] = ec._ProductFees_apply_date_method(ctx, field, obj)
		case "creation_date":
			out.Values[i] = ec._ProductFees_creation_date(ctx, field, obj)
		case "encoded_key":
			out.Values[i] = ec._ProductFees_encoded_key(ctx, field, obj)
		case "fee_application":
			out.Values[i] = ec._ProductFees_fee_application(ctx, field, obj)
		case "last_modified":
			out.Values[i] = ec._ProductFees_last_modified(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProductFees_name(ctx, field, obj)
		case "state":
			out.Values[i] = ec._ProductFees_state(ctx, field, obj)
		case "trigger":
			out.Values[i] = ec._ProductFees_trigger(ctx, field, obj)
		case "accounting_rules":
			out.Values[i] = ec._ProductFees_accounting_rules(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productInterestSettingImplementors = []string{"ProductInterestSetting"}

func (ec *executionContext) _ProductInterestSetting(ctx context.Context, sel ast.SelectionSet, obj *types.ProductInterestSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productInterestSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductInterestSetting")
		case "collect_interest_when_locked":
			out.Values[i] = ec._ProductInterestSetting_collect_interest_when_locked(ctx, field, obj)
		case "days_in_year":
			out.Values[i] = ec._ProductInterestSetting_days_in_year(ctx, field, obj)
		case "interest_calculation_balance":
			out.Values[i] = ec._ProductInterestSetting_interest_calculation_balance(ctx, field, obj)
		case "interest_paid_into_account":
			out.Values[i] = ec._ProductInterestSetting_interest_paid_into_account(ctx, field, obj)
		case "interest_payment_point":
			out.Values[i] = ec._ProductInterestSetting_interest_payment_point(ctx, field, obj)
		case "maximum_balance":
			out.Values[i] = ec._ProductInterestSetting_maximum_balance(ctx, field, obj)
		case "rate_setting":
			out.Values[i] = ec._ProductInterestSetting_rate_setting(ctx, field, obj)
		case "interest_payment_dates":
			out.Values[i] = ec._ProductInterestSetting_interest_payment_dates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productMaturityImplementors = []string{"ProductMaturity"}

func (ec *executionContext) _ProductMaturity(ctx context.Context, sel ast.SelectionSet, obj *types.ProductMaturity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productMaturityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductMaturity")
		case "unit":
			out.Values[i] = ec._ProductMaturity_unit(ctx, field, obj)
		case "default_value":
			out.Values[i] = ec._ProductMaturity_default_value(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ProductMaturity_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ProductMaturity_min(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productSettingImplementors = []string{"ProductSetting"}

func (ec *executionContext) _ProductSetting(ctx context.Context, sel ast.SelectionSet, obj *types.ProductSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductSetting")
		case "accounting_method":
			out.Values[i] = ec._ProductSetting_accounting_method(ctx, field, obj)
		case "interest_accounting":
			out.Values[i] = ec._ProductSetting_interest_accounting(ctx, field, obj)
		case "accounting_rules":
			out.Values[i] = ec._ProductSetting_accounting_rules(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productTemplatesImplementors = []string{"ProductTemplates"}

func (ec *executionContext) _ProductTemplates(ctx context.Context, sel ast.SelectionSet, obj *types.ProductTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductTemplates")
		case "creation_date":
			out.Values[i] = ec._ProductTemplates_creation_date(ctx, field, obj)
		case "encoded_key":
			out.Values[i] = ec._ProductTemplates_encoded_key(ctx, field, obj)
		case "last_modified_date":
			out.Values[i] = ec._ProductTemplates_last_modified_date(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProductTemplates_name(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ProductTemplates_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var proofImplementors = []string{"Proof", "ValidationData"}

func (ec *executionContext) _Proof(ctx context.Context, sel ast.SelectionSet, obj *types.Proof) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, proofImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Proof")
		case "id":
			out.Values[i] = ec._Proof_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Proof_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._Proof_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review":
			out.Values[i] = ec._Proof_review(ctx, field, obj)
		case "organisation":
			out.Values[i] = ec._Proof_organisation(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Proof_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Proof_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var proofConnectionImplementors = []string{"ProofConnection"}

func (ec *executionContext) _ProofConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ProofConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, proofConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProofConnection")
		case "edges":
			out.Values[i] = ec._ProofConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._ProofConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ProofConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProofConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var proofEdgeImplementors = []string{"ProofEdge"}

func (ec *executionContext) _ProofEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ProofEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, proofEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProofEdge")
		case "node":
			out.Values[i] = ec._ProofEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._ProofEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				return res
			})
		case "meStaff":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_meStaff(ctx, field)
				return res
			})
		case "person":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_person(ctx, field)
				return res
			})
		case "people":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_people(ctx, field)
				return res
			})
		case "identity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_identity(ctx, field)
				return res
			})
		case "identities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_identities(ctx, field)
				return res
			})
		case "checkEmail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkEmail(ctx, field)
				return res
			})
		case "address":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_address(ctx, field)
				return res
			})
		case "addresses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addresses(ctx, field)
				return res
			})
		case "addressLookup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addressLookup(ctx, field)
				return res
			})
		case "device":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_device(ctx, field)
				return res
			})
		case "devices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_devices(ctx, field)
				return res
			})
		case "auths":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_auths(ctx, field)
				return res
			})
		case "organisation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organisation(ctx, field)
				return res
			})
		case "organisations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organisations(ctx, field)
				return res
			})
		case "verification":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_verification(ctx, field)
				return res
			})
		case "verifications":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_verifications(ctx, field)
				return res
			})
		case "country":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_country(ctx, field)
				return res
			})
		case "countries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_countries(ctx, field)
				return res
			})
		case "currency":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currency(ctx, field)
				return res
			})
		case "currencies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currencies(ctx, field)
				return res
			})
		case "industry":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_industry(ctx, field)
				return res
			})
		case "industries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_industries(ctx, field)
				return res
			})
		case "activity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activity(ctx, field)
				return res
			})
		case "activities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "message":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_message(ctx, field)
				return res
			})
		case "messages":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_messages(ctx, field)
				return res
			})
		case "quote":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quote(ctx, field)
				return res
			})
		case "quotes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quotes(ctx, field)
				return res
			})
		case "price":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_price(ctx, field)
				return res
			})
		case "prices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_prices(ctx, field)
				return res
			})
		case "tag":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tag(ctx, field)
				return res
			})
		case "tags":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tags(ctx, field)
				return res
			})
		case "cdd":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cdd(ctx, field)
				return res
			})
		case "cdds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cdds(ctx, field)
				return res
			})
		case "validation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_validation(ctx, field)
				return res
			})
		case "validations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_validations(ctx, field)
				return res
			})
		case "check":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_check(ctx, field)
				return res
			})
		case "checks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checks(ctx, field)
				return res
			})
		case "screen":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_screen(ctx, field)
				return res
			})
		case "screens":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_screens(ctx, field)
				return res
			})
		case "report":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_report(ctx, field)
				return res
			})
		case "reports":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_reports(ctx, field)
				return res
			})
		case "proof":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_proof(ctx, field)
				return res
			})
		case "proofs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_proofs(ctx, field)
				return res
			})
		case "task":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_task(ctx, field)
				return res
			})
		case "tasks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tasks(ctx, field)
				return res
			})
		case "comment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comment(ctx, field)
				return res
			})
		case "comments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comments(ctx, field)
				return res
			})
		case "product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_product(ctx, field)
				return res
			})
		case "products":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				return res
			})
		case "account":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				return res
			})
		case "accounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accounts(ctx, field)
				return res
			})
		case "payee":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payee(ctx, field)
				return res
			})
		case "payees":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payees(ctx, field)
				return res
			})
		case "payment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payment(ctx, field)
				return res
			})
		case "payments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payments(ctx, field)
				return res
			})
		case "transaction":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transaction(ctx, field)
				return res
			})
		case "transactions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transactions(ctx, field)
				return res
			})
		case "fx":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fx(ctx, field)
				return res
			})
		case "transferFees":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transferFees(ctx, field)
				return res
			})
		case "acceptance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_acceptance(ctx, field)
				return res
			})
		case "acceptances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_acceptances(ctx, field)
				return res
			})
		case "node":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			})
		case "getOnfidoSDKToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOnfidoSDKToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quoteImplementors = []string{"Quote"}

func (ec *executionContext) _Quote(ctx context.Context, sel ast.SelectionSet, obj *types.Quote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quoteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quote")
		case "id":
			out.Values[i] = ec._Quote_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "has_expiry":
			out.Values[i] = ec._Quote_has_expiry(ctx, field, obj)
		case "expires":
			out.Values[i] = ec._Quote_expires(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Quote_ts(ctx, field, obj)
		case "fee":
			out.Values[i] = ec._Quote_fee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fx":
			out.Values[i] = ec._Quote_fx(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quoteConnectionImplementors = []string{"QuoteConnection"}

func (ec *executionContext) _QuoteConnection(ctx context.Context, sel ast.SelectionSet, obj *types.QuoteConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quoteConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuoteConnection")
		case "edges":
			out.Values[i] = ec._QuoteConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._QuoteConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._QuoteConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._QuoteConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quoteEdgeImplementors = []string{"QuoteEdge"}

func (ec *executionContext) _QuoteEdge(ctx context.Context, sel ast.SelectionSet, obj *types.QuoteEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quoteEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuoteEdge")
		case "node":
			out.Values[i] = ec._QuoteEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._QuoteEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rateSettingImplementors = []string{"RateSetting"}

func (ec *executionContext) _RateSetting(ctx context.Context, sel ast.SelectionSet, obj *types.RateSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rateSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RateSetting")
		case "accrue_after_maturity":
			out.Values[i] = ec._RateSetting_accrue_after_maturity(ctx, field, obj)
		case "index_source_key":
			out.Values[i] = ec._RateSetting_index_source_key(ctx, field, obj)
		case "charge_frequency":
			out.Values[i] = ec._RateSetting_charge_frequency(ctx, field, obj)
		case "charge_frequency_count":
			out.Values[i] = ec._RateSetting_charge_frequency_count(ctx, field, obj)
		case "rate_source":
			out.Values[i] = ec._RateSetting_rate_source(ctx, field, obj)
		case "rate_terms":
			out.Values[i] = ec._RateSetting_rate_terms(ctx, field, obj)
		case "rate_tiers":
			out.Values[i] = ec._RateSetting_rate_tiers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "interest_rate":
			out.Values[i] = ec._RateSetting_interest_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rateTiersImplementors = []string{"RateTiers"}

func (ec *executionContext) _RateTiers(ctx context.Context, sel ast.SelectionSet, obj *types.RateTiers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rateTiersImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RateTiers")
		case "encoded_key":
			out.Values[i] = ec._RateTiers_encoded_key(ctx, field, obj)
		case "ending_balance":
			out.Values[i] = ec._RateTiers_ending_balance(ctx, field, obj)
		case "ending_day":
			out.Values[i] = ec._RateTiers_ending_day(ctx, field, obj)
		case "interest_rate":
			out.Values[i] = ec._RateTiers_interest_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reportImplementors = []string{"Report"}

func (ec *executionContext) _Report(ctx context.Context, sel ast.SelectionSet, obj *types.Report) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Report")
		case "id":
			out.Values[i] = ec._Report_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._Report_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Report_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":
			out.Values[i] = ec._Report_organisation(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Report_ts(ctx, field, obj)
		case "review":
			out.Values[i] = ec._Report_review(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reportConnectionImplementors = []string{"ReportConnection"}

func (ec *executionContext) _ReportConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ReportConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReportConnection")
		case "edges":
			out.Values[i] = ec._ReportConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._ReportConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ReportConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ReportConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reportEdgeImplementors = []string{"ReportEdge"}

func (ec *executionContext) _ReportEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ReportEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReportEdge")
		case "node":
			out.Values[i] = ec._ReportEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._ReportEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reportReviewStatusImplementors = []string{"ReportReviewStatus"}

func (ec *executionContext) _ReportReviewStatus(ctx context.Context, sel ast.SelectionSet, obj *types.ReportReviewStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reportReviewStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReportReviewStatus")
		case "resubmit":
			out.Values[i] = ec._ReportReviewStatus_resubmit(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ReportReviewStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseImplementors = []string{"Response", "GraphQLResponse"}

func (ec *executionContext) _Response(ctx context.Context, sel ast.SelectionSet, obj *types.Response) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Response")
		case "message":
			out.Values[i] = ec._Response_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "success":
			out.Values[i] = ec._Response_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Response_code(ctx, field, obj)
		case "token":
			out.Values[i] = ec._Response_token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screenImplementors = []string{"Screen", "ValidationData"}

func (ec *executionContext) _Screen(ctx context.Context, sel ast.SelectionSet, obj *types.Screen) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Screen")
		case "id":
			out.Values[i] = ec._Screen_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._Screen_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":
			out.Values[i] = ec._Screen_organisation(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Screen_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Screen_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screenConnectionImplementors = []string{"ScreenConnection"}

func (ec *executionContext) _ScreenConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ScreenConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screenConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreenConnection")
		case "edges":
			out.Values[i] = ec._ScreenConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._ScreenConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ScreenConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ScreenConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screenEdgeImplementors = []string{"ScreenEdge"}

func (ec *executionContext) _ScreenEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ScreenEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screenEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreenEdge")
		case "node":
			out.Values[i] = ec._ScreenEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._ScreenEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var socialImplementors = []string{"Social"}

func (ec *executionContext) _Social(ctx context.Context, sel ast.SelectionSet, obj *types.Social) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Social")
		case "youtube":
			out.Values[i] = ec._Social_youtube(ctx, field, obj)
		case "github":
			out.Values[i] = ec._Social_github(ctx, field, obj)
		case "facebook":
			out.Values[i] = ec._Social_facebook(ctx, field, obj)
		case "pinterest":
			out.Values[i] = ec._Social_pinterest(ctx, field, obj)
		case "instagram":
			out.Values[i] = ec._Social_instagram(ctx, field, obj)
		case "linkedin":
			out.Values[i] = ec._Social_linkedin(ctx, field, obj)
		case "medium":
			out.Values[i] = ec._Social_medium(ctx, field, obj)
		case "crunchbase":
			out.Values[i] = ec._Social_crunchbase(ctx, field, obj)
		case "twitter":
			out.Values[i] = ec._Social_twitter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffImplementors = []string{"Staff"}

func (ec *executionContext) _Staff(ctx context.Context, sel ast.SelectionSet, obj *types.Staff) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Staff")
		case "id":
			out.Values[i] = ec._Staff_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "first_name":
			out.Values[i] = ec._Staff_first_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "last_name":
			out.Values[i] = ec._Staff_last_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Staff_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emails":
			out.Values[i] = ec._Staff_emails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phones":
			out.Values[i] = ec._Staff_phones(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identities":
			out.Values[i] = ec._Staff_identities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Staff_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "cdds":
		return ec._Subscription_cdds(ctx, fields[0])
	case "cdd":
		return ec._Subscription_cdd(ctx, fields[0])
	case "accounts":
		return ec._Subscription_accounts(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *types.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Tag_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagConnectionImplementors = []string{"TagConnection"}

func (ec *executionContext) _TagConnection(ctx context.Context, sel ast.SelectionSet, obj *types.TagConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagConnection")
		case "edges":
			out.Values[i] = ec._TagConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._TagConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TagConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TagConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagEdgeImplementors = []string{"TagEdge"}

func (ec *executionContext) _TagEdge(ctx context.Context, sel ast.SelectionSet, obj *types.TagEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagEdge")
		case "node":
			out.Values[i] = ec._TagEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._TagEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskImplementors = []string{"Task"}

func (ec *executionContext) _Task(ctx context.Context, sel ast.SelectionSet, obj *types.Task) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Task")
		case "id":
			out.Values[i] = ec._Task_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reporter":
			out.Values[i] = ec._Task_reporter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignee":
			out.Values[i] = ec._Task_assignee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approver":
			out.Values[i] = ec._Task_approver(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._Task_notes(ctx, field, obj)
		case "stage":
			out.Values[i] = ec._Task_stage(ctx, field, obj)
		case "approved":
			out.Values[i] = ec._Task_approved(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Task_version(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Task_ts(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._Task_comments(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Task_tags(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskConnectionImplementors = []string{"TaskConnection"}

func (ec *executionContext) _TaskConnection(ctx context.Context, sel ast.SelectionSet, obj *types.TaskConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskConnection")
		case "edges":
			out.Values[i] = ec._TaskConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._TaskConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TaskConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TaskConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskEdgeImplementors = []string{"TaskEdge"}

func (ec *executionContext) _TaskEdge(ctx context.Context, sel ast.SelectionSet, obj *types.TaskEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskEdge")
		case "node":
			out.Values[i] = ec._TaskEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._TaskEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transactionImplementors = []string{"Transaction"}

func (ec *executionContext) _Transaction(ctx context.Context, sel ast.SelectionSet, obj *types.Transaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Transaction")
		case "id":
			out.Values[i] = ec._Transaction_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":
			out.Values[i] = ec._Transaction_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._Transaction_ts(ctx, field, obj)
		case "transaction_data":
			out.Values[i] = ec._Transaction_transaction_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transactionConnectionImplementors = []string{"TransactionConnection"}

func (ec *executionContext) _TransactionConnection(ctx context.Context, sel ast.SelectionSet, obj *types.TransactionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionConnection")
		case "edges":
			out.Values[i] = ec._TransactionConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._TransactionConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._TransactionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TransactionConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transactionDataImplementors = []string{"TransactionData"}

func (ec *executionContext) _TransactionData(ctx context.Context, sel ast.SelectionSet, obj *types.TransactionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionData")
		case "id":
			out.Values[i] = ec._TransactionData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._TransactionData_amount(ctx, field, obj)
		case "booking_date":
			out.Values[i] = ec._TransactionData_booking_date(ctx, field, obj)
		case "creation_date":
			out.Values[i] = ec._TransactionData_creation_date(ctx, field, obj)
		case "currency_code":
			out.Values[i] = ec._TransactionData_currency_code(ctx, field, obj)
		case "encoded_key":
			out.Values[i] = ec._TransactionData_encoded_key(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._TransactionData_external_id(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._TransactionData_notes(ctx, field, obj)
		case "parent_account_key":
			out.Values[i] = ec._TransactionData_parent_account_key(ctx, field, obj)
		case "payment_order_id":
			out.Values[i] = ec._TransactionData_payment_order_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._TransactionData_type(ctx, field, obj)
		case "user_key":
			out.Values[i] = ec._TransactionData_user_key(ctx, field, obj)
		case "value_date":
			out.Values[i] = ec._TransactionData_value_date(ctx, field, obj)
		case "transfer_details":
			out.Values[i] = ec._TransactionData_transfer_details(ctx, field, obj)
		case "fees":
			out.Values[i] = ec._TransactionData_fees(ctx, field, obj)
		case "affected_amounts":
			out.Values[i] = ec._TransactionData_affected_amounts(ctx, field, obj)
		case "account_balances":
			out.Values[i] = ec._TransactionData_account_balances(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transactionEdgeImplementors = []string{"TransactionEdge"}

func (ec *executionContext) _TransactionEdge(ctx context.Context, sel ast.SelectionSet, obj *types.TransactionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionEdge")
		case "node":
			out.Values[i] = ec._TransactionEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._TransactionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transactionFeeImplementors = []string{"TransactionFee"}

func (ec *executionContext) _TransactionFee(ctx context.Context, sel ast.SelectionSet, obj *types.TransactionFee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionFeeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionFee")
		case "Amount":
			out.Values[i] = ec._TransactionFee_Amount(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._TransactionFee_Name(ctx, field, obj)
		case "PredefinedFeeKey":
			out.Values[i] = ec._TransactionFee_PredefinedFeeKey(ctx, field, obj)
		case "TaxAmount":
			out.Values[i] = ec._TransactionFee_TaxAmount(ctx, field, obj)
		case "Trigger":
			out.Values[i] = ec._TransactionFee_Trigger(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transferDetailsImplementors = []string{"TransferDetails"}

func (ec *executionContext) _TransferDetails(ctx context.Context, sel ast.SelectionSet, obj *types.TransferDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferDetails")
		case "linked_loan_transaction_key":
			out.Values[i] = ec._TransferDetails_linked_loan_transaction_key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transferFeesImplementors = []string{"TransferFees"}

func (ec *executionContext) _TransferFees(ctx context.Context, sel ast.SelectionSet, obj *types.TransferFees) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferFeesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferFees")
		case "currency":
			out.Values[i] = ec._TransferFees_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_currency":
			out.Values[i] = ec._TransferFees_base_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fees":
			out.Values[i] = ec._TransferFees_fees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ts":
			out.Values[i] = ec._TransferFees_ts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationImplementors = []string{"Validation"}

func (ec *executionContext) _Validation(ctx context.Context, sel ast.SelectionSet, obj *types.Validation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Validation")
		case "id":
			out.Values[i] = ec._Validation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validation_type":
			out.Values[i] = ec._Validation_validation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicant":
			out.Values[i] = ec._Validation_applicant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._Validation_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":
			out.Values[i] = ec._Validation_organisation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Validation_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approved":
			out.Values[i] = ec._Validation_approved(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Validation_ts(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._Validation_actions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationConnectionImplementors = []string{"ValidationConnection"}

func (ec *executionContext) _ValidationConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ValidationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValidationConnection")
		case "edges":
			out.Values[i] = ec._ValidationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._ValidationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._ValidationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ValidationConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationEdgeImplementors = []string{"ValidationEdge"}

func (ec *executionContext) _ValidationEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ValidationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValidationEdge")
		case "node":
			out.Values[i] = ec._ValidationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._ValidationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var variableFeeImplementors = []string{"VariableFee"}

func (ec *executionContext) _VariableFee(ctx context.Context, sel ast.SelectionSet, obj *types.VariableFee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableFeeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VariableFee")
		case "base_rate":
			out.Values[i] = ec._VariableFee_base_rate(ctx, field, obj)
		case "discount":
			out.Values[i] = ec._VariableFee_discount(ctx, field, obj)
		case "applied_rate":
			out.Values[i] = ec._VariableFee_applied_rate(ctx, field, obj)
		case "partner":
			out.Values[i] = ec._VariableFee_partner(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verificationImplementors = []string{"Verification"}

func (ec *executionContext) _Verification(ctx context.Context, sel ast.SelectionSet, obj *types.Verification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Verification")
		case "id":
			out.Values[i] = ec._Verification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Verification_code(ctx, field, obj)
		case "target":
			out.Values[i] = ec._Verification_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Verification_type(ctx, field, obj)
		case "validated":
			out.Values[i] = ec._Verification_validated(ctx, field, obj)
		case "ts":
			out.Values[i] = ec._Verification_ts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verificationConnectionImplementors = []string{"VerificationConnection"}

func (ec *executionContext) _VerificationConnection(ctx context.Context, sel ast.SelectionSet, obj *types.VerificationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verificationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerificationConnection")
		case "edges":
			out.Values[i] = ec._VerificationConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":
			out.Values[i] = ec._VerificationConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._VerificationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			out.Values[i] = ec._VerificationConnection_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verificationEdgeImplementors = []string{"VerificationEdge"}

func (ec *executionContext) _VerificationEdge(ctx context.Context, sel ast.SelectionSet, obj *types.VerificationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verificationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerificationEdge")
		case "node":
			out.Values[i] = ec._VerificationEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":
			out.Values[i] = ec._VerificationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAcceptance2ᚕᚖmsᚗapiᚋtypesᚐAcceptanceᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Acceptance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAcceptance2ᚖmsᚗapiᚋtypesᚐAcceptance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAcceptance2ᚖmsᚗapiᚋtypesᚐAcceptance(ctx context.Context, sel ast.SelectionSet, v *types.Acceptance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Acceptance(ctx, sel, v)
}

func (ec *executionContext) marshalNAcceptanceEdge2ᚕᚖmsᚗapiᚋtypesᚐAcceptanceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AcceptanceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAcceptanceEdge2ᚖmsᚗapiᚋtypesᚐAcceptanceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAcceptanceEdge2ᚖmsᚗapiᚋtypesᚐAcceptanceEdge(ctx context.Context, sel ast.SelectionSet, v *types.AcceptanceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AcceptanceEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNAccount2ᚕᚖmsᚗapiᚋtypesᚐAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Account) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v *types.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountEdge2ᚕᚖmsᚗapiᚋtypesᚐAccountEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AccountEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountEdge2ᚖmsᚗapiᚋtypesᚐAccountEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAccountEdge2ᚖmsᚗapiᚋtypesᚐAccountEdge(ctx context.Context, sel ast.SelectionSet, v *types.AccountEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountingRules2ᚕᚖmsᚗapiᚋtypesᚐAccountingRules(ctx context.Context, sel ast.SelectionSet, v []*types.AccountingRules) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccountingRules2ᚖmsᚗapiᚋtypesᚐAccountingRules(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAction2ᚕᚖmsᚗapiᚋtypesᚐActionᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Action) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAction2ᚖmsᚗapiᚋtypesᚐAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAction2ᚖmsᚗapiᚋtypesᚐAction(ctx context.Context, sel ast.SelectionSet, v *types.Action) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Action(ctx, sel, v)
}

func (ec *executionContext) marshalNActivity2ᚕᚖmsᚗapiᚋtypesᚐActivity(ctx context.Context, sel ast.SelectionSet, v []*types.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActivity2ᚖmsᚗapiᚋtypesᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNActivity2ᚕᚖmsᚗapiᚋtypesᚐActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2ᚖmsᚗapiᚋtypesᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNActivity2ᚖmsᚗapiᚋtypesᚐActivity(ctx context.Context, sel ast.SelectionSet, v *types.Activity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) marshalNAddress2ᚕᚖmsᚗapiᚋtypesᚐAddress(ctx context.Context, sel ast.SelectionSet, v []*types.Address) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAddress2ᚕᚖmsᚗapiᚋtypesᚐAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Address) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx context.Context, sel ast.SelectionSet, v *types.Address) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) marshalNAddressEdge2ᚕᚖmsᚗapiᚋtypesᚐAddressEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AddressEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAddressEdge2ᚖmsᚗapiᚋtypesᚐAddressEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAddressEdge2ᚖmsᚗapiᚋtypesᚐAddressEdge(ctx context.Context, sel ast.SelectionSet, v *types.AddressEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AddressEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddressInput2msᚗapiᚋtypesᚐAddressInput(ctx context.Context, v interface{}) (types.AddressInput, error) {
	res, err := ec.unmarshalInputAddressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddressInput2ᚖmsᚗapiᚋtypesᚐAddressInput(ctx context.Context, v interface{}) (*types.AddressInput, error) {
	res, err := ec.unmarshalInputAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAuthInput2msᚗapiᚋtypesᚐAuthInput(ctx context.Context, v interface{}) (types.AuthInput, error) {
	res, err := ec.unmarshalInputAuthInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthResponse2msᚗapiᚋtypesᚐAuthResponse(ctx context.Context, sel ast.SelectionSet, v types.AuthResponse) graphql.Marshaler {
	return ec._AuthResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthResponse2ᚖmsᚗapiᚋtypesᚐAuthResponse(ctx context.Context, sel ast.SelectionSet, v *types.AuthResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthType2msᚗapiᚋtypesᚐAuthType(ctx context.Context, v interface{}) (types.AuthType, error) {
	var res types.AuthType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthType2msᚗapiᚋtypesᚐAuthType(ctx context.Context, sel ast.SelectionSet, v types.AuthType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNBeneficiary2ᚖmsᚗapiᚋtypesᚐBeneficiary(ctx context.Context, sel ast.SelectionSet, v *types.Beneficiary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Beneficiary(ctx, sel, v)
}

func (ec *executionContext) marshalNBeneficiaryAccount2msᚗapiᚋtypesᚐBeneficiaryAccount(ctx context.Context, sel ast.SelectionSet, v types.BeneficiaryAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BeneficiaryAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBeneficiaryInput2ᚖmsᚗapiᚋtypesᚐBeneficiaryInput(ctx context.Context, v interface{}) (*types.BeneficiaryInput, error) {
	res, err := ec.unmarshalInputBeneficiaryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCDD2ᚕᚖmsᚗapiᚋtypesᚐCddᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Cdd) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx context.Context, sel ast.SelectionSet, v *types.Cdd) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CDD(ctx, sel, v)
}

func (ec *executionContext) marshalNCDDEdge2ᚕᚖmsᚗapiᚋtypesᚐCDDEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CDDEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCDDEdge2ᚖmsᚗapiᚋtypesᚐCDDEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCDDEdge2ᚖmsᚗapiᚋtypesᚐCDDEdge(ctx context.Context, sel ast.SelectionSet, v *types.CDDEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CDDEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCheck2ᚕᚖmsᚗapiᚋtypesᚐCheckᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Check) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCheck2ᚖmsᚗapiᚋtypesᚐCheck(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCheck2ᚖmsᚗapiᚋtypesᚐCheck(ctx context.Context, sel ast.SelectionSet, v *types.Check) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Check(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckData2ᚖmsᚗapiᚋtypesᚐCheckData(ctx context.Context, sel ast.SelectionSet, v *types.CheckData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckData(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckEdge2ᚕᚖmsᚗapiᚋtypesᚐCheckEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CheckEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCheckEdge2ᚖmsᚗapiᚋtypesᚐCheckEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCheckEdge2ᚖmsᚗapiᚋtypesᚐCheckEdge(ctx context.Context, sel ast.SelectionSet, v *types.CheckEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNComment2ᚕᚖmsᚗapiᚋtypesᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖmsᚗapiᚋtypesᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComment2ᚖmsᚗapiᚋtypesᚐComment(ctx context.Context, sel ast.SelectionSet, v *types.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentEdge2ᚕᚖmsᚗapiᚋtypesᚐCommentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CommentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommentEdge2ᚖmsᚗapiᚋtypesᚐCommentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommentEdge2ᚖmsᚗapiᚋtypesᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v *types.CommentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNContent2ᚖmsᚗapiᚋtypesᚐContent(ctx context.Context, sel ast.SelectionSet, v *types.Content) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Content(ctx, sel, v)
}

func (ec *executionContext) marshalNCountry2ᚕᚖmsᚗapiᚋtypesᚐCountryᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Country) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx context.Context, sel ast.SelectionSet, v *types.Country) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalNCountryEdge2ᚕᚖmsᚗapiᚋtypesᚐCountryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CountryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountryEdge2ᚖmsᚗapiᚋtypesᚐCountryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCountryEdge2ᚖmsᚗapiᚋtypesᚐCountryEdge(ctx context.Context, sel ast.SelectionSet, v *types.CountryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CountryEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCredentials2ᚖmsᚗapiᚋtypesᚐCredentials(ctx context.Context, sel ast.SelectionSet, v *types.Credentials) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Credentials(ctx, sel, v)
}

func (ec *executionContext) marshalNCurrency2ᚕᚖmsᚗapiᚋtypesᚐCurrencyᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Currency) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *types.Currency) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Currency(ctx, sel, v)
}

func (ec *executionContext) marshalNCurrencyEdge2ᚕᚖmsᚗapiᚋtypesᚐCurrencyEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CurrencyEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCurrencyEdge2ᚖmsᚗapiᚋtypesᚐCurrencyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCurrencyEdge2ᚖmsᚗapiᚋtypesᚐCurrencyEdge(ctx context.Context, sel ast.SelectionSet, v *types.CurrencyEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CurrencyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeliveryMode2msᚗapiᚋtypesᚐDeliveryMode(ctx context.Context, v interface{}) (types.DeliveryMode, error) {
	var res types.DeliveryMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryMode2msᚗapiᚋtypesᚐDeliveryMode(ctx context.Context, sel ast.SelectionSet, v types.DeliveryMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDevice2ᚕᚖmsᚗapiᚋtypesᚐDevice(ctx context.Context, sel ast.SelectionSet, v []*types.Device) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDevice2ᚕᚖmsᚗapiᚋtypesᚐDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Device) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx context.Context, sel ast.SelectionSet, v *types.Device) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalNDeviceEdge2ᚕᚖmsᚗapiᚋtypesᚐDeviceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.DeviceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceEdge2ᚖmsᚗapiᚋtypesᚐDeviceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeviceEdge2ᚖmsᚗapiᚋtypesᚐDeviceEdge(ctx context.Context, sel ast.SelectionSet, v *types.DeviceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeviceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceInput2msᚗapiᚋtypesᚐDeviceInput(ctx context.Context, v interface{}) (types.DeviceInput, error) {
	res, err := ec.unmarshalInputDeviceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeviceInput2ᚖmsᚗapiᚋtypesᚐDeviceInput(ctx context.Context, v interface{}) (*types.DeviceInput, error) {
	res, err := ec.unmarshalInputDeviceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDevicePreferenceType2msᚗapiᚋtypesᚐDevicePreferenceType(ctx context.Context, v interface{}) (types.DevicePreferenceType, error) {
	var res types.DevicePreferenceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDevicePreferenceType2msᚗapiᚋtypesᚐDevicePreferenceType(ctx context.Context, sel ast.SelectionSet, v types.DevicePreferenceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDeviceToken2ᚕᚖmsᚗapiᚋtypesᚐDeviceToken(ctx context.Context, sel ast.SelectionSet, v []*types.DeviceToken) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceToken2ᚖmsᚗapiᚋtypesᚐDeviceToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNDeviceTokenInput2ᚕᚖmsᚗapiᚋtypesᚐDeviceTokenInput(ctx context.Context, v interface{}) ([]*types.DeviceTokenInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*types.DeviceTokenInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODeviceTokenInput2ᚖmsᚗapiᚋtypesᚐDeviceTokenInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDeviceTokenType2msᚗapiᚋtypesᚐDeviceTokenType(ctx context.Context, v interface{}) (types.DeviceTokenType, error) {
	var res types.DeviceTokenType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceTokenType2msᚗapiᚋtypesᚐDeviceTokenType(ctx context.Context, sel ast.SelectionSet, v types.DeviceTokenType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEmail2ᚕᚖmsᚗapiᚋtypesᚐEmail(ctx context.Context, sel ast.SelectionSet, v []*types.Email) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEmail2ᚖmsᚗapiᚋtypesᚐEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEntity2msᚗapiᚋtypesᚐEntity(ctx context.Context, sel ast.SelectionSet, v types.Entity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Entity(ctx, sel, v)
}

func (ec *executionContext) marshalNFee2ᚕᚖmsᚗapiᚋtypesᚐFeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Fee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFee2ᚖmsᚗapiᚋtypesᚐFee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFee2ᚖmsᚗapiᚋtypesᚐFee(ctx context.Context, sel ast.SelectionSet, v *types.Fee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Fee(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFx2ᚕᚖmsᚗapiᚋtypesᚐFxᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Fx) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFx2ᚖmsᚗapiᚋtypesᚐFx(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFx2ᚖmsᚗapiᚋtypesᚐFx(ctx context.Context, sel ast.SelectionSet, v *types.Fx) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Fx(ctx, sel, v)
}

func (ec *executionContext) marshalNFxEdge2ᚕᚖmsᚗapiᚋtypesᚐFxEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.FxEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFxEdge2ᚖmsᚗapiᚋtypesᚐFxEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFxEdge2ᚖmsᚗapiᚋtypesᚐFxEdge(ctx context.Context, sel ast.SelectionSet, v *types.FxEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FxEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx context.Context, sel ast.SelectionSet, v []*types.Identity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx context.Context, sel ast.SelectionSet, v *types.Identity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Identity(ctx, sel, v)
}

func (ec *executionContext) marshalNImageAssets2ᚕᚖmsᚗapiᚋtypesᚐImageAssets(ctx context.Context, sel ast.SelectionSet, v []*types.ImageAssets) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImageAssets2ᚖmsᚗapiᚋtypesᚐImageAssets(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIndustry2ᚕᚖmsᚗapiᚋtypesᚐIndustry(ctx context.Context, sel ast.SelectionSet, v []*types.Industry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIndustry2ᚕᚖmsᚗapiᚋtypesᚐIndustryᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Industry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx context.Context, sel ast.SelectionSet, v *types.Industry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Industry(ctx, sel, v)
}

func (ec *executionContext) marshalNIndustryEdge2ᚕᚖmsᚗapiᚋtypesᚐIndustryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.IndustryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIndustryEdge2ᚖmsᚗapiᚋtypesᚐIndustryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIndustryEdge2ᚖmsᚗapiᚋtypesᚐIndustryEdge(ctx context.Context, sel ast.SelectionSet, v *types.IndustryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndustryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNInterestPaymentDates2ᚕᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx context.Context, sel ast.SelectionSet, v []*types.InterestPaymentDates) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInterestPaymentDates2ᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNJSON2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMessage2ᚕᚖmsᚗapiᚋtypesᚐMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Message) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMessage2ᚖmsᚗapiᚋtypesᚐMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMessage2ᚖmsᚗapiᚋtypesᚐMessage(ctx context.Context, sel ast.SelectionSet, v *types.Message) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageEdge2ᚕᚖmsᚗapiᚋtypesᚐMessageEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.MessageEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMessageEdge2ᚖmsᚗapiᚋtypesᚐMessageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMessageEdge2ᚖmsᚗapiᚋtypesᚐMessageEdge(ctx context.Context, sel ast.SelectionSet, v *types.MessageEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MessageEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganisation2ᚕᚖmsᚗapiᚋtypesᚐOrganisationᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Organisation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v *types.Organisation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Organisation(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganisationEdge2ᚕᚖmsᚗapiᚋtypesᚐOrganisationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.OrganisationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganisationEdge2ᚖmsᚗapiᚋtypesᚐOrganisationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrganisationEdge2ᚖmsᚗapiᚋtypesᚐOrganisationEdge(ctx context.Context, sel ast.SelectionSet, v *types.OrganisationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganisationEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNOwner2msᚗapiᚋtypesᚐOwner(ctx context.Context, sel ast.SelectionSet, v types.Owner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Owner(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖmsᚗapiᚋtypesᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *types.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPayee2ᚕᚖmsᚗapiᚋtypesᚐPayeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Payee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayee2ᚖmsᚗapiᚋtypesᚐPayee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPayee2ᚖmsᚗapiᚋtypesᚐPayee(ctx context.Context, sel ast.SelectionSet, v *types.Payee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Payee(ctx, sel, v)
}

func (ec *executionContext) marshalNPayeeAccount2ᚕᚖmsᚗapiᚋtypesᚐPayeeAccount(ctx context.Context, sel ast.SelectionSet, v []*types.PayeeAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPayeeAccount2ᚖmsᚗapiᚋtypesᚐPayeeAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNPayeeAccountInput2msᚗapiᚋtypesᚐPayeeAccountInput(ctx context.Context, v interface{}) (types.PayeeAccountInput, error) {
	res, err := ec.unmarshalInputPayeeAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPayeeAccountInput2ᚕᚖmsᚗapiᚋtypesᚐPayeeAccountInput(ctx context.Context, v interface{}) ([]*types.PayeeAccountInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*types.PayeeAccountInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPayeeAccountInput2ᚖmsᚗapiᚋtypesᚐPayeeAccountInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPayeeEdge2ᚕᚖmsᚗapiᚋtypesᚐPayeeEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.PayeeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayeeEdge2ᚖmsᚗapiᚋtypesᚐPayeeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPayeeEdge2ᚖmsᚗapiᚋtypesᚐPayeeEdge(ctx context.Context, sel ast.SelectionSet, v *types.PayeeEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayeeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPayeeInput2msᚗapiᚋtypesᚐPayeeInput(ctx context.Context, v interface{}) (types.PayeeInput, error) {
	res, err := ec.unmarshalInputPayeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayment2ᚕᚖmsᚗapiᚋtypesᚐPaymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Payment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayment2ᚖmsᚗapiᚋtypesᚐPayment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPayment2ᚖmsᚗapiᚋtypesᚐPayment(ctx context.Context, sel ast.SelectionSet, v *types.Payment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentEdge2ᚕᚖmsᚗapiᚋtypesᚐPaymentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.PaymentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPaymentEdge2ᚖmsᚗapiᚋtypesᚐPaymentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPaymentEdge2ᚖmsᚗapiᚋtypesᚐPaymentEdge(ctx context.Context, sel ast.SelectionSet, v *types.PaymentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentInput2msᚗapiᚋtypesᚐPaymentInput(ctx context.Context, v interface{}) (types.PaymentInput, error) {
	res, err := ec.unmarshalInputPaymentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPerson2ᚕᚖmsᚗapiᚋtypesᚐPersonᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Person) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx context.Context, sel ast.SelectionSet, v *types.Person) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonEdge2ᚕᚖmsᚗapiᚋtypesᚐPersonEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.PersonEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPersonEdge2ᚖmsᚗapiᚋtypesᚐPersonEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPersonEdge2ᚖmsᚗapiᚋtypesᚐPersonEdge(ctx context.Context, sel ast.SelectionSet, v *types.PersonEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPersonInput2msᚗapiᚋtypesᚐPersonInput(ctx context.Context, v interface{}) (types.PersonInput, error) {
	res, err := ec.unmarshalInputPersonInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPhone2ᚕᚖmsᚗapiᚋtypesᚐPhone(ctx context.Context, sel ast.SelectionSet, v []*types.Phone) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPhone2ᚖmsᚗapiᚋtypesᚐPhone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProduct2ᚕᚖmsᚗapiᚋtypesᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx context.Context, sel ast.SelectionSet, v *types.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNProductDetails2ᚖmsᚗapiᚋtypesᚐProductDetails(ctx context.Context, sel ast.SelectionSet, v *types.ProductDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNProductEdge2ᚕᚖmsᚗapiᚋtypesᚐProductEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ProductEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductEdge2ᚖmsᚗapiᚋtypesᚐProductEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductEdge2ᚖmsᚗapiᚋtypesᚐProductEdge(ctx context.Context, sel ast.SelectionSet, v *types.ProductEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNProductFees2ᚕᚖmsᚗapiᚋtypesᚐProductFees(ctx context.Context, sel ast.SelectionSet, v []*types.ProductFees) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductFees2ᚖmsᚗapiᚋtypesᚐProductFees(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNProductInput2msᚗapiᚋtypesᚐProductInput(ctx context.Context, v interface{}) (types.ProductInput, error) {
	res, err := ec.unmarshalInputProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProductTemplates2ᚕᚖmsᚗapiᚋtypesᚐProductTemplates(ctx context.Context, sel ast.SelectionSet, v []*types.ProductTemplates) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductTemplates2ᚖmsᚗapiᚋtypesᚐProductTemplates(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProof2ᚕᚖmsᚗapiᚋtypesᚐProofᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Proof) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProof2ᚖmsᚗapiᚋtypesᚐProof(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProof2ᚖmsᚗapiᚋtypesᚐProof(ctx context.Context, sel ast.SelectionSet, v *types.Proof) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Proof(ctx, sel, v)
}

func (ec *executionContext) marshalNProofEdge2ᚕᚖmsᚗapiᚋtypesᚐProofEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ProofEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProofEdge2ᚖmsᚗapiᚋtypesᚐProofEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProofEdge2ᚖmsᚗapiᚋtypesᚐProofEdge(ctx context.Context, sel ast.SelectionSet, v *types.ProofEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProofEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProofType2msᚗapiᚋtypesᚐProofType(ctx context.Context, v interface{}) (types.ProofType, error) {
	var res types.ProofType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProofType2msᚗapiᚋtypesᚐProofType(ctx context.Context, sel ast.SelectionSet, v types.ProofType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNQuote2ᚕᚖmsᚗapiᚋtypesᚐQuoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Quote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx context.Context, sel ast.SelectionSet, v *types.Quote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Quote(ctx, sel, v)
}

func (ec *executionContext) marshalNQuoteEdge2ᚕᚖmsᚗapiᚋtypesᚐQuoteEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.QuoteEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuoteEdge2ᚖmsᚗapiᚋtypesᚐQuoteEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNQuoteEdge2ᚖmsᚗapiᚋtypesᚐQuoteEdge(ctx context.Context, sel ast.SelectionSet, v *types.QuoteEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QuoteEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNRateTiers2ᚕᚖmsᚗapiᚋtypesᚐRateTiers(ctx context.Context, sel ast.SelectionSet, v []*types.RateTiers) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORateTiers2ᚖmsᚗapiᚋtypesᚐRateTiers(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNReport2ᚕᚖmsᚗapiᚋtypesᚐReport(ctx context.Context, sel ast.SelectionSet, v []*types.Report) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReport2ᚖmsᚗapiᚋtypesᚐReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNReport2ᚕᚖmsᚗapiᚋtypesᚐReportᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Report) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReport2ᚖmsᚗapiᚋtypesᚐReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNReport2ᚖmsᚗapiᚋtypesᚐReport(ctx context.Context, sel ast.SelectionSet, v *types.Report) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Report(ctx, sel, v)
}

func (ec *executionContext) marshalNReportEdge2ᚕᚖmsᚗapiᚋtypesᚐReportEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ReportEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReportEdge2ᚖmsᚗapiᚋtypesᚐReportEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNReportEdge2ᚖmsᚗapiᚋtypesᚐReportEdge(ctx context.Context, sel ast.SelectionSet, v *types.ReportEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReportEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReportInput2ᚕᚖmsᚗapiᚋtypesᚐReportInputᚄ(ctx context.Context, v interface{}) ([]*types.ReportInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*types.ReportInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReportInput2ᚖmsᚗapiᚋtypesᚐReportInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNReportInput2ᚖmsᚗapiᚋtypesᚐReportInput(ctx context.Context, v interface{}) (*types.ReportInput, error) {
	res, err := ec.unmarshalInputReportInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResponse2msᚗapiᚋtypesᚐResponse(ctx context.Context, sel ast.SelectionSet, v types.Response) graphql.Marshaler {
	return ec._Response(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponse2ᚖmsᚗapiᚋtypesᚐResponse(ctx context.Context, sel ast.SelectionSet, v *types.Response) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Response(ctx, sel, v)
}

func (ec *executionContext) marshalNScreen2ᚕᚖmsᚗapiᚋtypesᚐScreenᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Screen) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreen2ᚖmsᚗapiᚋtypesᚐScreen(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNScreen2ᚖmsᚗapiᚋtypesᚐScreen(ctx context.Context, sel ast.SelectionSet, v *types.Screen) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Screen(ctx, sel, v)
}

func (ec *executionContext) marshalNScreenEdge2ᚕᚖmsᚗapiᚋtypesᚐScreenEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ScreenEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreenEdge2ᚖmsᚗapiᚋtypesᚐScreenEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNScreenEdge2ᚖmsᚗapiᚋtypesᚐScreenEdge(ctx context.Context, sel ast.SelectionSet, v *types.ScreenEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScreenEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNStaff2ᚖmsᚗapiᚋtypesᚐStaff(ctx context.Context, sel ast.SelectionSet, v *types.Staff) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Staff(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffStatus2msᚗapiᚋtypesᚐStaffStatus(ctx context.Context, v interface{}) (types.StaffStatus, error) {
	var res types.StaffStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStaffStatus2msᚗapiᚋtypesᚐStaffStatus(ctx context.Context, sel ast.SelectionSet, v types.StaffStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNState2msᚗapiᚋtypesᚐState(ctx context.Context, v interface{}) (types.State, error) {
	var res types.State
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNState2msᚗapiᚋtypesᚐState(ctx context.Context, sel ast.SelectionSet, v types.State) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNSubmitProofInput2msᚗapiᚋtypesᚐSubmitProofInput(ctx context.Context, v interface{}) (types.SubmitProofInput, error) {
	res, err := ec.unmarshalInputSubmitProofInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTag2ᚕᚖmsᚗapiᚋtypesᚐTag(ctx context.Context, sel ast.SelectionSet, v []*types.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTag2ᚖmsᚗapiᚋtypesᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTag2ᚕᚖmsᚗapiᚋtypesᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖmsᚗapiᚋtypesᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTag2ᚖmsᚗapiᚋtypesᚐTag(ctx context.Context, sel ast.SelectionSet, v *types.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) marshalNTagEdge2ᚕᚖmsᚗapiᚋtypesᚐTagEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.TagEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTagEdge2ᚖmsᚗapiᚋtypesᚐTagEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTagEdge2ᚖmsᚗapiᚋtypesᚐTagEdge(ctx context.Context, sel ast.SelectionSet, v *types.TagEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TagEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNTask2ᚕᚖmsᚗapiᚋtypesᚐTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Task) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTask2ᚖmsᚗapiᚋtypesᚐTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTask2ᚖmsᚗapiᚋtypesᚐTask(ctx context.Context, sel ast.SelectionSet, v *types.Task) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskEdge2ᚕᚖmsᚗapiᚋtypesᚐTaskEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.TaskEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskEdge2ᚖmsᚗapiᚋtypesᚐTaskEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTaskEdge2ᚖmsᚗapiᚋtypesᚐTaskEdge(ctx context.Context, sel ast.SelectionSet, v *types.TaskEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TaskEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNTransaction2ᚕᚖmsᚗapiᚋtypesᚐTransactionᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Transaction) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransaction2ᚖmsᚗapiᚋtypesᚐTransaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTransaction2ᚖmsᚗapiᚋtypesᚐTransaction(ctx context.Context, sel ast.SelectionSet, v *types.Transaction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Transaction(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionEdge2ᚕᚖmsᚗapiᚋtypesᚐTransactionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.TransactionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionEdge2ᚖmsᚗapiᚋtypesᚐTransactionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTransactionEdge2ᚖmsᚗapiᚋtypesᚐTransactionEdge(ctx context.Context, sel ast.SelectionSet, v *types.TransactionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TransactionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNValidateUserInput2msᚗapiᚋtypesᚐValidateUserInput(ctx context.Context, v interface{}) (types.ValidateUserInput, error) {
	res, err := ec.unmarshalInputValidateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNValidation2ᚕᚖmsᚗapiᚋtypesᚐValidationᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Validation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNValidation2ᚖmsᚗapiᚋtypesᚐValidation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNValidation2ᚖmsᚗapiᚋtypesᚐValidation(ctx context.Context, sel ast.SelectionSet, v *types.Validation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Validation(ctx, sel, v)
}

func (ec *executionContext) marshalNValidationData2msᚗapiᚋtypesᚐValidationData(ctx context.Context, sel ast.SelectionSet, v types.ValidationData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ValidationData(ctx, sel, v)
}

func (ec *executionContext) marshalNValidationEdge2ᚕᚖmsᚗapiᚋtypesᚐValidationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ValidationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNValidationEdge2ᚖmsᚗapiᚋtypesᚐValidationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNValidationEdge2ᚖmsᚗapiᚋtypesᚐValidationEdge(ctx context.Context, sel ast.SelectionSet, v *types.ValidationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ValidationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNValidationType2msᚗapiᚋtypesᚐValidationType(ctx context.Context, v interface{}) (types.ValidationType, error) {
	var res types.ValidationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNValidationType2msᚗapiᚋtypesᚐValidationType(ctx context.Context, sel ast.SelectionSet, v types.ValidationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVerifiable2msᚗapiᚋtypesᚐVerifiable(ctx context.Context, sel ast.SelectionSet, v types.Verifiable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Verifiable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVerifiableType2msᚗapiᚋtypesᚐVerifiableType(ctx context.Context, v interface{}) (types.VerifiableType, error) {
	var res types.VerifiableType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVerifiableType2msᚗapiᚋtypesᚐVerifiableType(ctx context.Context, sel ast.SelectionSet, v types.VerifiableType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVerification2ᚕᚖmsᚗapiᚋtypesᚐVerificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Verification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVerification2ᚖmsᚗapiᚋtypesᚐVerification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVerification2ᚖmsᚗapiᚋtypesᚐVerification(ctx context.Context, sel ast.SelectionSet, v *types.Verification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Verification(ctx, sel, v)
}

func (ec *executionContext) marshalNVerificationEdge2ᚕᚖmsᚗapiᚋtypesᚐVerificationEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.VerificationEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVerificationEdge2ᚖmsᚗapiᚋtypesᚐVerificationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVerificationEdge2ᚖmsᚗapiᚋtypesᚐVerificationEdge(ctx context.Context, sel ast.SelectionSet, v *types.VerificationEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VerificationEdge(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAcceptance2ᚖmsᚗapiᚋtypesᚐAcceptance(ctx context.Context, sel ast.SelectionSet, v *types.Acceptance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Acceptance(ctx, sel, v)
}

func (ec *executionContext) marshalOAcceptanceConnection2ᚖmsᚗapiᚋtypesᚐAcceptanceConnection(ctx context.Context, sel ast.SelectionSet, v *types.AcceptanceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AcceptanceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAccount2ᚖmsᚗapiᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v *types.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountBalances2ᚖmsᚗapiᚋtypesᚐAccountBalances(ctx context.Context, sel ast.SelectionSet, v *types.AccountBalances) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountBalances(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountConnection2ᚖmsᚗapiᚋtypesᚐAccountConnection(ctx context.Context, sel ast.SelectionSet, v *types.AccountConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountData2ᚖmsᚗapiᚋtypesᚐAccountData(ctx context.Context, sel ast.SelectionSet, v *types.AccountData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountData(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountDetails2ᚖmsᚗapiᚋtypesᚐAccountDetails(ctx context.Context, sel ast.SelectionSet, v *types.AccountDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountingRules2ᚖmsᚗapiᚋtypesᚐAccountingRules(ctx context.Context, sel ast.SelectionSet, v *types.AccountingRules) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountingRules(ctx, sel, v)
}

func (ec *executionContext) marshalOAccruedAmounts2ᚖmsᚗapiᚋtypesᚐAccruedAmounts(ctx context.Context, sel ast.SelectionSet, v *types.AccruedAmounts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccruedAmounts(ctx, sel, v)
}

func (ec *executionContext) marshalOActivity2ᚖmsᚗapiᚋtypesᚐActivity(ctx context.Context, sel ast.SelectionSet, v *types.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) marshalOAddress2ᚖmsᚗapiᚋtypesᚐAddress(ctx context.Context, sel ast.SelectionSet, v *types.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) marshalOAddressConnection2ᚖmsᚗapiᚋtypesᚐAddressConnection(ctx context.Context, sel ast.SelectionSet, v *types.AddressConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddressConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAffectedAmounts2ᚖmsᚗapiᚋtypesᚐAffectedAmounts(ctx context.Context, sel ast.SelectionSet, v *types.AffectedAmounts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AffectedAmounts(ctx, sel, v)
}

func (ec *executionContext) marshalOAuth2ᚕᚖmsᚗapiᚋtypesᚐAuth(ctx context.Context, sel ast.SelectionSet, v []*types.Auth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuth2ᚖmsᚗapiᚋtypesᚐAuth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuth2ᚖmsᚗapiᚋtypesᚐAuth(ctx context.Context, sel ast.SelectionSet, v *types.Auth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Auth(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthTokens2ᚖmsᚗapiᚋtypesᚐAuthTokens(ctx context.Context, sel ast.SelectionSet, v *types.AuthTokens) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthTokens(ctx, sel, v)
}

func (ec *executionContext) marshalOBalances2ᚖmsᚗapiᚋtypesᚐBalances(ctx context.Context, sel ast.SelectionSet, v *types.Balances) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Balances(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCDD2ᚖmsᚗapiᚋtypesᚐCdd(ctx context.Context, sel ast.SelectionSet, v *types.Cdd) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CDD(ctx, sel, v)
}

func (ec *executionContext) marshalOCDDConnection2ᚖmsᚗapiᚋtypesᚐCDDConnection(ctx context.Context, sel ast.SelectionSet, v *types.CDDConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CDDConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCheck2ᚖmsᚗapiᚋtypesᚐCheck(ctx context.Context, sel ast.SelectionSet, v *types.Check) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Check(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckConnection2ᚖmsᚗapiᚋtypesᚐCheckConnection(ctx context.Context, sel ast.SelectionSet, v *types.CheckConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOComment2ᚖmsᚗapiᚋtypesᚐComment(ctx context.Context, sel ast.SelectionSet, v *types.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentConnection2ᚖmsᚗapiᚋtypesᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v *types.CommentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCountry2ᚖmsᚗapiᚋtypesᚐCountry(ctx context.Context, sel ast.SelectionSet, v *types.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalOCountryConnection2ᚖmsᚗapiᚋtypesᚐCountryConnection(ctx context.Context, sel ast.SelectionSet, v *types.CountryConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CountryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCurrency2ᚖmsᚗapiᚋtypesᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *types.Currency) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Currency(ctx, sel, v)
}

func (ec *executionContext) marshalOCurrencyConnection2ᚖmsᚗapiᚋtypesᚐCurrencyConnection(ctx context.Context, sel ast.SelectionSet, v *types.CurrencyConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CurrencyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalODevice2ᚖmsᚗapiᚋtypesᚐDevice(ctx context.Context, sel ast.SelectionSet, v *types.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConnection2ᚖmsᚗapiᚋtypesᚐDeviceConnection(ctx context.Context, sel ast.SelectionSet, v *types.DeviceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceToken2ᚖmsᚗapiᚋtypesᚐDeviceToken(ctx context.Context, sel ast.SelectionSet, v *types.DeviceToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceToken(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeviceTokenInput2ᚖmsᚗapiᚋtypesᚐDeviceTokenInput(ctx context.Context, v interface{}) (*types.DeviceTokenInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeviceTokenInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeviceTokenType2ᚖmsᚗapiᚋtypesᚐDeviceTokenType(ctx context.Context, v interface{}) (*types.DeviceTokenType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.DeviceTokenType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeviceTokenType2ᚖmsᚗapiᚋtypesᚐDeviceTokenType(ctx context.Context, sel ast.SelectionSet, v *types.DeviceTokenType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEmail2ᚖmsᚗapiᚋtypesᚐEmail(ctx context.Context, sel ast.SelectionSet, v *types.Email) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Email(ctx, sel, v)
}

func (ec *executionContext) marshalOEntity2msᚗapiᚋtypesᚐEntity(ctx context.Context, sel ast.SelectionSet, v types.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Entity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOFx2ᚖmsᚗapiᚋtypesᚐFx(ctx context.Context, sel ast.SelectionSet, v *types.Fx) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Fx(ctx, sel, v)
}

func (ec *executionContext) marshalOFxConnection2ᚖmsᚗapiᚋtypesᚐFxConnection(ctx context.Context, sel ast.SelectionSet, v *types.FxConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FxConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) marshalOIdentity2ᚕᚖmsᚗapiᚋtypesᚐIdentity(ctx context.Context, sel ast.SelectionSet, v []*types.Identity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIdentity2ᚖmsᚗapiᚋtypesᚐIdentity(ctx context.Context, sel ast.SelectionSet, v *types.Identity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Identity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIdentityStatus2ᚖmsᚗapiᚋtypesᚐIdentityStatus(ctx context.Context, v interface{}) (*types.IdentityStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.IdentityStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIdentityStatus2ᚖmsᚗapiᚋtypesᚐIdentityStatus(ctx context.Context, sel ast.SelectionSet, v *types.IdentityStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOImageAssets2ᚖmsᚗapiᚋtypesᚐImageAssets(ctx context.Context, sel ast.SelectionSet, v *types.ImageAssets) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ImageAssets(ctx, sel, v)
}

func (ec *executionContext) marshalOIndustry2ᚖmsᚗapiᚋtypesᚐIndustry(ctx context.Context, sel ast.SelectionSet, v *types.Industry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Industry(ctx, sel, v)
}

func (ec *executionContext) marshalOIndustryConnection2ᚖmsᚗapiᚋtypesᚐIndustryConnection(ctx context.Context, sel ast.SelectionSet, v *types.IndustryConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IndustryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) marshalOInterestPaymentDates2ᚕᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx context.Context, sel ast.SelectionSet, v []*types.InterestPaymentDates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInterestPaymentDates2ᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOInterestPaymentDates2ᚖmsᚗapiᚋtypesᚐInterestPaymentDates(ctx context.Context, sel ast.SelectionSet, v *types.InterestPaymentDates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestPaymentDates(ctx, sel, v)
}

func (ec *executionContext) marshalOInterestPaymentSettings2ᚖmsᚗapiᚋtypesᚐInterestPaymentSettings(ctx context.Context, sel ast.SelectionSet, v *types.InterestPaymentSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestPaymentSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOInterestRate2ᚖmsᚗapiᚋtypesᚐInterestRate(ctx context.Context, sel ast.SelectionSet, v *types.InterestRate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestRate(ctx, sel, v)
}

func (ec *executionContext) marshalOInterestRateSettings2ᚖmsᚗapiᚋtypesᚐInterestRateSettings(ctx context.Context, sel ast.SelectionSet, v *types.InterestRateSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestRateSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOInterestRateTiers2ᚕᚖmsᚗapiᚋtypesᚐInterestRateTiers(ctx context.Context, sel ast.SelectionSet, v []*types.InterestRateTiers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInterestRateTiers2ᚖmsᚗapiᚋtypesᚐInterestRateTiers(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOInterestRateTiers2ᚖmsᚗapiᚋtypesᚐInterestRateTiers(ctx context.Context, sel ast.SelectionSet, v *types.InterestRateTiers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestRateTiers(ctx, sel, v)
}

func (ec *executionContext) marshalOInterestSettings2ᚖmsᚗapiᚋtypesᚐInterestSettings(ctx context.Context, sel ast.SelectionSet, v *types.InterestSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterestSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOInternalControls2ᚖmsᚗapiᚋtypesᚐInternalControls(ctx context.Context, sel ast.SelectionSet, v *types.InternalControls) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InternalControls(ctx, sel, v)
}

func (ec *executionContext) marshalOLocation2ᚖmsᚗapiᚋtypesᚐLocation(ctx context.Context, sel ast.SelectionSet, v *types.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) marshalOMessage2ᚖmsᚗapiᚋtypesᚐMessage(ctx context.Context, sel ast.SelectionSet, v *types.Message) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalOMessageConnection2ᚖmsᚗapiᚋtypesᚐMessageConnection(ctx context.Context, sel ast.SelectionSet, v *types.MessageConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessageConnection(ctx, sel, v)
}

func (ec *executionContext) marshalONode2msᚗapiᚋtypesᚐNode(ctx context.Context, sel ast.SelectionSet, v types.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOnboardingCheckPoint2ᚖmsᚗapiᚋtypesᚐOnboardingCheckPoint(ctx context.Context, v interface{}) (*types.OnboardingCheckPoint, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.OnboardingCheckPoint)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOnboardingCheckPoint2ᚖmsᚗapiᚋtypesᚐOnboardingCheckPoint(ctx context.Context, sel ast.SelectionSet, v *types.OnboardingCheckPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOpeningBalance2ᚖmsᚗapiᚋtypesᚐOpeningBalance(ctx context.Context, sel ast.SelectionSet, v *types.OpeningBalance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OpeningBalance(ctx, sel, v)
}

func (ec *executionContext) marshalOOrgLocation2ᚖmsᚗapiᚋtypesᚐOrgLocation(ctx context.Context, sel ast.SelectionSet, v *types.OrgLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgLocation(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganisation2ᚖmsᚗapiᚋtypesᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v *types.Organisation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organisation(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganisationConnection2ᚖmsᚗapiᚋtypesᚐOrganisationConnection(ctx context.Context, sel ast.SelectionSet, v *types.OrganisationConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganisationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOOverdraftInterestSettings2ᚖmsᚗapiᚋtypesᚐOverdraftInterestSettings(ctx context.Context, sel ast.SelectionSet, v *types.OverdraftInterestSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OverdraftInterestSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOOverdraftSetting2ᚖmsᚗapiᚋtypesᚐOverdraftSetting(ctx context.Context, sel ast.SelectionSet, v *types.OverdraftSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OverdraftSetting(ctx, sel, v)
}

func (ec *executionContext) marshalOOverdraftSettings2ᚖmsᚗapiᚋtypesᚐOverdraftSettings(ctx context.Context, sel ast.SelectionSet, v *types.OverdraftSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OverdraftSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOPayee2ᚖmsᚗapiᚋtypesᚐPayee(ctx context.Context, sel ast.SelectionSet, v *types.Payee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payee(ctx, sel, v)
}

func (ec *executionContext) marshalOPayeeAccount2ᚖmsᚗapiᚋtypesᚐPayeeAccount(ctx context.Context, sel ast.SelectionSet, v *types.PayeeAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PayeeAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPayeeAccountInput2ᚖmsᚗapiᚋtypesᚐPayeeAccountInput(ctx context.Context, v interface{}) (*types.PayeeAccountInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPayeeAccountInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPayeeConnection2ᚖmsᚗapiᚋtypesᚐPayeeConnection(ctx context.Context, sel ast.SelectionSet, v *types.PayeeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PayeeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPayeeInput2ᚖmsᚗapiᚋtypesᚐPayeeInput(ctx context.Context, v interface{}) (*types.PayeeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPayeeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPayment2ᚖmsᚗapiᚋtypesᚐPayment(ctx context.Context, sel ast.SelectionSet, v *types.Payment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentConnection2ᚖmsᚗapiᚋtypesᚐPaymentConnection(ctx context.Context, sel ast.SelectionSet, v *types.PaymentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentFilter2ᚖmsᚗapiᚋtypesᚐPaymentFilter(ctx context.Context, v interface{}) (*types.PaymentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentStatus2ᚖmsᚗapiᚋtypesᚐPaymentStatus(ctx context.Context, v interface{}) (*types.PaymentStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.PaymentStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentStatus2ᚖmsᚗapiᚋtypesᚐPaymentStatus(ctx context.Context, sel ast.SelectionSet, v *types.PaymentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPerson2ᚖmsᚗapiᚋtypesᚐPerson(ctx context.Context, sel ast.SelectionSet, v *types.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonConnection2ᚖmsᚗapiᚋtypesᚐPersonConnection(ctx context.Context, sel ast.SelectionSet, v *types.PersonConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPersonStatus2ᚖmsᚗapiᚋtypesᚐPersonStatus(ctx context.Context, v interface{}) (*types.PersonStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.PersonStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPersonStatus2ᚖmsᚗapiᚋtypesᚐPersonStatus(ctx context.Context, sel ast.SelectionSet, v *types.PersonStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPhone2ᚖmsᚗapiᚋtypesᚐPhone(ctx context.Context, sel ast.SelectionSet, v *types.Phone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Phone(ctx, sel, v)
}

func (ec *executionContext) marshalOProduct2ᚖmsᚗapiᚋtypesᚐProduct(ctx context.Context, sel ast.SelectionSet, v *types.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalOProductConnection2ᚖmsᚗapiᚋtypesᚐProductConnection(ctx context.Context, sel ast.SelectionSet, v *types.ProductConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOProductControl2ᚖmsᚗapiᚋtypesᚐProductControl(ctx context.Context, sel ast.SelectionSet, v *types.ProductControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductControl(ctx, sel, v)
}

func (ec *executionContext) marshalOProductFees2ᚖmsᚗapiᚋtypesᚐProductFees(ctx context.Context, sel ast.SelectionSet, v *types.ProductFees) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductFees(ctx, sel, v)
}

func (ec *executionContext) marshalOProductInterestSetting2ᚖmsᚗapiᚋtypesᚐProductInterestSetting(ctx context.Context, sel ast.SelectionSet, v *types.ProductInterestSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductInterestSetting(ctx, sel, v)
}

func (ec *executionContext) marshalOProductMaturity2ᚖmsᚗapiᚋtypesᚐProductMaturity(ctx context.Context, sel ast.SelectionSet, v *types.ProductMaturity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductMaturity(ctx, sel, v)
}

func (ec *executionContext) marshalOProductSetting2ᚖmsᚗapiᚋtypesᚐProductSetting(ctx context.Context, sel ast.SelectionSet, v *types.ProductSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductSetting(ctx, sel, v)
}

func (ec *executionContext) marshalOProductTemplates2ᚖmsᚗapiᚋtypesᚐProductTemplates(ctx context.Context, sel ast.SelectionSet, v *types.ProductTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductTemplates(ctx, sel, v)
}

func (ec *executionContext) marshalOProof2ᚖmsᚗapiᚋtypesᚐProof(ctx context.Context, sel ast.SelectionSet, v *types.Proof) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Proof(ctx, sel, v)
}

func (ec *executionContext) marshalOProofConnection2ᚖmsᚗapiᚋtypesᚐProofConnection(ctx context.Context, sel ast.SelectionSet, v *types.ProofConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProofConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOQuote2ᚖmsᚗapiᚋtypesᚐQuote(ctx context.Context, sel ast.SelectionSet, v *types.Quote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quote(ctx, sel, v)
}

func (ec *executionContext) marshalOQuoteConnection2ᚖmsᚗapiᚋtypesᚐQuoteConnection(ctx context.Context, sel ast.SelectionSet, v *types.QuoteConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuoteConnection(ctx, sel, v)
}

func (ec *executionContext) marshalORateSetting2ᚖmsᚗapiᚋtypesᚐRateSetting(ctx context.Context, sel ast.SelectionSet, v *types.RateSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RateSetting(ctx, sel, v)
}

func (ec *executionContext) marshalORateTiers2ᚖmsᚗapiᚋtypesᚐRateTiers(ctx context.Context, sel ast.SelectionSet, v *types.RateTiers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RateTiers(ctx, sel, v)
}

func (ec *executionContext) marshalOReport2ᚖmsᚗapiᚋtypesᚐReport(ctx context.Context, sel ast.SelectionSet, v *types.Report) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Report(ctx, sel, v)
}

func (ec *executionContext) marshalOReportConnection2ᚖmsᚗapiᚋtypesᚐReportConnection(ctx context.Context, sel ast.SelectionSet, v *types.ReportConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReportConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReportInput2ᚕᚖmsᚗapiᚋtypesᚐReportInputᚄ(ctx context.Context, v interface{}) ([]*types.ReportInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*types.ReportInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReportInput2ᚖmsᚗapiᚋtypesᚐReportInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReportReviewStatus2ᚖmsᚗapiᚋtypesᚐReportReviewStatus(ctx context.Context, sel ast.SelectionSet, v *types.ReportReviewStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReportReviewStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOScreen2ᚖmsᚗapiᚋtypesᚐScreen(ctx context.Context, sel ast.SelectionSet, v *types.Screen) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Screen(ctx, sel, v)
}

func (ec *executionContext) marshalOScreenConnection2ᚖmsᚗapiᚋtypesᚐScreenConnection(ctx context.Context, sel ast.SelectionSet, v *types.ScreenConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScreenConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOSocial2ᚖmsᚗapiᚋtypesᚐSocial(ctx context.Context, sel ast.SelectionSet, v *types.Social) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Social(ctx, sel, v)
}

func (ec *executionContext) marshalOStaff2ᚖmsᚗapiᚋtypesᚐStaff(ctx context.Context, sel ast.SelectionSet, v *types.Staff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Staff(ctx, sel, v)
}

func (ec *executionContext) unmarshalOState2ᚕmsᚗapiᚋtypesᚐStateᚄ(ctx context.Context, v interface{}) ([]types.State, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]types.State, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNState2msᚗapiᚋtypesᚐState(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOState2ᚕmsᚗapiᚋtypesᚐStateᚄ(ctx context.Context, sel ast.SelectionSet, v []types.State) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNState2msᚗapiᚋtypesᚐState(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOState2ᚖmsᚗapiᚋtypesᚐState(ctx context.Context, v interface{}) (*types.State, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.State)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOState2ᚖmsᚗapiᚋtypesᚐState(ctx context.Context, sel ast.SelectionSet, v *types.State) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTag2ᚕᚖmsᚗapiᚋtypesᚐTag(ctx context.Context, sel ast.SelectionSet, v []*types.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTag2ᚖmsᚗapiᚋtypesᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTag2ᚖmsᚗapiᚋtypesᚐTag(ctx context.Context, sel ast.SelectionSet, v *types.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) marshalOTagConnection2ᚖmsᚗapiᚋtypesᚐTagConnection(ctx context.Context, sel ast.SelectionSet, v *types.TagConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TagConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTask2ᚖmsᚗapiᚋtypesᚐTask(ctx context.Context, sel ast.SelectionSet, v *types.Task) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) marshalOTaskConnection2ᚖmsᚗapiᚋtypesᚐTaskConnection(ctx context.Context, sel ast.SelectionSet, v *types.TaskConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TaskConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTransaction2ᚖmsᚗapiᚋtypesᚐTransaction(ctx context.Context, sel ast.SelectionSet, v *types.Transaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Transaction(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionConnection2ᚖmsᚗapiᚋtypesᚐTransactionConnection(ctx context.Context, sel ast.SelectionSet, v *types.TransactionConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionData2ᚖmsᚗapiᚋtypesᚐTransactionData(ctx context.Context, sel ast.SelectionSet, v *types.TransactionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionData(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionFee2ᚕᚖmsᚗapiᚋtypesᚐTransactionFee(ctx context.Context, sel ast.SelectionSet, v []*types.TransactionFee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransactionFee2ᚖmsᚗapiᚋtypesᚐTransactionFee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTransactionFee2ᚖmsᚗapiᚋtypesᚐTransactionFee(ctx context.Context, sel ast.SelectionSet, v *types.TransactionFee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionFee(ctx, sel, v)
}

func (ec *executionContext) marshalOTransferDetails2ᚖmsᚗapiᚋtypesᚐTransferDetails(ctx context.Context, sel ast.SelectionSet, v *types.TransferDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOTransferFees2ᚖmsᚗapiᚋtypesᚐTransferFees(ctx context.Context, sel ast.SelectionSet, v *types.TransferFees) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferFees(ctx, sel, v)
}

func (ec *executionContext) marshalOValidation2ᚖmsᚗapiᚋtypesᚐValidation(ctx context.Context, sel ast.SelectionSet, v *types.Validation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Validation(ctx, sel, v)
}

func (ec *executionContext) marshalOValidationConnection2ᚖmsᚗapiᚋtypesᚐValidationConnection(ctx context.Context, sel ast.SelectionSet, v *types.ValidationConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ValidationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOValidationType2ᚖmsᚗapiᚋtypesᚐValidationType(ctx context.Context, v interface{}) (*types.ValidationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.ValidationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOValidationType2ᚖmsᚗapiᚋtypesᚐValidationType(ctx context.Context, sel ast.SelectionSet, v *types.ValidationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOVerification2ᚖmsᚗapiᚋtypesᚐVerification(ctx context.Context, sel ast.SelectionSet, v *types.Verification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Verification(ctx, sel, v)
}

func (ec *executionContext) marshalOVerificationConnection2ᚖmsᚗapiᚋtypesᚐVerificationConnection(ctx context.Context, sel ast.SelectionSet, v *types.VerificationConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VerificationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
