type Query {
    # Check if there's a customer with the email given
    checkEmail(email: String!): Boolean!
    # Get an Onfido SDK token to capture photo, selfie
    onfidoSDKToken: TokenResponse!
    # Fetch the cdd by ID given
    cdd(filter: CommonQueryFilterInput!): CDD!
    # Fetch a content by ID
    content(id: ID!): Content!
    # Fetch a list of contents
    contents(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
    ): ContentConnection!
    # Fetch a financial product by ID
    product(id: ID!): Product!
    # Fetch a list of financial products available to ROAVA customers
    products(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter product by it's status. If empty, should ignore the field
        statuses: [ProductStatuses!]
    ): ProductConnection!
    # Fetch a list of banks
    banks(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
    ): BankConnection!
    # Fetch a customer account by ID
    account(id: ID!): Account!
    # Fetch a list of customer accounts
    accounts(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter account by it's status. If empty, should ignore the field
        statuses: [AccountStatuses!]
        # Filter account by it's product type. If empty, should ignore the field
        types: [ProductTypes!]
    ): AccountConnection!
    # Fetch a customer transaction by ID
    transaction(id: ID!): Transaction!
    # Fetch a list of customer transactions
    transactions(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter transaction by it's status. If empty, should ignore the field
        statuses: [AccountStatuses!]
        # Filter transaction by it's account. If empty, should ignore the field
        accountIds: [ID!]
        # Filter transaction by beneficiary. If empty, should ignore the field
        beneficiaryIds: [ID!]
    ): TransactionConnection
    # Fetch a customer beneficiary by ID
    beneficiary(id: ID!): Beneficiary!
    # Fetch a list of customer beneficiaries
    beneficiaries(
        # Keywords used to filter the beneficiaries
        keywords: String
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter transaction by it's status. If empty, should ignore the field
        statuses: [BeneficiaryStatuses!]
    ): BeneficiaryConnection
    # Fetch a list of transactionTypes
    transactionTypes(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter transactionType by it's status. If empty, should ignore the field
        statuses: [TransactionTypeStatuses!]
    ): TransactionTypeConnection!
    # Fetch a questionary by ID
    questionary(id: ID!): Questionary!
    # Fetch a list of questionaries
    questionaries(
        # Keywords used to filter the beneficiaries
        keywords: String
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter questionary by it's status. If empty, should ignore the field
        statuses: [QuestionaryStatuses!]
        # Filter questionary by it's type. If empty, should ignore the field
        type: [QuestionaryTypes!]
    ): QuestionaryConnection!
    # Fetch a currency by ID
    currency(id: ID!): Currency!
    # Fetch a list of questionaries
    currencies(
        # Keywords used to filter the beneficiaries
        keywords: String
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
    ): CurrencyConnection!
    fees(transactionTypeId: ID!): [Fee!]!
    exchangeRate(transactionTypeId: ID!): ExchangeRate!

    # ---- Dashboard -----
    # Fetch customer or staf using JWT claims
    me: MeResult!
    # Fetch the customer by given ID
    customer(
        id: ID!
    ): Customer!
    # Fetch a list of customers
    customers(
        # Keywords used to filter the persons
        keywords: String
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter customer by it's status. If empty, should ignore the field
        statuses: [CustomerStatuses!]
    ): CustomerConnection!
    # Fetch a list of cdds
    cdds(
        # Returns the first n elements from the list.
        first: Int
        # Returns the elements in the list that come after the specified cursor.
        after: String
        # Returns the last n elements from the list.
        last: Int
        # Returns the elements in the list that come before the specified cursor.
        before: String
        # Filter cdd by it's status. If empty, should ignore the field
        statuses: [CDDStatuses!]
    ): CDDConnection!
}

input CommonQueryFilterInput {
    id: ID
    customerId: ID
    last: Boolean
}

union MeResult = Customer | Staff

type PageInfo {
    # When paginating forwards, are there more items?
    hasNextPage: Boolean!
    # When paginating backwards, are there more items?
    hasPreviousPage: Boolean!
    # When paginating backwards, the cursor to continue
    startCursor: String
    # When paginating forwards, the cursor to continue
    endCursor: String
}

# The connection type for Customer.
type CustomerConnection {
    # A list of nodes
    nodes: [Customer!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for CDD.
type CDDConnection {
    # A list of nodes
    nodes: [CDD!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Product.
type ProductConnection {
    # A list of nodes
    nodes: [Product!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Account.
type AccountConnection {
    # A list of nodes
    nodes: [Account!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Transaction.
type TransactionConnection {
    # A list of nodes
    nodes: [Transaction!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Beneficiay.
type BeneficiaryConnection {
    # A list of nodes
    nodes: [Beneficiary!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for TransactionType.
type TransactionTypeConnection {
    # A list of nodes
    nodes: [TransactionType!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Questionary.
type QuestionaryConnection {
    # A list of nodes
    nodes: [Questionary!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Currency.
type CurrencyConnection {
    # A list of nodes
    nodes: [Currency!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Content.
type ContentConnection {
    # A list of nodes
    nodes: [Content!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}

# The connection type for Bank.
type BankConnection {
    # A list of nodes
    nodes: [Bank!]!
    # Information to aid in pagination
    pageInfo: PageInfo!
    # Identifies the total count of items in the connection
    totalCount: Int!
}