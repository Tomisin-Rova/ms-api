# Date scalar format DD-MM-YYYY
scalar Date

############# USER GROUP #############

type Customer {
    id: ID!
    firstName: String!
    lastName: String!
    dob: Date!
    bvn: String
    addresses: [Address!]!
    phones: [Phone!]
    email: Email!
    status: CustomerStatuses!
    statusTs: Int!
    ts: Int!
}

enum CustomerStatuses {
    SIGNEDUP
    REGISTERED
    VERIFIED
    ONBOARDED
    REJECTED
    EXITED
}

type Email {
    address: String!
    verified: Boolean!
}

type Phone {
    primary: Boolean!
    number: String!
    verified: Boolean!
}

type Address {
    primary: Boolean!
    country: Country!
    state: String
    city: String
    street: String!
    postcode: String!
    cordinates: Cordinates!
}

type Cordinates {
    latitude: Float!
    longitude: Float!
}

type Identity {
    id: ID!
    customer: Customer
    organization: Organization!
    credentials: [IdentityCredentials!]
    status: IdentityStatuses!
    statusTs: Int!
    ts: Int!
}

enum IdentityStatuses {
    ACTIVE
    INACTIVE
}

type IdentityCredentials {
    type: IdentityCredentialsTypes!
    password: String!
    status: IdentityCredentialsStatuses!
    statusTs: Int!
    ts: Int!
    updateTs: Int!
}

enum IdentityCredentialsStatuses {
    ACTIVE
    INACTIVE
}

enum IdentityCredentialsTypes {
    LOGIN
    PIN
}

type Organization {
    id: ID!
    name: String!
    status: OrganizationStatuses!
    statusTs: Int!
    ts: Int!
}

enum OrganizationStatuses {
    ACTIVE
    INACTIVE
}

type Staff {
    id: ID!
    name: String!
    lastName: String!
    dob: Date
    addresses: [Address!]!
    phones: [Phone!]
    email: String!
    status: StaffStatuses!
    statusTs: Int!
    ts: Int!
}

enum StaffStatuses {
    ACTIVE
    INACTIVE
}

type Acceptance {
    id: ID!
    content: Content!
    customer: Customer!
    ts: Int!
}

type Questionary {
    id: ID!
    type: QuestionaryTypes!
    """
    An array of different questions related to the current questionary.
    """
    questions: [QuestionaryQuestion!]!
    status: QuestionaryStatuses!
    statusTs: Int!
    ts: Int!
}

type QuestionaryQuestion {
    id: ID!
    value: String!
    """
    An array of predefined answers for the current question.
    *not required
    """
    predefinedAnswers: [QuestionaryPredefinedAnswer!]
    """
    If true the question must be answered.
    """
    required: Boolean!
    """
    If true the question can be answered with multiple values from the predefined answers.
    """
    multipleOptions: Boolean!
}

type QuestionaryPredefinedAnswer {
    id: ID!
    value: String!
}

type QuestionaryAnswer {
    id: ID!
    questionaryId: ID!
    customerId: ID!
    """
    An array of the responses for the questions related to current questionary.
    """
    questions: [QuestionaryAnswerQuestion!]!
    ts: Int!
}

type QuestionaryAnswerQuestion {
    id: ID!
    answer: String
    """
    An array of IDs of the predefined answers chosen.
    """
    predefinedAnswers: [ID!]
}

enum QuestionaryStatuses {
    ACTIVE
    INACTIVE
}

enum QuestionaryTypes {
    REASONS
}

type Device {
    id: ID!
    customer: Customer!
    identifier: String!
    os: String!
    brand: String!
    tokens: [DeviceToken!]
    preferences: [DevicePreferences!]
    status: DeviceStatuses!
    statusTs: Int!
    ts: Int!
}

enum DeviceStatuses {
    ACTIVE
    INACTIVE
}

type DevicePreferences {
    type: DevicePreferencesTypes!
    value: String!
}

enum DevicePreferencesTypes {
    PUSH
    BIOMETRICS
}

type DeviceToken {
    type: DeviceTokenTypes!
    value: String!
}

enum DeviceTokenTypes {
    FIREBASE
}

############# END USER GROUP #############

############# ACCOUNTS GROUP #############

type Account {
    id: ID!
    customer: Customer!
    product: Product!
    name: String!
    iban: String
    accountNumber: String
    code: String
    maturityDate: Date
    balances: AccountBalances
    mambu: AccountMambu
    fcmb: AccountFCMB
    status: AccountStatuses!
    statusTs: Int!
    ts: Int!
}

enum AccountStatuses {
    ACTIVE
    INACTIVE
}

type AccountFCMB {
    ngnAccountNumber: String
    cifId: String
}

type AccountMambu {
    encodedKey: String
    branchKey: String
}

type AccountBalances {
    totalBalance: Float!
}

type Product {
    id: ID!
    type: ProductTypes!
    currency: Currency!
    name: String
    termLength: Int
    interestRate: Float
    minimumOpeningBalance: Float
    mambu: ProductMambu
    status: ProductStatuses!
    statusTs: Int!
    ts: Int!
}

enum ProductStatuses {
    ACTIVE
    INACTIVE
}

enum ProductTypes {
    FIXED_DEPOSIT
    CURRENT_ACCOUNT
}

type ProductMambu {
    encodedKey: String
}

############# END ACCOUNTS GROUP #############

############# CDD GROUP #############

type CDD {
    id: ID!
    customer: Customer!
    amls: [AML!]
    kycs: [KYC!]
    poas: [POA!]
    status: CDDStatuses!
    statusTs: Int!
    ts: Int!
}

enum CDDStatuses {
    PENDING
    MANUAL_REVIEW
    APPROVED
    DECLINED
}

type AML {
    organization: Organization!
    identifier: String!
    file: String
    result: String!
    publicUrl: String
    actions: [AMLAction!]
    status: AMLStatuses!
    statusTs: Int!
    ts: Int!
}

enum AMLStatuses {
    PENDING
    MANUAL_REVIEW
    APPROVED
    DECLINED
}

type KYC {
    organization: Organization!
    identifier: String!
    publicUrl: String
    reports: Reports
    actions: [KYCAction!]
    status: KYCStatuses!
    statusTs: Int!
    ts: Int!
}

enum KYCStatuses {
    PENDING
    MANUAL_REVIEW
    APPROVED
    DECLINED
}

type Reports {
    type: KYCTypes!
    file: String
    result: String
    subResult: String
    publicUrl: String
    review: Review
    status: ReportStatuses!
    statusTs: Int!
    ts: Int!
}

enum ReportStatuses {
    PENDING
    MANUAL_REVIEW
    APPROVED
    DECLINED
}

type Review {
    resubmit: Boolean!
    message: String
    ts: Int!
}

enum KYCTypes {
    FACIAL_VIDEO
    DOCUMENT
}

type POA {
    organization: Organization!
    identifier: String!
    file: String
    result: String
    review: Review
    actions: [POAAction!]
    status: POAStatuses!
    statusTs: Int!
    ts: Int!
}

enum POAStatuses {
    PENDING
    MANUAL_REVIEW
    APPROVED
    DECLINED
}

type POAAction {
    type: POAActionTypes!
    reporter: Staff!
    targetStatus: POAStatuses!
    message: String!
    ts: Int!
}

enum POAActionTypes {
    CHANGE_STATUS
}

type AMLAction {
    type: AMLActionTypes!
    reporter: Staff!
    targetStatus: AMLStatuses!
    message: String!
    ts: Int!
}

enum AMLActionTypes {
    CHANGE_STATUS
}

type KYCAction {
    type: KYCActionTypes!
    reporter: Staff!
    targetStatus: KYCStatuses!
    message: String!
    ts: Int!
}

enum KYCActionTypes {
    CHANGE_STATUS
}

############# END CDD GROUP #############

############# TRANSACTIONS GROUP #############

type Transaction {
    id: ID!
    transactionType: TransactionType!
    reference: String!
    fees: [TransactionFee!]
    exchangeRate: ExchangeRate!
    source: TransactionSource!
    target: TransactionTarget!
    idempotencyKey: String!
    linkedTransactions: [LinkedTransaction!]
    status: TransactionStatuses!
    statusTs: Int!
    ts: Int!
}

enum TransactionStatuses {
    PENDING
    APPROVED
    REJECTED
}

type TransactionTarget {
    customer: Customer!
    beneficiary: Beneficiary!
    account: Account
    beneficiaryAccount: BeneficiaryAccount!
    amount: Float!
    balanceAfterTransaction: Float!
}

type TransactionSource {
    customer: Customer!
    account: Account!
    amount: Float!
    balanceAfterTransaction: Float!
}

type TransactionFee {
    id: ID!
    amount: Float!
}

type LinkedTransaction {
    id: ID!
    type: LinkedTransactionTypes!
    currency: Currency!
    amount: Float!
    source: LinkedTransactionSource!
    target: LinkedTransactionTarget!
    mambu: LinkedTransactionMambu
    fcmb: LinkedTransactionFCMB
    status: LinkedTransactionStatuses!
    statusTs: Int!
    ts: Int!
}

enum LinkedTransactionStatuses {
    PENDING
    APPROVED
    REJECTED
}

type LinkedTransactionFCMB {
    transactionIdentifier: String!
}

type LinkedTransactionMambu {
    transactionEncodedKey: String!
}

type LinkedTransactionTarget {
    account: Account
    beneficiaryAccount: BeneficiaryAccount
    accountData: String!
}

type LinkedTransactionSource {
    customer: Customer!
    account: Account!
    accountData: String!
}

enum LinkedTransactionTypes {
    DEPOSIT
    WITHDRAWAL
    APPLY_FEE
}

type TransactionType {
    id: ID!
    name: String!
    status: TransactionTypeStatuses!
    statusTs: Int!
    ts: Int!
}

enum TransactionTypeStatuses {
    ACTIVE
    INACTIVE
}

type Fee {
    id: ID!
    transactionType: TransactionType!
    type: FeeTypes!
    boundaries: [FeeBoundaries!]!
    status: FeeStatuses!
    statusTs: Int!
    ts: Int!
}

enum FeeStatuses {
    ACTIVE
    INACTIVE
}

type FeeBoundaries {
    lower: Float
    upper: Float
    amount: Float
    percentage: Float
}

enum FeeTypes {
    FIXED
    VARIABLE
}

type ExchangeRate {
    id: ID!
    baseCurrency: Currency!
    targetCurrency: Currency!
    buyPrice: Float!
    salePrice: Float!
    ts: Int!
}

############# END TRANSACTIONS GROUP #############

############# BENEFICIARIES GROUP #############

type Beneficiary {
    id: ID!
    customer: Customer!
    name: String!
    accounts: [BeneficiaryAccount!]
    status: BeneficiaryStatuses!
    statusTs: Int!
    ts: Int!
}

enum BeneficiaryStatuses {
    ACTIVE
    INACTIVE
}

type BeneficiaryAccount {
    id: ID!
    beneficiary: Beneficiary
    name: String
    account: Account
    currency: Currency!
    accountNumber: String!
    code: String!
    status: BeneficiaryAccountStatuses!
    statusTs: Int!
    ts: Int!
}

enum BeneficiaryAccountStatuses {
    ACTIVE
    INACTIVE
}

############# END BENEFICIARIES GROUP #############

############# OTHERS GROUP #############

type Currency {
    id: ID!
    symbol: String!
    code: String!
    name: String!
}

type Country {
    id: ID!
    codeAlpha2: String!
    codeAlpha3: String!
    name: String!
}

type Content {
    id: ID!
    type: ContentType!
    link: String
    ts: Int!
}

enum ContentType {
    GENERAL_TC
    GBP_ACCOUNT_TC
    NGN_ACCOUNT_TC
    VAULT_ACCOUNT_TC
    PRIVACY_NOTICE
    FEES_LIMITS
}

type Bank {
    id: ID!
    bankCode: String!
    bankName: String!
    bankShortName: String!
    active: Boolean!
    ts: Int!
}

############# END OTHERS GROUP #############