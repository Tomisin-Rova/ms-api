type Mutation {
  # captures the customer phone number to start onboarding
  createPhone(phone: String!, device: DeviceInput!): Response!
  # allows customer to confirm their phone number via OTP
  confirmPhone(token: String!, code: String!): Response!
  # Creates person's ROAVA login credentials (email, login)
  signup(token: String!, email: String!, passcode: String!): AuthResponse!
  # Creates person's ROAVA profile - capturing name, dob, address etc
  register(person: PersonInput!, address: AddressInput!): Person
  intendedActivities(activities: [ID!]): Response!
  createApplication: Response!
  # verifications
  verifyEmail(email: String!, code: String!): Response!
  resendOTP(phone: String!): Response!
  resendEmailMagicLInk(email: String!): Response!
  # auth
  login(credentials: AuthInput!): AuthResponse!
  loginWithToken(token: String!, authType: AuthType!): AuthResponse!
  refreshToken(token: String!): AuthResponse!
  updateDeviceToken(token: [DeviceTokenInput]!): Response!
  resetPasscode(token: String!, email: String!, passcode: String!): Response!
  requestPasscodeReset(email: String!, device: DeviceInput!): Response!
  confirmPasscodeResetOtp(email: String!, otp: String!): Response!
  # Submit a KYC and AML check for a given customer who has accepted terms & conditions
  submitApplication: Response!
  """
  Customer accepts an array of documents displayed to them during onboarding
  """
  acceptTerms(documents: [ID]!): Response!
  # update a validation status
  updateValidationStatus(
    validation: ID!
    status: State!
    message: String!
  ): Response!
  submitProof(proof: SubmitProofInput!): Response!
  createTransactionPassword(password: String!): Response!
  # create new deposit account
  createAccount(product: ProductInput!): Response!
  # create a new payee using the transaction password
  createPayee(payee: PayeeInput!, password: String!): Response!
  # update an existing payee using the transaction password
  # do not include the payee accounts for when updating a payee
  updatePayee(payee: ID!, payee_input: PayeeInput, password: String!): Response!
  # add new account to existing payee
  addPayeeAccount(payee: ID!, payee_account: PayeeAccountInput!): Response!
  # delete an account from an existing payee - marks as deleted
  deletePayeeAccount(payee: ID!, payee_account: ID!): Response!
  # ask for a customer to resubmit a report
  resubmit(reports: [ReportInput!]!, message: String): Response!
  # Submit the ids of the reports that has been resubmitted to Onfido
  resubmitReports(reports: [ReportInput!]): Response!
  # create new payment instruction
  createPayment(payment: PaymentInput!, password: String!): Response!
  # validate the customer's BVN
  validateBVN(bvn: String!, phone: String!): Response!
  # create and send a new OTP
  # expireTime in seconds
  requestOTP(type: DeliveryMode!, target: String!, expireTime: Int): Response!
  # verify the sent OTP
  verifyOTP(target: String!, token: String!): Response!
   # Code XXXX represents that the user has a GBP account and more data from the user should be require
  validateEmail(email: String!, device: DeviceInput!): Response!
  # If the user has a GBP account, verify the additional required data from the user
  validateUser(user: ValidateUserInput!): Response!
  # customer can make request to reset their passcode
  requestTransactionPasscodeReset(email: String!): Response!
  # reset user password
  resetTransactionPasscode(email: String!, token: String!, currentPasscode: String!, newPasscode: String!): Response!
}
