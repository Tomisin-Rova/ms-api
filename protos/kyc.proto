syntax = "proto3";
package kyc;
option go_package = ".;kycService";

service KycService {
  rpc submitLiveVideo(liveVideoRequest) returns(serviceResponse) {}
  rpc submitLivePhoto(livePhotoRequest) returns(serviceResponse){}
  rpc submitDocument(documentRequest) returns(serviceResponse){}
  rpc handleKYCVendorResults(vendorResultsRequest) returns(serviceResponse){}
  rpc listApplicants(listApplicantsRequest) returns(applicantsList){}
  rpc getApplicantById(getApplicantByIdRequest) returns(applicant) {}
  rpc getApplicantByPersonId(getApplicantByPersonIdRequest) returns(applicant) {}
  rpc helloWorld(void) returns(applicant){}
}

message void {}

message address {
  string flat_number = 1;
  string building_number = 2;
  string building_name = 3;
  string street = 4;
  string sub_street = 5;
  string town = 6;
  string state = 7;
  string postcode = 8;
  string country = 9;
}

message applicant {
  string id = 1;
  string personId = 2;
  string first_name = 3;
  string last_name = 5;
  string email = 6;
  string dob = 7;
  address address = 8;
  string vendor = 9;
}

message applicantsList {
  int64 count = 1;
  repeated applicant applicants = 2;
}

message liveVideoRequest {
  string personId = 1;
  bytes video = 2;
}

message livePhotoRequest {
  string personId = 1;
  string kind = 2;
  string title = 3;
  bytes content = 4;
}

message documentRequest {
  string personId = 1;
  string kind = 2;
  string title = 3;
  bytes content = 4;
}

message serviceResponse {
  bool success = 1;
  string message = 2;
}

message vendorResultsRequest {
  //  string
}

message listApplicantsRequest {
  map<string, string> filters = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message getApplicantByIdRequest {
  string id = 1;
}

message getApplicantByPersonIdRequest {
  string personId = 1;
}