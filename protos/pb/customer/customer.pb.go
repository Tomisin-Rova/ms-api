//*
// Customer related messages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	types "ms.api/protos/pb/types"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents reset login password request.
type ResetLoginPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpToken      string `protobuf:"bytes,1,opt,name=otp_token,json=otpToken,proto3" json:"otp_token,omitempty"`                // Otp token.
	Email         string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`                                      // Customer email.
	LoginPassword string `protobuf:"bytes,3,opt,name=login_password,json=loginPassword,proto3" json:"login_password,omitempty"` // Login password.
}

func (x *ResetLoginPasswordRequest) Reset() {
	*x = ResetLoginPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetLoginPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetLoginPasswordRequest) ProtoMessage() {}

func (x *ResetLoginPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetLoginPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetLoginPasswordRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{0}
}

func (x *ResetLoginPasswordRequest) GetOtpToken() string {
	if x != nil {
		return x.OtpToken
	}
	return ""
}

func (x *ResetLoginPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ResetLoginPasswordRequest) GetLoginPassword() string {
	if x != nil {
		return x.LoginPassword
	}
	return ""
}

//*
// Represents check customer email request.
type CheckCustomerEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string             `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`   // Customer email.
	Device *types.DeviceInput `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` // Device details
}

func (x *CheckCustomerEmailRequest) Reset() {
	*x = CheckCustomerEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomerEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomerEmailRequest) ProtoMessage() {}

func (x *CheckCustomerEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomerEmailRequest.ProtoReflect.Descriptor instead.
func (*CheckCustomerEmailRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{1}
}

func (x *CheckCustomerEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CheckCustomerEmailRequest) GetDevice() *types.DeviceInput {
	if x != nil {
		return x.Device
	}
	return nil
}

//*
// Represents check customer data request.
type CheckCustomerDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                                               // Email.
	FirstName        string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                      // Firstname.
	LastName         string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                         // Lastname.
	Dob              string `protobuf:"bytes,4,opt,name=dob,proto3" json:"dob,omitempty"`                                                   // Date of birth.
	AccountNumber    string `protobuf:"bytes,5,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`          // Account number.
	SortCode         string `protobuf:"bytes,6,opt,name=sort_code,json=sortCode,proto3" json:"sort_code,omitempty"`                         // Sort code.
	DeviceIdentifier string `protobuf:"bytes,7,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"` // Device identifier.
}

func (x *CheckCustomerDataRequest) Reset() {
	*x = CheckCustomerDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomerDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomerDataRequest) ProtoMessage() {}

func (x *CheckCustomerDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomerDataRequest.ProtoReflect.Descriptor instead.
func (*CheckCustomerDataRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{2}
}

func (x *CheckCustomerDataRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

func (x *CheckCustomerDataRequest) GetDeviceIdentifier() string {
	if x != nil {
		return x.DeviceIdentifier
	}
	return ""
}

//*
// Represents update customer data request.
type CustomerDetailsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName           string        `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                               // Firstname
	LastName            string        `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                                  // Lastname
	Phone               string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                                        // Phone Number
	Email               string        `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                        // Email
	Address             *AddressInput `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                                                    // Address
	TransactionPassword string        `protobuf:"bytes,6,opt,name=transaction_password,json=transactionPassword,proto3" json:"transaction_password,omitempty"` // Transaction Password
}

func (x *CustomerDetailsUpdateRequest) Reset() {
	*x = CustomerDetailsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerDetailsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerDetailsUpdateRequest) ProtoMessage() {}

func (x *CustomerDetailsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerDetailsUpdateRequest.ProtoReflect.Descriptor instead.
func (*CustomerDetailsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerDetailsUpdateRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CustomerDetailsUpdateRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CustomerDetailsUpdateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerDetailsUpdateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerDetailsUpdateRequest) GetAddress() *AddressInput {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CustomerDetailsUpdateRequest) GetTransactionPassword() string {
	if x != nil {
		return x.TransactionPassword
	}
	return ""
}

//*
// Represents register request.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string                       `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`           // Firstname.
	LastName  string                       `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`                              // Lastname.
	Dob       string                       `protobuf:"bytes,3,opt,name=dob,proto3" json:"dob,omitempty"`                                        // Date of birth.
	Address   *AddressInput                `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                // Address.
	Title     types.Customer_CustomerTitle `protobuf:"varint,5,opt,name=title,proto3,enum=types.Customer_CustomerTitle" json:"title,omitempty"` // Title (e.g Mr, Mrs).
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterRequest) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *RegisterRequest) GetAddress() *AddressInput {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RegisterRequest) GetTitle() types.Customer_CustomerTitle {
	if x != nil {
		return x.Title
	}
	return types.Customer_MR
}

//*
// Represents Address input.
type AddressInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryId  string           `protobuf:"bytes,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"` // Country id
	State      string           `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                          // State.
	City       string           `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`                            // City.
	Street     string           `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`                        // Street.
	Postcode   string           `protobuf:"bytes,5,opt,name=postcode,proto3" json:"postcode,omitempty"`                    // Postcode.
	Cordinates *CordinatesInput `protobuf:"bytes,6,opt,name=cordinates,proto3" json:"cordinates,omitempty"`                // Coordinates.
}

func (x *AddressInput) Reset() {
	*x = AddressInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressInput) ProtoMessage() {}

func (x *AddressInput) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressInput.ProtoReflect.Descriptor instead.
func (*AddressInput) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{5}
}

func (x *AddressInput) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *AddressInput) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddressInput) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddressInput) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *AddressInput) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *AddressInput) GetCordinates() *CordinatesInput {
	if x != nil {
		return x.Cordinates
	}
	return nil
}

//*
// Represents Cordinates input.
type CordinatesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   // Latitude.
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"` // Longitude.
}

func (x *CordinatesInput) Reset() {
	*x = CordinatesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CordinatesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CordinatesInput) ProtoMessage() {}

func (x *CordinatesInput) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CordinatesInput.ProtoReflect.Descriptor instead.
func (*CordinatesInput) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{6}
}

func (x *CordinatesInput) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CordinatesInput) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

//*
// Represents set transaction password request.
type SetTransactionPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"` // Password.
}

func (x *SetTransactionPasswordRequest) Reset() {
	*x = SetTransactionPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTransactionPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTransactionPasswordRequest) ProtoMessage() {}

func (x *SetTransactionPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTransactionPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetTransactionPasswordRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{7}
}

func (x *SetTransactionPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

//*
// Represents forgot transaction password request.
type ForgotTransactionPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPassword string `protobuf:"bytes,1,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"` // New password.
}

func (x *ForgotTransactionPasswordRequest) Reset() {
	*x = ForgotTransactionPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotTransactionPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotTransactionPasswordRequest) ProtoMessage() {}

func (x *ForgotTransactionPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotTransactionPasswordRequest.ProtoReflect.Descriptor instead.
func (*ForgotTransactionPasswordRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{8}
}

func (x *ForgotTransactionPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

//*
// Represents reset transaction password request.
type ResetTransactionPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpToken        string `protobuf:"bytes,1,opt,name=otp_token,json=otpToken,proto3" json:"otp_token,omitempty"`                      // Otp Token.
	Email           string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`                                            // Email.
	NewPassword     string `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`             // New password.
	CurrentPassword string `protobuf:"bytes,4,opt,name=current_password,json=currentPassword,proto3" json:"current_password,omitempty"` // Current password.
}

func (x *ResetTransactionPasswordRequest) Reset() {
	*x = ResetTransactionPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTransactionPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTransactionPasswordRequest) ProtoMessage() {}

func (x *ResetTransactionPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTransactionPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetTransactionPasswordRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{9}
}

func (x *ResetTransactionPasswordRequest) GetOtpToken() string {
	if x != nil {
		return x.OtpToken
	}
	return ""
}

func (x *ResetTransactionPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ResetTransactionPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ResetTransactionPasswordRequest) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

//*
// Represents set device token request.
type SetDeviceTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*types.DeviceTokenInput `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"` // Device token.
}

func (x *SetDeviceTokenRequest) Reset() {
	*x = SetDeviceTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceTokenRequest) ProtoMessage() {}

func (x *SetDeviceTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceTokenRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceTokenRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{10}
}

func (x *SetDeviceTokenRequest) GetTokens() []*types.DeviceTokenInput {
	if x != nil {
		return x.Tokens
	}
	return nil
}

//*
// Represents set device preferences request.
type SetDevicePreferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences []*types.DevicePreferencesInput `protobuf:"bytes,1,rep,name=preferences,proto3" json:"preferences,omitempty"` // Device preferences.
}

func (x *SetDevicePreferencesRequest) Reset() {
	*x = SetDevicePreferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDevicePreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDevicePreferencesRequest) ProtoMessage() {}

func (x *SetDevicePreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDevicePreferencesRequest.ProtoReflect.Descriptor instead.
func (*SetDevicePreferencesRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{11}
}

func (x *SetDevicePreferencesRequest) GetPreferences() []*types.DevicePreferencesInput {
	if x != nil {
		return x.Preferences
	}
	return nil
}

//*
// Represents check bvn request.
type CheckBVNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bvn   string `protobuf:"bytes,1,opt,name=bvn,proto3" json:"bvn,omitempty"`     // Bvn.
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"` // Phone number.
}

func (x *CheckBVNRequest) Reset() {
	*x = CheckBVNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBVNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBVNRequest) ProtoMessage() {}

func (x *CheckBVNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBVNRequest.ProtoReflect.Descriptor instead.
func (*CheckBVNRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{12}
}

func (x *CheckBVNRequest) GetBvn() string {
	if x != nil {
		return x.Bvn
	}
	return ""
}

func (x *CheckBVNRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

//*
// Represents Check Email  request.
type CheckEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` // Email.
}

func (x *CheckEmailRequest) Reset() {
	*x = CheckEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEmailRequest) ProtoMessage() {}

func (x *CheckEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEmailRequest.ProtoReflect.Descriptor instead.
func (*CheckEmailRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{13}
}

func (x *CheckEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

//*
// Represents check phone number request.
type CheckPhoneNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` // Phone number.
}

func (x *CheckPhoneNumberRequest) Reset() {
	*x = CheckPhoneNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneNumberRequest) ProtoMessage() {}

func (x *CheckPhoneNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneNumberRequest.ProtoReflect.Descriptor instead.
func (*CheckPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{14}
}

func (x *CheckPhoneNumberRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

//*
// Represents me request.
type MeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeRequest) Reset() {
	*x = MeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeRequest) ProtoMessage() {}

func (x *MeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeRequest.ProtoReflect.Descriptor instead.
func (*MeRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{15}
}

//*
// Represents me response.
type MeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*MeResponse_Customer
	//	*MeResponse_Staff
	Data isMeResponse_Data `protobuf_oneof:"data"`
}

func (x *MeResponse) Reset() {
	*x = MeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeResponse) ProtoMessage() {}

func (x *MeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeResponse.ProtoReflect.Descriptor instead.
func (*MeResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{16}
}

func (m *MeResponse) GetData() isMeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MeResponse) GetCustomer() *types.Customer {
	if x, ok := x.GetData().(*MeResponse_Customer); ok {
		return x.Customer
	}
	return nil
}

func (x *MeResponse) GetStaff() *types.Staff {
	if x, ok := x.GetData().(*MeResponse_Staff); ok {
		return x.Staff
	}
	return nil
}

type isMeResponse_Data interface {
	isMeResponse_Data()
}

type MeResponse_Customer struct {
	Customer *types.Customer `protobuf:"bytes,1,opt,name=customer,proto3,oneof"` // Customer.
}

type MeResponse_Staff struct {
	Staff *types.Staff `protobuf:"bytes,2,opt,name=staff,proto3,oneof"` // Staff.
}

func (*MeResponse_Customer) isMeResponse_Data() {}

func (*MeResponse_Staff) isMeResponse_Data() {}

//*
// Represents get customer request.
type GetCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerRequest) Reset() {
	*x = GetCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerRequest) ProtoMessage() {}

func (x *GetCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{17}
}

func (x *GetCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents get customers request.
type GetCustomersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string                            `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"`                                              // Keywords.
	First    int32                             `protobuf:"varint,2,opt,name=first,proto3" json:"first,omitempty"`                                                   // First.
	After    string                            `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`                                                    // After.
	Last     int32                             `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`                                                     // Last.
	Before   string                            `protobuf:"bytes,5,opt,name=before,proto3" json:"before,omitempty"`                                                  // Before.
	Statuses []types.Customer_CustomerStatuses `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=types.Customer_CustomerStatuses" json:"statuses,omitempty"` // Statuses.
}

func (x *GetCustomersRequest) Reset() {
	*x = GetCustomersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomersRequest) ProtoMessage() {}

func (x *GetCustomersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomersRequest.ProtoReflect.Descriptor instead.
func (*GetCustomersRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{18}
}

func (x *GetCustomersRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *GetCustomersRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *GetCustomersRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *GetCustomersRequest) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *GetCustomersRequest) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *GetCustomersRequest) GetStatuses() []types.Customer_CustomerStatuses {
	if x != nil {
		return x.Statuses
	}
	return nil
}

//*
// Represents get customers response.
type GetCustomersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*types.Customer     `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                         // Customer nodes (list of customer).
	PaginationInfo *types.PaginationInfo `protobuf:"bytes,2,opt,name=pagination_info,json=paginationInfo,proto3" json:"pagination_info,omitempty"` // Pagination info.
	TotalCount     int32                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // Total count.
}

func (x *GetCustomersResponse) Reset() {
	*x = GetCustomersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomersResponse) ProtoMessage() {}

func (x *GetCustomersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomersResponse.ProtoReflect.Descriptor instead.
func (*GetCustomersResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{19}
}

func (x *GetCustomersResponse) GetNodes() []*types.Customer {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetCustomersResponse) GetPaginationInfo() *types.PaginationInfo {
	if x != nil {
		return x.PaginationInfo
	}
	return nil
}

func (x *GetCustomersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// Represents get content request.
type GetContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Content id.
}

func (x *GetContentRequest) Reset() {
	*x = GetContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentRequest) ProtoMessage() {}

func (x *GetContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentRequest.ProtoReflect.Descriptor instead.
func (*GetContentRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{20}
}

func (x *GetContentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents get contents request.
type GetContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  int32  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`  // First.
	After  string `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`   // After.
	Last   int32  `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`    // Last.
	Before string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"` // Before .
}

func (x *GetContentsRequest) Reset() {
	*x = GetContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentsRequest) ProtoMessage() {}

func (x *GetContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentsRequest.ProtoReflect.Descriptor instead.
func (*GetContentsRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{21}
}

func (x *GetContentsRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *GetContentsRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *GetContentsRequest) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *GetContentsRequest) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

//*
// Represents get contents response.
type GetContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*types.Content      `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                         // Content nodes (list of content).
	PaginationInfo *types.PaginationInfo `protobuf:"bytes,2,opt,name=pagination_info,json=paginationInfo,proto3" json:"pagination_info,omitempty"` // Pagination info
	TotalCount     int32                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // Total count.
}

func (x *GetContentsResponse) Reset() {
	*x = GetContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentsResponse) ProtoMessage() {}

func (x *GetContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentsResponse.ProtoReflect.Descriptor instead.
func (*GetContentsResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{22}
}

func (x *GetContentsResponse) GetNodes() []*types.Content {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetContentsResponse) GetPaginationInfo() *types.PaginationInfo {
	if x != nil {
		return x.PaginationInfo
	}
	return nil
}

func (x *GetContentsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// Represents set acceptance request.
type SetAcceptanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"` // Content id.
}

func (x *SetAcceptanceRequest) Reset() {
	*x = SetAcceptanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAcceptanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAcceptanceRequest) ProtoMessage() {}

func (x *SetAcceptanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAcceptanceRequest.ProtoReflect.Descriptor instead.
func (*SetAcceptanceRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{23}
}

func (x *SetAcceptanceRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

//*
// Represents get questionary request.
type GetQuestionaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // id
}

func (x *GetQuestionaryRequest) Reset() {
	*x = GetQuestionaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionaryRequest) ProtoMessage() {}

func (x *GetQuestionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionaryRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionaryRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{24}
}

func (x *GetQuestionaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents get questionaries request.
type GetQuestionariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string                                  `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                    // Keywords.
	First    int32                                   `protobuf:"varint,2,opt,name=first,proto3" json:"first,omitempty"`                                                         // First.
	After    string                                  `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`                                                          // After.
	Last     int32                                   `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`                                                           // Last.
	Before   string                                  `protobuf:"bytes,5,opt,name=before,proto3" json:"before,omitempty"`                                                        // Before.
	Statuses []types.Questionary_QuestionaryStatuses `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=types.Questionary_QuestionaryStatuses" json:"statuses,omitempty"` // Questionary statuses.
	Types    []types.Questionary_QuestionaryTypes    `protobuf:"varint,7,rep,packed,name=types,proto3,enum=types.Questionary_QuestionaryTypes" json:"types,omitempty"`          // Questionary types.
}

func (x *GetQuestionariesRequest) Reset() {
	*x = GetQuestionariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionariesRequest) ProtoMessage() {}

func (x *GetQuestionariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionariesRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionariesRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{25}
}

func (x *GetQuestionariesRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *GetQuestionariesRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *GetQuestionariesRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *GetQuestionariesRequest) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *GetQuestionariesRequest) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *GetQuestionariesRequest) GetStatuses() []types.Questionary_QuestionaryStatuses {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GetQuestionariesRequest) GetTypes() []types.Questionary_QuestionaryTypes {
	if x != nil {
		return x.Types
	}
	return nil
}

//*
// Represents get questionaries response.
type GetQuestionariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*types.Questionary  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                         // Questionary nodes (list of questionary).
	PaginationInfo *types.PaginationInfo `protobuf:"bytes,2,opt,name=pagination_info,json=paginationInfo,proto3" json:"pagination_info,omitempty"` // Pagination info.
	TotalCount     int32                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // Total count.
}

func (x *GetQuestionariesResponse) Reset() {
	*x = GetQuestionariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionariesResponse) ProtoMessage() {}

func (x *GetQuestionariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionariesResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionariesResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{26}
}

func (x *GetQuestionariesResponse) GetNodes() []*types.Questionary {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetQuestionariesResponse) GetPaginationInfo() *types.PaginationInfo {
	if x != nil {
		return x.PaginationInfo
	}
	return nil
}

func (x *GetQuestionariesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// Represents answer questionary request.
type AnswerQuestionaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // Id
	Answers []*AnswerInput `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"` // Ansswer input.
}

func (x *AnswerQuestionaryRequest) Reset() {
	*x = AnswerQuestionaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerQuestionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerQuestionaryRequest) ProtoMessage() {}

func (x *AnswerQuestionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerQuestionaryRequest.ProtoReflect.Descriptor instead.
func (*AnswerQuestionaryRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{27}
}

func (x *AnswerQuestionaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnswerQuestionaryRequest) GetAnswers() []*AnswerInput {
	if x != nil {
		return x.Answers
	}
	return nil
}

//*
// Represents answer input.
type AnswerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // Id
	Answer            string   `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`                                                // Answer.
	PredefinedAnswers []string `protobuf:"bytes,3,rep,name=predefined_answers,json=predefinedAnswers,proto3" json:"predefined_answers,omitempty"` // Predefined answers.
}

func (x *AnswerInput) Reset() {
	*x = AnswerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerInput) ProtoMessage() {}

func (x *AnswerInput) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerInput.ProtoReflect.Descriptor instead.
func (*AnswerInput) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{28}
}

func (x *AnswerInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnswerInput) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerInput) GetPredefinedAnswers() []string {
	if x != nil {
		return x.PredefinedAnswers
	}
	return nil
}

//*
// Represents get addresses request.
type GetAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First    int32  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`      // First.
	After    string `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`       // After.
	Last     int32  `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`        // Last.
	Before   string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`     // Before.
	Postcode string `protobuf:"bytes,5,opt,name=postcode,proto3" json:"postcode,omitempty"` // Postcode.
}

func (x *GetAddressesRequest) Reset() {
	*x = GetAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesRequest) ProtoMessage() {}

func (x *GetAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesRequest.ProtoReflect.Descriptor instead.
func (*GetAddressesRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{29}
}

func (x *GetAddressesRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *GetAddressesRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *GetAddressesRequest) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *GetAddressesRequest) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *GetAddressesRequest) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

//*
// Represents get addresses response.
type GetAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*types.Address      `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                         // Address nodes (list of address).
	PaginationInfo *types.PaginationInfo `protobuf:"bytes,2,opt,name=pagination_info,json=paginationInfo,proto3" json:"pagination_info,omitempty"` // Pagination info.
	TotalCount     int32                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // Total count.
}

func (x *GetAddressesResponse) Reset() {
	*x = GetAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesResponse) ProtoMessage() {}

func (x *GetAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesResponse.ProtoReflect.Descriptor instead.
func (*GetAddressesResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{30}
}

func (x *GetAddressesResponse) GetNodes() []*types.Address {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetAddressesResponse) GetPaginationInfo() *types.PaginationInfo {
	if x != nil {
		return x.PaginationInfo
	}
	return nil
}

func (x *GetAddressesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// Represents get countries request.
type GetCountriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"` // Keywords.
	First    int32  `protobuf:"varint,2,opt,name=first,proto3" json:"first,omitempty"`      // First.
	After    string `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`       // After.
	Last     int32  `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`        // Last.
	Before   string `protobuf:"bytes,5,opt,name=before,proto3" json:"before,omitempty"`     // Before.
}

func (x *GetCountriesRequest) Reset() {
	*x = GetCountriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesRequest) ProtoMessage() {}

func (x *GetCountriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesRequest.ProtoReflect.Descriptor instead.
func (*GetCountriesRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{31}
}

func (x *GetCountriesRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *GetCountriesRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *GetCountriesRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *GetCountriesRequest) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *GetCountriesRequest) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

//*
// Represents get countries response.
type GetCountriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*types.Country      `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                         // Country nodes (list of country).
	PaginationInfo *types.PaginationInfo `protobuf:"bytes,2,opt,name=pagination_info,json=paginationInfo,proto3" json:"pagination_info,omitempty"` // Pagination info.
	TotalCount     int32                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // Total count.
}

func (x *GetCountriesResponse) Reset() {
	*x = GetCountriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountriesResponse) ProtoMessage() {}

func (x *GetCountriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountriesResponse.ProtoReflect.Descriptor instead.
func (*GetCountriesResponse) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{32}
}

func (x *GetCountriesResponse) GetNodes() []*types.Country {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetCountriesResponse) GetPaginationInfo() *types.PaginationInfo {
	if x != nil {
		return x.PaginationInfo
	}
	return nil
}

func (x *GetCountriesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// Represents deactivate credential request.
type DeactivateCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType types.IdentityCredentials_IdentityCredentialsTypes `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=types.IdentityCredentials_IdentityCredentialsTypes" json:"credential_type,omitempty"` // Credential type.
}

func (x *DeactivateCredentialRequest) Reset() {
	*x = DeactivateCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateCredentialRequest) ProtoMessage() {}

func (x *DeactivateCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeactivateCredentialRequest) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{33}
}

func (x *DeactivateCredentialRequest) GetCredentialType() types.IdentityCredentials_IdentityCredentialsTypes {
	if x != nil {
		return x.CredentialType
	}
	return types.IdentityCredentials_LOGIN
}

var File_customer_proto protoreflect.FileDescriptor

var file_customer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x5d, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xef,
	0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xeb, 0x01, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc5,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12,
	0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x4b, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x45, 0x0a, 0x20, 0x46, 0x6f, 0x72,
	0x67, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x5e, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x39, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x56, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x76, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x62, 0x76, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0a, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x35, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x8c, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x22, 0xa5, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x18, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x0b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x1b, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x94, 0x0f, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x15, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x19, 0x46, 0x6f, 0x72, 0x67, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x56, 0x4e, 0x12, 0x19, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x56, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x02, 0x4d, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x11, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x14, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customer_proto_rawDescOnce sync.Once
	file_customer_proto_rawDescData = file_customer_proto_rawDesc
)

func file_customer_proto_rawDescGZIP() []byte {
	file_customer_proto_rawDescOnce.Do(func() {
		file_customer_proto_rawDescData = protoimpl.X.CompressGZIP(file_customer_proto_rawDescData)
	})
	return file_customer_proto_rawDescData
}

var file_customer_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_customer_proto_goTypes = []interface{}{
	(*ResetLoginPasswordRequest)(nil),                       // 0: customer.ResetLoginPasswordRequest
	(*CheckCustomerEmailRequest)(nil),                       // 1: customer.CheckCustomerEmailRequest
	(*CheckCustomerDataRequest)(nil),                        // 2: customer.CheckCustomerDataRequest
	(*CustomerDetailsUpdateRequest)(nil),                    // 3: customer.CustomerDetailsUpdateRequest
	(*RegisterRequest)(nil),                                 // 4: customer.RegisterRequest
	(*AddressInput)(nil),                                    // 5: customer.AddressInput
	(*CordinatesInput)(nil),                                 // 6: customer.CordinatesInput
	(*SetTransactionPasswordRequest)(nil),                   // 7: customer.SetTransactionPasswordRequest
	(*ForgotTransactionPasswordRequest)(nil),                // 8: customer.ForgotTransactionPasswordRequest
	(*ResetTransactionPasswordRequest)(nil),                 // 9: customer.ResetTransactionPasswordRequest
	(*SetDeviceTokenRequest)(nil),                           // 10: customer.SetDeviceTokenRequest
	(*SetDevicePreferencesRequest)(nil),                     // 11: customer.SetDevicePreferencesRequest
	(*CheckBVNRequest)(nil),                                 // 12: customer.CheckBVNRequest
	(*CheckEmailRequest)(nil),                               // 13: customer.CheckEmailRequest
	(*CheckPhoneNumberRequest)(nil),                         // 14: customer.CheckPhoneNumberRequest
	(*MeRequest)(nil),                                       // 15: customer.MeRequest
	(*MeResponse)(nil),                                      // 16: customer.MeResponse
	(*GetCustomerRequest)(nil),                              // 17: customer.GetCustomerRequest
	(*GetCustomersRequest)(nil),                             // 18: customer.GetCustomersRequest
	(*GetCustomersResponse)(nil),                            // 19: customer.GetCustomersResponse
	(*GetContentRequest)(nil),                               // 20: customer.GetContentRequest
	(*GetContentsRequest)(nil),                              // 21: customer.GetContentsRequest
	(*GetContentsResponse)(nil),                             // 22: customer.GetContentsResponse
	(*SetAcceptanceRequest)(nil),                            // 23: customer.SetAcceptanceRequest
	(*GetQuestionaryRequest)(nil),                           // 24: customer.GetQuestionaryRequest
	(*GetQuestionariesRequest)(nil),                         // 25: customer.GetQuestionariesRequest
	(*GetQuestionariesResponse)(nil),                        // 26: customer.GetQuestionariesResponse
	(*AnswerQuestionaryRequest)(nil),                        // 27: customer.AnswerQuestionaryRequest
	(*AnswerInput)(nil),                                     // 28: customer.AnswerInput
	(*GetAddressesRequest)(nil),                             // 29: customer.GetAddressesRequest
	(*GetAddressesResponse)(nil),                            // 30: customer.GetAddressesResponse
	(*GetCountriesRequest)(nil),                             // 31: customer.GetCountriesRequest
	(*GetCountriesResponse)(nil),                            // 32: customer.GetCountriesResponse
	(*DeactivateCredentialRequest)(nil),                     // 33: customer.DeactivateCredentialRequest
	(*types.DeviceInput)(nil),                               // 34: types.DeviceInput
	(types.Customer_CustomerTitle)(0),                       // 35: types.Customer.CustomerTitle
	(*types.DeviceTokenInput)(nil),                          // 36: types.DeviceTokenInput
	(*types.DevicePreferencesInput)(nil),                    // 37: types.DevicePreferencesInput
	(*types.Customer)(nil),                                  // 38: types.Customer
	(*types.Staff)(nil),                                     // 39: types.Staff
	(types.Customer_CustomerStatuses)(0),                    // 40: types.Customer.CustomerStatuses
	(*types.PaginationInfo)(nil),                            // 41: types.PaginationInfo
	(*types.Content)(nil),                                   // 42: types.Content
	(types.Questionary_QuestionaryStatuses)(0),              // 43: types.Questionary.QuestionaryStatuses
	(types.Questionary_QuestionaryTypes)(0),                 // 44: types.Questionary.QuestionaryTypes
	(*types.Questionary)(nil),                               // 45: types.Questionary
	(*types.Address)(nil),                                   // 46: types.Address
	(*types.Country)(nil),                                   // 47: types.Country
	(types.IdentityCredentials_IdentityCredentialsTypes)(0), // 48: types.IdentityCredentials.IdentityCredentialsTypes
	(*types.DefaultResponse)(nil),                           // 49: types.DefaultResponse
	(*types.Device)(nil),                                    // 50: types.Device
}
var file_customer_proto_depIdxs = []int32{
	34, // 0: customer.CheckCustomerEmailRequest.device:type_name -> types.DeviceInput
	5,  // 1: customer.CustomerDetailsUpdateRequest.address:type_name -> customer.AddressInput
	5,  // 2: customer.RegisterRequest.address:type_name -> customer.AddressInput
	35, // 3: customer.RegisterRequest.title:type_name -> types.Customer.CustomerTitle
	6,  // 4: customer.AddressInput.cordinates:type_name -> customer.CordinatesInput
	36, // 5: customer.SetDeviceTokenRequest.tokens:type_name -> types.DeviceTokenInput
	37, // 6: customer.SetDevicePreferencesRequest.preferences:type_name -> types.DevicePreferencesInput
	38, // 7: customer.MeResponse.customer:type_name -> types.Customer
	39, // 8: customer.MeResponse.staff:type_name -> types.Staff
	40, // 9: customer.GetCustomersRequest.statuses:type_name -> types.Customer.CustomerStatuses
	38, // 10: customer.GetCustomersResponse.nodes:type_name -> types.Customer
	41, // 11: customer.GetCustomersResponse.pagination_info:type_name -> types.PaginationInfo
	42, // 12: customer.GetContentsResponse.nodes:type_name -> types.Content
	41, // 13: customer.GetContentsResponse.pagination_info:type_name -> types.PaginationInfo
	43, // 14: customer.GetQuestionariesRequest.statuses:type_name -> types.Questionary.QuestionaryStatuses
	44, // 15: customer.GetQuestionariesRequest.types:type_name -> types.Questionary.QuestionaryTypes
	45, // 16: customer.GetQuestionariesResponse.nodes:type_name -> types.Questionary
	41, // 17: customer.GetQuestionariesResponse.pagination_info:type_name -> types.PaginationInfo
	28, // 18: customer.AnswerQuestionaryRequest.answers:type_name -> customer.AnswerInput
	46, // 19: customer.GetAddressesResponse.nodes:type_name -> types.Address
	41, // 20: customer.GetAddressesResponse.pagination_info:type_name -> types.PaginationInfo
	47, // 21: customer.GetCountriesResponse.nodes:type_name -> types.Country
	41, // 22: customer.GetCountriesResponse.pagination_info:type_name -> types.PaginationInfo
	48, // 23: customer.DeactivateCredentialRequest.credential_type:type_name -> types.IdentityCredentials.IdentityCredentialsTypes
	0,  // 24: customer.CustomerService.ResetLoginPassword:input_type -> customer.ResetLoginPasswordRequest
	1,  // 25: customer.CustomerService.CheckCustomerEmail:input_type -> customer.CheckCustomerEmailRequest
	2,  // 26: customer.CustomerService.CheckCustomerData:input_type -> customer.CheckCustomerDataRequest
	3,  // 27: customer.CustomerService.CustomerDetailsUpdate:input_type -> customer.CustomerDetailsUpdateRequest
	4,  // 28: customer.CustomerService.Register:input_type -> customer.RegisterRequest
	7,  // 29: customer.CustomerService.SetTransactionPassword:input_type -> customer.SetTransactionPasswordRequest
	8,  // 30: customer.CustomerService.ForgotTransactionPassword:input_type -> customer.ForgotTransactionPasswordRequest
	9,  // 31: customer.CustomerService.ResetTransactionPassword:input_type -> customer.ResetTransactionPasswordRequest
	10, // 32: customer.CustomerService.SetDeviceToken:input_type -> customer.SetDeviceTokenRequest
	11, // 33: customer.CustomerService.SetDevicePreferences:input_type -> customer.SetDevicePreferencesRequest
	12, // 34: customer.CustomerService.CheckBVN:input_type -> customer.CheckBVNRequest
	13, // 35: customer.CustomerService.CheckEmail:input_type -> customer.CheckEmailRequest
	14, // 36: customer.CustomerService.CheckPhoneNumber:input_type -> customer.CheckPhoneNumberRequest
	15, // 37: customer.CustomerService.Me:input_type -> customer.MeRequest
	17, // 38: customer.CustomerService.GetCustomer:input_type -> customer.GetCustomerRequest
	18, // 39: customer.CustomerService.GetCustomers:input_type -> customer.GetCustomersRequest
	20, // 40: customer.CustomerService.GetContent:input_type -> customer.GetContentRequest
	21, // 41: customer.CustomerService.GetContents:input_type -> customer.GetContentsRequest
	23, // 42: customer.CustomerService.SetAcceptance:input_type -> customer.SetAcceptanceRequest
	24, // 43: customer.CustomerService.GetQuestionary:input_type -> customer.GetQuestionaryRequest
	25, // 44: customer.CustomerService.GetQuestionaries:input_type -> customer.GetQuestionariesRequest
	27, // 45: customer.CustomerService.AnswerQuestionary:input_type -> customer.AnswerQuestionaryRequest
	29, // 46: customer.CustomerService.GetAddresses:input_type -> customer.GetAddressesRequest
	31, // 47: customer.CustomerService.GetCountries:input_type -> customer.GetCountriesRequest
	33, // 48: customer.CustomerService.DeactivateCredential:input_type -> customer.DeactivateCredentialRequest
	49, // 49: customer.CustomerService.ResetLoginPassword:output_type -> types.DefaultResponse
	49, // 50: customer.CustomerService.CheckCustomerEmail:output_type -> types.DefaultResponse
	49, // 51: customer.CustomerService.CheckCustomerData:output_type -> types.DefaultResponse
	49, // 52: customer.CustomerService.CustomerDetailsUpdate:output_type -> types.DefaultResponse
	38, // 53: customer.CustomerService.Register:output_type -> types.Customer
	49, // 54: customer.CustomerService.SetTransactionPassword:output_type -> types.DefaultResponse
	49, // 55: customer.CustomerService.ForgotTransactionPassword:output_type -> types.DefaultResponse
	49, // 56: customer.CustomerService.ResetTransactionPassword:output_type -> types.DefaultResponse
	49, // 57: customer.CustomerService.SetDeviceToken:output_type -> types.DefaultResponse
	50, // 58: customer.CustomerService.SetDevicePreferences:output_type -> types.Device
	49, // 59: customer.CustomerService.CheckBVN:output_type -> types.DefaultResponse
	49, // 60: customer.CustomerService.CheckEmail:output_type -> types.DefaultResponse
	49, // 61: customer.CustomerService.CheckPhoneNumber:output_type -> types.DefaultResponse
	16, // 62: customer.CustomerService.Me:output_type -> customer.MeResponse
	38, // 63: customer.CustomerService.GetCustomer:output_type -> types.Customer
	19, // 64: customer.CustomerService.GetCustomers:output_type -> customer.GetCustomersResponse
	42, // 65: customer.CustomerService.GetContent:output_type -> types.Content
	22, // 66: customer.CustomerService.GetContents:output_type -> customer.GetContentsResponse
	49, // 67: customer.CustomerService.SetAcceptance:output_type -> types.DefaultResponse
	45, // 68: customer.CustomerService.GetQuestionary:output_type -> types.Questionary
	26, // 69: customer.CustomerService.GetQuestionaries:output_type -> customer.GetQuestionariesResponse
	49, // 70: customer.CustomerService.AnswerQuestionary:output_type -> types.DefaultResponse
	30, // 71: customer.CustomerService.GetAddresses:output_type -> customer.GetAddressesResponse
	32, // 72: customer.CustomerService.GetCountries:output_type -> customer.GetCountriesResponse
	49, // 73: customer.CustomerService.DeactivateCredential:output_type -> types.DefaultResponse
	49, // [49:74] is the sub-list for method output_type
	24, // [24:49] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_customer_proto_init() }
func file_customer_proto_init() {
	if File_customer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_customer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetLoginPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomerEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomerDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerDetailsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CordinatesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTransactionPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotTransactionPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTransactionPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDevicePreferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBVNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAcceptanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerQuestionaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_customer_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MeResponse_Customer)(nil),
		(*MeResponse_Staff)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_customer_proto_goTypes,
		DependencyIndexes: file_customer_proto_depIdxs,
		MessageInfos:      file_customer_proto_msgTypes,
	}.Build()
	File_customer_proto = out.File
	file_customer_proto_rawDesc = nil
	file_customer_proto_goTypes = nil
	file_customer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Used to reset login password, Pass in a ResetLoginPasswordRequest and a DefaultResponse would be returned.
	ResetLoginPassword(ctx context.Context, in *ResetLoginPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Returns valid response and code depending of type of user (0 - Customer exist, 1 - Customer exist and has GBP account)
	CheckCustomerEmail(ctx context.Context, in *CheckCustomerEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Used to check customer email, Pass in a CheckCustomerDataRequest and a DefaultResponse would be returned.
	CheckCustomerData(ctx context.Context, in *CheckCustomerDataRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Update customer details, Pass in CustomerDetailsUpdateRequest a and a Default Response will be returned
	CustomerDetailsUpdate(ctx context.Context, in *CustomerDetailsUpdateRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Register for the fist time the details of the customer logged in
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*types.Customer, error)
	// Used to set transaction password, Pass in a SetTransactionPasswordRequest and a DefaultResponse would be returned.
	SetTransactionPassword(ctx context.Context, in *SetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Forgot transaction password, Pass in a ForgotTransactionPasswordRequest and a DefaultResponse would be returned.
	ForgotTransactionPassword(ctx context.Context, in *ForgotTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Used to reset transaction password, Pass in a ResetTransactionPasswordRequest and a DefaultResponse would be returned.
	ResetTransactionPassword(ctx context.Context, in *ResetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Set device token, Pass in a SetDeviceTokenRequest and a DefaultResponse would be returned.
	SetDeviceToken(ctx context.Context, in *SetDeviceTokenRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Set device preferences, Pass in a SetDevicePreferencesRequest and a Device type would be returned.
	SetDevicePreferences(ctx context.Context, in *SetDevicePreferencesRequest, opts ...grpc.CallOption) (*types.Device, error)
	// Used to Check BVN, Pass in a CheckBVNRequest and a DefaultResponse would be returned.
	CheckBVN(ctx context.Context, in *CheckBVNRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Used to Check Email, Pass in a CheckEmailRequest and a DefaultResponse would be returned.
	CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Used to Check Phone Number, Pass in a CheckPhoneNumberRequest and a DefaultResponse would be returned.
	CheckPhoneNumber(ctx context.Context, in *CheckPhoneNumberRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Me, Pass in a Pass in a CheckPhoneNumberRequest and a MeResponse would be returned.
	Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error)
	// Get Customer, Pass in a GetCustomerRequest and a Customer type would be returned.
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*types.Customer, error)
	// Get Customers, Pass in a GetCustomersRequest and a list of customers would be returned.
	GetCustomers(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (*GetCustomersResponse, error)
	// Get Content, Pass in a GetContentRequest and a Content type would be returned.
	GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*types.Content, error)
	// Get Contents, Pass in a GetContentsRequest and a list of contents would be returned.
	GetContents(ctx context.Context, in *GetContentsRequest, opts ...grpc.CallOption) (*GetContentsResponse, error)
	// Set Acceptance, Pass in a SetAcceptanceRequest and a DefaultResponse  would be returned.
	SetAcceptance(ctx context.Context, in *SetAcceptanceRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Get Questionary, Pass in a GetQuestionaryRequest and a Questionary type would be returned.
	GetQuestionary(ctx context.Context, in *GetQuestionaryRequest, opts ...grpc.CallOption) (*types.Questionary, error)
	// Get Questionaries, Pass in a GetQuestionariesRequest and a list of questionary would be returned.
	GetQuestionaries(ctx context.Context, in *GetQuestionariesRequest, opts ...grpc.CallOption) (*GetQuestionariesResponse, error)
	// Answer Questionary, Pass in a AnswerQuestionaryRequest, and a DefaultResponse would be returned.
	AnswerQuestionary(ctx context.Context, in *AnswerQuestionaryRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
	// Get Addresses, Pass in a GetAddressesRequest and a list of addresses would be returned.
	GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error)
	// Get Countries, Pass in a GetCountriesRequest and a list of countries would be returned.
	GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error)
	// Deactivate Credential, Pass in a DeactivateCredentialRequest and a DefaultResponse would be returned.
	DeactivateCredential(ctx context.Context, in *DeactivateCredentialRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) ResetLoginPassword(ctx context.Context, in *ResetLoginPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/ResetLoginPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckCustomerEmail(ctx context.Context, in *CheckCustomerEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CheckCustomerEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckCustomerData(ctx context.Context, in *CheckCustomerDataRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CheckCustomerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerDetailsUpdate(ctx context.Context, in *CustomerDetailsUpdateRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CustomerDetailsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*types.Customer, error) {
	out := new(types.Customer)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SetTransactionPassword(ctx context.Context, in *SetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/SetTransactionPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ForgotTransactionPassword(ctx context.Context, in *ForgotTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/ForgotTransactionPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ResetTransactionPassword(ctx context.Context, in *ResetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/ResetTransactionPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SetDeviceToken(ctx context.Context, in *SetDeviceTokenRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/SetDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SetDevicePreferences(ctx context.Context, in *SetDevicePreferencesRequest, opts ...grpc.CallOption) (*types.Device, error) {
	out := new(types.Device)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/SetDevicePreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckBVN(ctx context.Context, in *CheckBVNRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CheckBVN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CheckEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CheckPhoneNumber(ctx context.Context, in *CheckPhoneNumberRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CheckPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*types.Customer, error) {
	out := new(types.Customer)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomers(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (*GetCustomersResponse, error) {
	out := new(GetCustomersResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*types.Content, error) {
	out := new(types.Content)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetContents(ctx context.Context, in *GetContentsRequest, opts ...grpc.CallOption) (*GetContentsResponse, error) {
	out := new(GetContentsResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SetAcceptance(ctx context.Context, in *SetAcceptanceRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/SetAcceptance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetQuestionary(ctx context.Context, in *GetQuestionaryRequest, opts ...grpc.CallOption) (*types.Questionary, error) {
	out := new(types.Questionary)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetQuestionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetQuestionaries(ctx context.Context, in *GetQuestionariesRequest, opts ...grpc.CallOption) (*GetQuestionariesResponse, error) {
	out := new(GetQuestionariesResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetQuestionaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AnswerQuestionary(ctx context.Context, in *AnswerQuestionaryRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/AnswerQuestionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error) {
	out := new(GetAddressesResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeactivateCredential(ctx context.Context, in *DeactivateCredentialRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	out := new(types.DefaultResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/DeactivateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// Used to reset login password, Pass in a ResetLoginPasswordRequest and a DefaultResponse would be returned.
	ResetLoginPassword(context.Context, *ResetLoginPasswordRequest) (*types.DefaultResponse, error)
	// Returns valid response and code depending of type of user (0 - Customer exist, 1 - Customer exist and has GBP account)
	CheckCustomerEmail(context.Context, *CheckCustomerEmailRequest) (*types.DefaultResponse, error)
	// Used to check customer email, Pass in a CheckCustomerDataRequest and a DefaultResponse would be returned.
	CheckCustomerData(context.Context, *CheckCustomerDataRequest) (*types.DefaultResponse, error)
	// Update customer details, Pass in CustomerDetailsUpdateRequest a and a Default Response will be returned
	CustomerDetailsUpdate(context.Context, *CustomerDetailsUpdateRequest) (*types.DefaultResponse, error)
	// Register for the fist time the details of the customer logged in
	Register(context.Context, *RegisterRequest) (*types.Customer, error)
	// Used to set transaction password, Pass in a SetTransactionPasswordRequest and a DefaultResponse would be returned.
	SetTransactionPassword(context.Context, *SetTransactionPasswordRequest) (*types.DefaultResponse, error)
	// Forgot transaction password, Pass in a ForgotTransactionPasswordRequest and a DefaultResponse would be returned.
	ForgotTransactionPassword(context.Context, *ForgotTransactionPasswordRequest) (*types.DefaultResponse, error)
	// Used to reset transaction password, Pass in a ResetTransactionPasswordRequest and a DefaultResponse would be returned.
	ResetTransactionPassword(context.Context, *ResetTransactionPasswordRequest) (*types.DefaultResponse, error)
	// Set device token, Pass in a SetDeviceTokenRequest and a DefaultResponse would be returned.
	SetDeviceToken(context.Context, *SetDeviceTokenRequest) (*types.DefaultResponse, error)
	// Set device preferences, Pass in a SetDevicePreferencesRequest and a Device type would be returned.
	SetDevicePreferences(context.Context, *SetDevicePreferencesRequest) (*types.Device, error)
	// Used to Check BVN, Pass in a CheckBVNRequest and a DefaultResponse would be returned.
	CheckBVN(context.Context, *CheckBVNRequest) (*types.DefaultResponse, error)
	// Used to Check Email, Pass in a CheckEmailRequest and a DefaultResponse would be returned.
	CheckEmail(context.Context, *CheckEmailRequest) (*types.DefaultResponse, error)
	// Used to Check Phone Number, Pass in a CheckPhoneNumberRequest and a DefaultResponse would be returned.
	CheckPhoneNumber(context.Context, *CheckPhoneNumberRequest) (*types.DefaultResponse, error)
	// Me, Pass in a Pass in a CheckPhoneNumberRequest and a MeResponse would be returned.
	Me(context.Context, *MeRequest) (*MeResponse, error)
	// Get Customer, Pass in a GetCustomerRequest and a Customer type would be returned.
	GetCustomer(context.Context, *GetCustomerRequest) (*types.Customer, error)
	// Get Customers, Pass in a GetCustomersRequest and a list of customers would be returned.
	GetCustomers(context.Context, *GetCustomersRequest) (*GetCustomersResponse, error)
	// Get Content, Pass in a GetContentRequest and a Content type would be returned.
	GetContent(context.Context, *GetContentRequest) (*types.Content, error)
	// Get Contents, Pass in a GetContentsRequest and a list of contents would be returned.
	GetContents(context.Context, *GetContentsRequest) (*GetContentsResponse, error)
	// Set Acceptance, Pass in a SetAcceptanceRequest and a DefaultResponse  would be returned.
	SetAcceptance(context.Context, *SetAcceptanceRequest) (*types.DefaultResponse, error)
	// Get Questionary, Pass in a GetQuestionaryRequest and a Questionary type would be returned.
	GetQuestionary(context.Context, *GetQuestionaryRequest) (*types.Questionary, error)
	// Get Questionaries, Pass in a GetQuestionariesRequest and a list of questionary would be returned.
	GetQuestionaries(context.Context, *GetQuestionariesRequest) (*GetQuestionariesResponse, error)
	// Answer Questionary, Pass in a AnswerQuestionaryRequest, and a DefaultResponse would be returned.
	AnswerQuestionary(context.Context, *AnswerQuestionaryRequest) (*types.DefaultResponse, error)
	// Get Addresses, Pass in a GetAddressesRequest and a list of addresses would be returned.
	GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error)
	// Get Countries, Pass in a GetCountriesRequest and a list of countries would be returned.
	GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error)
	// Deactivate Credential, Pass in a DeactivateCredentialRequest and a DefaultResponse would be returned.
	DeactivateCredential(context.Context, *DeactivateCredentialRequest) (*types.DefaultResponse, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) ResetLoginPassword(context.Context, *ResetLoginPasswordRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLoginPassword not implemented")
}
func (*UnimplementedCustomerServiceServer) CheckCustomerEmail(context.Context, *CheckCustomerEmailRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomerEmail not implemented")
}
func (*UnimplementedCustomerServiceServer) CheckCustomerData(context.Context, *CheckCustomerDataRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomerData not implemented")
}
func (*UnimplementedCustomerServiceServer) CustomerDetailsUpdate(context.Context, *CustomerDetailsUpdateRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetailsUpdate not implemented")
}
func (*UnimplementedCustomerServiceServer) Register(context.Context, *RegisterRequest) (*types.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedCustomerServiceServer) SetTransactionPassword(context.Context, *SetTransactionPasswordRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTransactionPassword not implemented")
}
func (*UnimplementedCustomerServiceServer) ForgotTransactionPassword(context.Context, *ForgotTransactionPasswordRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotTransactionPassword not implemented")
}
func (*UnimplementedCustomerServiceServer) ResetTransactionPassword(context.Context, *ResetTransactionPasswordRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTransactionPassword not implemented")
}
func (*UnimplementedCustomerServiceServer) SetDeviceToken(context.Context, *SetDeviceTokenRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceToken not implemented")
}
func (*UnimplementedCustomerServiceServer) SetDevicePreferences(context.Context, *SetDevicePreferencesRequest) (*types.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevicePreferences not implemented")
}
func (*UnimplementedCustomerServiceServer) CheckBVN(context.Context, *CheckBVNRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBVN not implemented")
}
func (*UnimplementedCustomerServiceServer) CheckEmail(context.Context, *CheckEmailRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (*UnimplementedCustomerServiceServer) CheckPhoneNumber(context.Context, *CheckPhoneNumberRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneNumber not implemented")
}
func (*UnimplementedCustomerServiceServer) Me(context.Context, *MeRequest) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*types.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCustomers(context.Context, *GetCustomersRequest) (*GetCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (*UnimplementedCustomerServiceServer) GetContent(context.Context, *GetContentRequest) (*types.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (*UnimplementedCustomerServiceServer) GetContents(context.Context, *GetContentsRequest) (*GetContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContents not implemented")
}
func (*UnimplementedCustomerServiceServer) SetAcceptance(context.Context, *SetAcceptanceRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAcceptance not implemented")
}
func (*UnimplementedCustomerServiceServer) GetQuestionary(context.Context, *GetQuestionaryRequest) (*types.Questionary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionary not implemented")
}
func (*UnimplementedCustomerServiceServer) GetQuestionaries(context.Context, *GetQuestionariesRequest) (*GetQuestionariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionaries not implemented")
}
func (*UnimplementedCustomerServiceServer) AnswerQuestionary(context.Context, *AnswerQuestionaryRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestionary not implemented")
}
func (*UnimplementedCustomerServiceServer) GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (*UnimplementedCustomerServiceServer) GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (*UnimplementedCustomerServiceServer) DeactivateCredential(context.Context, *DeactivateCredentialRequest) (*types.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateCredential not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_ResetLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLoginPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ResetLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/ResetLoginPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ResetLoginPassword(ctx, req.(*ResetLoginPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckCustomerEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckCustomerEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CheckCustomerEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckCustomerEmail(ctx, req.(*CheckCustomerEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckCustomerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckCustomerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CheckCustomerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckCustomerData(ctx, req.(*CheckCustomerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerDetailsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerDetailsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CustomerDetailsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerDetailsUpdate(ctx, req.(*CustomerDetailsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SetTransactionPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTransactionPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SetTransactionPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/SetTransactionPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SetTransactionPassword(ctx, req.(*SetTransactionPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ForgotTransactionPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotTransactionPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ForgotTransactionPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/ForgotTransactionPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ForgotTransactionPassword(ctx, req.(*ForgotTransactionPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ResetTransactionPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetTransactionPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ResetTransactionPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/ResetTransactionPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ResetTransactionPassword(ctx, req.(*ResetTransactionPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SetDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SetDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/SetDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SetDeviceToken(ctx, req.(*SetDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SetDevicePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevicePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SetDevicePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/SetDevicePreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SetDevicePreferences(ctx, req.(*SetDevicePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckBVN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBVNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckBVN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CheckBVN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckBVN(ctx, req.(*CheckBVNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CheckEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckEmail(ctx, req.(*CheckEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CheckPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CheckPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CheckPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CheckPhoneNumber(ctx, req.(*CheckPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Me(ctx, req.(*MeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomers(ctx, req.(*GetCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetContent(ctx, req.(*GetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetContents(ctx, req.(*GetContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SetAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SetAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/SetAcceptance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SetAcceptance(ctx, req.(*SetAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetQuestionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetQuestionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetQuestionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetQuestionary(ctx, req.(*GetQuestionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetQuestionaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetQuestionaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetQuestionaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetQuestionaries(ctx, req.(*GetQuestionariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AnswerQuestionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQuestionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AnswerQuestionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/AnswerQuestionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AnswerQuestionary(ctx, req.(*AnswerQuestionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetAddresses(ctx, req.(*GetAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCountries(ctx, req.(*GetCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeactivateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeactivateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/DeactivateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeactivateCredential(ctx, req.(*DeactivateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetLoginPassword",
			Handler:    _CustomerService_ResetLoginPassword_Handler,
		},
		{
			MethodName: "CheckCustomerEmail",
			Handler:    _CustomerService_CheckCustomerEmail_Handler,
		},
		{
			MethodName: "CheckCustomerData",
			Handler:    _CustomerService_CheckCustomerData_Handler,
		},
		{
			MethodName: "CustomerDetailsUpdate",
			Handler:    _CustomerService_CustomerDetailsUpdate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CustomerService_Register_Handler,
		},
		{
			MethodName: "SetTransactionPassword",
			Handler:    _CustomerService_SetTransactionPassword_Handler,
		},
		{
			MethodName: "ForgotTransactionPassword",
			Handler:    _CustomerService_ForgotTransactionPassword_Handler,
		},
		{
			MethodName: "ResetTransactionPassword",
			Handler:    _CustomerService_ResetTransactionPassword_Handler,
		},
		{
			MethodName: "SetDeviceToken",
			Handler:    _CustomerService_SetDeviceToken_Handler,
		},
		{
			MethodName: "SetDevicePreferences",
			Handler:    _CustomerService_SetDevicePreferences_Handler,
		},
		{
			MethodName: "CheckBVN",
			Handler:    _CustomerService_CheckBVN_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _CustomerService_CheckEmail_Handler,
		},
		{
			MethodName: "CheckPhoneNumber",
			Handler:    _CustomerService_CheckPhoneNumber_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _CustomerService_Me_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerService_GetCustomer_Handler,
		},
		{
			MethodName: "GetCustomers",
			Handler:    _CustomerService_GetCustomers_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _CustomerService_GetContent_Handler,
		},
		{
			MethodName: "GetContents",
			Handler:    _CustomerService_GetContents_Handler,
		},
		{
			MethodName: "SetAcceptance",
			Handler:    _CustomerService_SetAcceptance_Handler,
		},
		{
			MethodName: "GetQuestionary",
			Handler:    _CustomerService_GetQuestionary_Handler,
		},
		{
			MethodName: "GetQuestionaries",
			Handler:    _CustomerService_GetQuestionaries_Handler,
		},
		{
			MethodName: "AnswerQuestionary",
			Handler:    _CustomerService_AnswerQuestionary_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _CustomerService_GetAddresses_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _CustomerService_GetCountries_Handler,
		},
		{
			MethodName: "DeactivateCredential",
			Handler:    _CustomerService_DeactivateCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
