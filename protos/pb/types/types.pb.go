// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Customer_CustomerStatuses int32

const (
	Customer_SIGNEDUP   Customer_CustomerStatuses = 0
	Customer_REGISTERED Customer_CustomerStatuses = 1
	Customer_VERIFIED   Customer_CustomerStatuses = 2
	Customer_ONBOARDED  Customer_CustomerStatuses = 3
	Customer_REJECTED   Customer_CustomerStatuses = 4
	Customer_EXITED     Customer_CustomerStatuses = 5
)

// Enum value maps for Customer_CustomerStatuses.
var (
	Customer_CustomerStatuses_name = map[int32]string{
		0: "SIGNEDUP",
		1: "REGISTERED",
		2: "VERIFIED",
		3: "ONBOARDED",
		4: "REJECTED",
		5: "EXITED",
	}
	Customer_CustomerStatuses_value = map[string]int32{
		"SIGNEDUP":   0,
		"REGISTERED": 1,
		"VERIFIED":   2,
		"ONBOARDED":  3,
		"REJECTED":   4,
		"EXITED":     5,
	}
)

func (x Customer_CustomerStatuses) Enum() *Customer_CustomerStatuses {
	p := new(Customer_CustomerStatuses)
	*p = x
	return p
}

func (x Customer_CustomerStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Customer_CustomerStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (Customer_CustomerStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x Customer_CustomerStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Customer_CustomerStatuses.Descriptor instead.
func (Customer_CustomerStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0, 0}
}

type Customer_CustomerTitle int32

const (
	Customer_MR   Customer_CustomerTitle = 0
	Customer_MRS  Customer_CustomerTitle = 1
	Customer_MISS Customer_CustomerTitle = 2
	Customer_MS   Customer_CustomerTitle = 3
)

// Enum value maps for Customer_CustomerTitle.
var (
	Customer_CustomerTitle_name = map[int32]string{
		0: "MR",
		1: "MRS",
		2: "MISS",
		3: "MS",
	}
	Customer_CustomerTitle_value = map[string]int32{
		"MR":   0,
		"MRS":  1,
		"MISS": 2,
		"MS":   3,
	}
)

func (x Customer_CustomerTitle) Enum() *Customer_CustomerTitle {
	p := new(Customer_CustomerTitle)
	*p = x
	return p
}

func (x Customer_CustomerTitle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Customer_CustomerTitle) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (Customer_CustomerTitle) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x Customer_CustomerTitle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Customer_CustomerTitle.Descriptor instead.
func (Customer_CustomerTitle) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0, 1}
}

type Identity_IdentityStatuses int32

const (
	Identity_ACTIVE   Identity_IdentityStatuses = 0
	Identity_INACTIVE Identity_IdentityStatuses = 1
)

// Enum value maps for Identity_IdentityStatuses.
var (
	Identity_IdentityStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Identity_IdentityStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Identity_IdentityStatuses) Enum() *Identity_IdentityStatuses {
	p := new(Identity_IdentityStatuses)
	*p = x
	return p
}

func (x Identity_IdentityStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identity_IdentityStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (Identity_IdentityStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x Identity_IdentityStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identity_IdentityStatuses.Descriptor instead.
func (Identity_IdentityStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5, 0}
}

type IdentityCredentials_IdentityCredentialsTypes int32

const (
	IdentityCredentials_LOGIN IdentityCredentials_IdentityCredentialsTypes = 0
	IdentityCredentials_PIN   IdentityCredentials_IdentityCredentialsTypes = 1
)

// Enum value maps for IdentityCredentials_IdentityCredentialsTypes.
var (
	IdentityCredentials_IdentityCredentialsTypes_name = map[int32]string{
		0: "LOGIN",
		1: "PIN",
	}
	IdentityCredentials_IdentityCredentialsTypes_value = map[string]int32{
		"LOGIN": 0,
		"PIN":   1,
	}
)

func (x IdentityCredentials_IdentityCredentialsTypes) Enum() *IdentityCredentials_IdentityCredentialsTypes {
	p := new(IdentityCredentials_IdentityCredentialsTypes)
	*p = x
	return p
}

func (x IdentityCredentials_IdentityCredentialsTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityCredentials_IdentityCredentialsTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (IdentityCredentials_IdentityCredentialsTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x IdentityCredentials_IdentityCredentialsTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityCredentials_IdentityCredentialsTypes.Descriptor instead.
func (IdentityCredentials_IdentityCredentialsTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6, 0}
}

type IdentityCredentials_IdentityCredentialsStatuses int32

const (
	IdentityCredentials_ACTIVE   IdentityCredentials_IdentityCredentialsStatuses = 0
	IdentityCredentials_INACTIVE IdentityCredentials_IdentityCredentialsStatuses = 1
)

// Enum value maps for IdentityCredentials_IdentityCredentialsStatuses.
var (
	IdentityCredentials_IdentityCredentialsStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	IdentityCredentials_IdentityCredentialsStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x IdentityCredentials_IdentityCredentialsStatuses) Enum() *IdentityCredentials_IdentityCredentialsStatuses {
	p := new(IdentityCredentials_IdentityCredentialsStatuses)
	*p = x
	return p
}

func (x IdentityCredentials_IdentityCredentialsStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityCredentials_IdentityCredentialsStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[4].Descriptor()
}

func (IdentityCredentials_IdentityCredentialsStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[4]
}

func (x IdentityCredentials_IdentityCredentialsStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityCredentials_IdentityCredentialsStatuses.Descriptor instead.
func (IdentityCredentials_IdentityCredentialsStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6, 1}
}

type Organization_OrganizationStatuses int32

const (
	Organization_ACTIVE   Organization_OrganizationStatuses = 0
	Organization_INACTIVE Organization_OrganizationStatuses = 1
)

// Enum value maps for Organization_OrganizationStatuses.
var (
	Organization_OrganizationStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Organization_OrganizationStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Organization_OrganizationStatuses) Enum() *Organization_OrganizationStatuses {
	p := new(Organization_OrganizationStatuses)
	*p = x
	return p
}

func (x Organization_OrganizationStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_OrganizationStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[5].Descriptor()
}

func (Organization_OrganizationStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[5]
}

func (x Organization_OrganizationStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_OrganizationStatuses.Descriptor instead.
func (Organization_OrganizationStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 0}
}

type Staff_StaffStatuses int32

const (
	Staff_ACTIVE   Staff_StaffStatuses = 0
	Staff_INACTIVE Staff_StaffStatuses = 1
)

// Enum value maps for Staff_StaffStatuses.
var (
	Staff_StaffStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Staff_StaffStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Staff_StaffStatuses) Enum() *Staff_StaffStatuses {
	p := new(Staff_StaffStatuses)
	*p = x
	return p
}

func (x Staff_StaffStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Staff_StaffStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[6].Descriptor()
}

func (Staff_StaffStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[6]
}

func (x Staff_StaffStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Staff_StaffStatuses.Descriptor instead.
func (Staff_StaffStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8, 0}
}

type Questionary_QuestionaryTypes int32

const (
	Questionary_REASONS Questionary_QuestionaryTypes = 0
)

// Enum value maps for Questionary_QuestionaryTypes.
var (
	Questionary_QuestionaryTypes_name = map[int32]string{
		0: "REASONS",
	}
	Questionary_QuestionaryTypes_value = map[string]int32{
		"REASONS": 0,
	}
)

func (x Questionary_QuestionaryTypes) Enum() *Questionary_QuestionaryTypes {
	p := new(Questionary_QuestionaryTypes)
	*p = x
	return p
}

func (x Questionary_QuestionaryTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Questionary_QuestionaryTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[7].Descriptor()
}

func (Questionary_QuestionaryTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[7]
}

func (x Questionary_QuestionaryTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Questionary_QuestionaryTypes.Descriptor instead.
func (Questionary_QuestionaryTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10, 0}
}

type Questionary_QuestionaryStatuses int32

const (
	Questionary_ACTIVE   Questionary_QuestionaryStatuses = 0
	Questionary_INACTIVE Questionary_QuestionaryStatuses = 1
)

// Enum value maps for Questionary_QuestionaryStatuses.
var (
	Questionary_QuestionaryStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Questionary_QuestionaryStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Questionary_QuestionaryStatuses) Enum() *Questionary_QuestionaryStatuses {
	p := new(Questionary_QuestionaryStatuses)
	*p = x
	return p
}

func (x Questionary_QuestionaryStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Questionary_QuestionaryStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[8].Descriptor()
}

func (Questionary_QuestionaryStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[8]
}

func (x Questionary_QuestionaryStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Questionary_QuestionaryStatuses.Descriptor instead.
func (Questionary_QuestionaryStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10, 1}
}

type Device_DeviceStatuses int32

const (
	Device_ACTIVE   Device_DeviceStatuses = 0
	Device_INACTIVE Device_DeviceStatuses = 1
)

// Enum value maps for Device_DeviceStatuses.
var (
	Device_DeviceStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Device_DeviceStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Device_DeviceStatuses) Enum() *Device_DeviceStatuses {
	p := new(Device_DeviceStatuses)
	*p = x
	return p
}

func (x Device_DeviceStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_DeviceStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[9].Descriptor()
}

func (Device_DeviceStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[9]
}

func (x Device_DeviceStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_DeviceStatuses.Descriptor instead.
func (Device_DeviceStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15, 0}
}

type DevicePreferences_DevicePreferencesTypes int32

const (
	DevicePreferences_PUSH       DevicePreferences_DevicePreferencesTypes = 0
	DevicePreferences_BIOMETRICS DevicePreferences_DevicePreferencesTypes = 1
)

// Enum value maps for DevicePreferences_DevicePreferencesTypes.
var (
	DevicePreferences_DevicePreferencesTypes_name = map[int32]string{
		0: "PUSH",
		1: "BIOMETRICS",
	}
	DevicePreferences_DevicePreferencesTypes_value = map[string]int32{
		"PUSH":       0,
		"BIOMETRICS": 1,
	}
)

func (x DevicePreferences_DevicePreferencesTypes) Enum() *DevicePreferences_DevicePreferencesTypes {
	p := new(DevicePreferences_DevicePreferencesTypes)
	*p = x
	return p
}

func (x DevicePreferences_DevicePreferencesTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevicePreferences_DevicePreferencesTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[10].Descriptor()
}

func (DevicePreferences_DevicePreferencesTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[10]
}

func (x DevicePreferences_DevicePreferencesTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevicePreferences_DevicePreferencesTypes.Descriptor instead.
func (DevicePreferences_DevicePreferencesTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16, 0}
}

type DeviceToken_DeviceTokenTypes int32

const (
	DeviceToken_FIREBASE DeviceToken_DeviceTokenTypes = 0
)

// Enum value maps for DeviceToken_DeviceTokenTypes.
var (
	DeviceToken_DeviceTokenTypes_name = map[int32]string{
		0: "FIREBASE",
	}
	DeviceToken_DeviceTokenTypes_value = map[string]int32{
		"FIREBASE": 0,
	}
)

func (x DeviceToken_DeviceTokenTypes) Enum() *DeviceToken_DeviceTokenTypes {
	p := new(DeviceToken_DeviceTokenTypes)
	*p = x
	return p
}

func (x DeviceToken_DeviceTokenTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceToken_DeviceTokenTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[11].Descriptor()
}

func (DeviceToken_DeviceTokenTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[11]
}

func (x DeviceToken_DeviceTokenTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceToken_DeviceTokenTypes.Descriptor instead.
func (DeviceToken_DeviceTokenTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17, 0}
}

type Account_AccountStatuses int32

const (
	Account_ACTIVE   Account_AccountStatuses = 0
	Account_PENDING  Account_AccountStatuses = 1
	Account_INACTIVE Account_AccountStatuses = 2
)

// Enum value maps for Account_AccountStatuses.
var (
	Account_AccountStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "PENDING",
		2: "INACTIVE",
	}
	Account_AccountStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"PENDING":  1,
		"INACTIVE": 2,
	}
)

func (x Account_AccountStatuses) Enum() *Account_AccountStatuses {
	p := new(Account_AccountStatuses)
	*p = x
	return p
}

func (x Account_AccountStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_AccountStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[12].Descriptor()
}

func (Account_AccountStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[12]
}

func (x Account_AccountStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Account_AccountStatuses.Descriptor instead.
func (Account_AccountStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18, 0}
}

type Product_ProductTypes int32

const (
	Product_FIXED_DEPOSIT   Product_ProductTypes = 0
	Product_CURRENT_ACCOUNT Product_ProductTypes = 1
)

// Enum value maps for Product_ProductTypes.
var (
	Product_ProductTypes_name = map[int32]string{
		0: "FIXED_DEPOSIT",
		1: "CURRENT_ACCOUNT",
	}
	Product_ProductTypes_value = map[string]int32{
		"FIXED_DEPOSIT":   0,
		"CURRENT_ACCOUNT": 1,
	}
)

func (x Product_ProductTypes) Enum() *Product_ProductTypes {
	p := new(Product_ProductTypes)
	*p = x
	return p
}

func (x Product_ProductTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Product_ProductTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[13].Descriptor()
}

func (Product_ProductTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[13]
}

func (x Product_ProductTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Product_ProductTypes.Descriptor instead.
func (Product_ProductTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23, 0}
}

type Product_ProductStatuses int32

const (
	Product_ACTIVE   Product_ProductStatuses = 0
	Product_INACTIVE Product_ProductStatuses = 1
)

// Enum value maps for Product_ProductStatuses.
var (
	Product_ProductStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Product_ProductStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Product_ProductStatuses) Enum() *Product_ProductStatuses {
	p := new(Product_ProductStatuses)
	*p = x
	return p
}

func (x Product_ProductStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Product_ProductStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[14].Descriptor()
}

func (Product_ProductStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[14]
}

func (x Product_ProductStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Product_ProductStatuses.Descriptor instead.
func (Product_ProductStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23, 1}
}

type CDD_CDDStatuses int32

const (
	CDD_PENDING       CDD_CDDStatuses = 0
	CDD_MANUAL_REVIEW CDD_CDDStatuses = 1
	CDD_APPROVED      CDD_CDDStatuses = 2
	CDD_DECLINED      CDD_CDDStatuses = 3
)

// Enum value maps for CDD_CDDStatuses.
var (
	CDD_CDDStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	CDD_CDDStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x CDD_CDDStatuses) Enum() *CDD_CDDStatuses {
	p := new(CDD_CDDStatuses)
	*p = x
	return p
}

func (x CDD_CDDStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDD_CDDStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[15].Descriptor()
}

func (CDD_CDDStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[15]
}

func (x CDD_CDDStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CDD_CDDStatuses.Descriptor instead.
func (CDD_CDDStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25, 0}
}

type AML_AMLStatuses int32

const (
	AML_PENDING       AML_AMLStatuses = 0
	AML_MANUAL_REVIEW AML_AMLStatuses = 1
	AML_APPROVED      AML_AMLStatuses = 2
	AML_DECLINED      AML_AMLStatuses = 3
)

// Enum value maps for AML_AMLStatuses.
var (
	AML_AMLStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	AML_AMLStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x AML_AMLStatuses) Enum() *AML_AMLStatuses {
	p := new(AML_AMLStatuses)
	*p = x
	return p
}

func (x AML_AMLStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AML_AMLStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[16].Descriptor()
}

func (AML_AMLStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[16]
}

func (x AML_AMLStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AML_AMLStatuses.Descriptor instead.
func (AML_AMLStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26, 0}
}

type KYC_KYCStatuses int32

const (
	KYC_PENDING       KYC_KYCStatuses = 0
	KYC_MANUAL_REVIEW KYC_KYCStatuses = 1
	KYC_APPROVED      KYC_KYCStatuses = 2
	KYC_DECLINED      KYC_KYCStatuses = 3
)

// Enum value maps for KYC_KYCStatuses.
var (
	KYC_KYCStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	KYC_KYCStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x KYC_KYCStatuses) Enum() *KYC_KYCStatuses {
	p := new(KYC_KYCStatuses)
	*p = x
	return p
}

func (x KYC_KYCStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KYC_KYCStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[17].Descriptor()
}

func (KYC_KYCStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[17]
}

func (x KYC_KYCStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KYC_KYCStatuses.Descriptor instead.
func (KYC_KYCStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27, 0}
}

type Report_ReportTypes int32

const (
	Report_FACIAL_VIDEO Report_ReportTypes = 0
	Report_DOCUMENT     Report_ReportTypes = 1
)

// Enum value maps for Report_ReportTypes.
var (
	Report_ReportTypes_name = map[int32]string{
		0: "FACIAL_VIDEO",
		1: "DOCUMENT",
	}
	Report_ReportTypes_value = map[string]int32{
		"FACIAL_VIDEO": 0,
		"DOCUMENT":     1,
	}
)

func (x Report_ReportTypes) Enum() *Report_ReportTypes {
	p := new(Report_ReportTypes)
	*p = x
	return p
}

func (x Report_ReportTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_ReportTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[18].Descriptor()
}

func (Report_ReportTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[18]
}

func (x Report_ReportTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_ReportTypes.Descriptor instead.
func (Report_ReportTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28, 0}
}

type Report_ReportStatuses int32

const (
	Report_PENDING       Report_ReportStatuses = 0
	Report_MANUAL_REVIEW Report_ReportStatuses = 1
	Report_APPROVED      Report_ReportStatuses = 2
	Report_DECLINED      Report_ReportStatuses = 3
)

// Enum value maps for Report_ReportStatuses.
var (
	Report_ReportStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	Report_ReportStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x Report_ReportStatuses) Enum() *Report_ReportStatuses {
	p := new(Report_ReportStatuses)
	*p = x
	return p
}

func (x Report_ReportStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_ReportStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[19].Descriptor()
}

func (Report_ReportStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[19]
}

func (x Report_ReportStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_ReportStatuses.Descriptor instead.
func (Report_ReportStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28, 1}
}

type POA_POAStatuses int32

const (
	POA_PENDING       POA_POAStatuses = 0
	POA_MANUAL_REVIEW POA_POAStatuses = 1
	POA_APPROVED      POA_POAStatuses = 2
	POA_DECLINED      POA_POAStatuses = 3
)

// Enum value maps for POA_POAStatuses.
var (
	POA_POAStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	POA_POAStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x POA_POAStatuses) Enum() *POA_POAStatuses {
	p := new(POA_POAStatuses)
	*p = x
	return p
}

func (x POA_POAStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (POA_POAStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[20].Descriptor()
}

func (POA_POAStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[20]
}

func (x POA_POAStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use POA_POAStatuses.Descriptor instead.
func (POA_POAStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{30, 0}
}

type POAAction_POAActionTypes int32

const (
	POAAction_CHANGE_STATUS POAAction_POAActionTypes = 0
)

// Enum value maps for POAAction_POAActionTypes.
var (
	POAAction_POAActionTypes_name = map[int32]string{
		0: "CHANGE_STATUS",
	}
	POAAction_POAActionTypes_value = map[string]int32{
		"CHANGE_STATUS": 0,
	}
)

func (x POAAction_POAActionTypes) Enum() *POAAction_POAActionTypes {
	p := new(POAAction_POAActionTypes)
	*p = x
	return p
}

func (x POAAction_POAActionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (POAAction_POAActionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[21].Descriptor()
}

func (POAAction_POAActionTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[21]
}

func (x POAAction_POAActionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use POAAction_POAActionTypes.Descriptor instead.
func (POAAction_POAActionTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31, 0}
}

type POAAction_POAStatuses int32

const (
	POAAction_PENDING       POAAction_POAStatuses = 0
	POAAction_MANUAL_REVIEW POAAction_POAStatuses = 1
	POAAction_APPROVED      POAAction_POAStatuses = 2
	POAAction_DECLINED      POAAction_POAStatuses = 3
)

// Enum value maps for POAAction_POAStatuses.
var (
	POAAction_POAStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	POAAction_POAStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x POAAction_POAStatuses) Enum() *POAAction_POAStatuses {
	p := new(POAAction_POAStatuses)
	*p = x
	return p
}

func (x POAAction_POAStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (POAAction_POAStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[22].Descriptor()
}

func (POAAction_POAStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[22]
}

func (x POAAction_POAStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use POAAction_POAStatuses.Descriptor instead.
func (POAAction_POAStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31, 1}
}

type AMLAction_AMLActionTypes int32

const (
	AMLAction_CHANGE_STATUS AMLAction_AMLActionTypes = 0
)

// Enum value maps for AMLAction_AMLActionTypes.
var (
	AMLAction_AMLActionTypes_name = map[int32]string{
		0: "CHANGE_STATUS",
	}
	AMLAction_AMLActionTypes_value = map[string]int32{
		"CHANGE_STATUS": 0,
	}
)

func (x AMLAction_AMLActionTypes) Enum() *AMLAction_AMLActionTypes {
	p := new(AMLAction_AMLActionTypes)
	*p = x
	return p
}

func (x AMLAction_AMLActionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AMLAction_AMLActionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[23].Descriptor()
}

func (AMLAction_AMLActionTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[23]
}

func (x AMLAction_AMLActionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AMLAction_AMLActionTypes.Descriptor instead.
func (AMLAction_AMLActionTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32, 0}
}

type AMLAction_AMLStatuses int32

const (
	AMLAction_PENDING       AMLAction_AMLStatuses = 0
	AMLAction_MANUAL_REVIEW AMLAction_AMLStatuses = 1
	AMLAction_APPROVED      AMLAction_AMLStatuses = 2
	AMLAction_DECLINED      AMLAction_AMLStatuses = 3
)

// Enum value maps for AMLAction_AMLStatuses.
var (
	AMLAction_AMLStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	AMLAction_AMLStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x AMLAction_AMLStatuses) Enum() *AMLAction_AMLStatuses {
	p := new(AMLAction_AMLStatuses)
	*p = x
	return p
}

func (x AMLAction_AMLStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AMLAction_AMLStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[24].Descriptor()
}

func (AMLAction_AMLStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[24]
}

func (x AMLAction_AMLStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AMLAction_AMLStatuses.Descriptor instead.
func (AMLAction_AMLStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32, 1}
}

type KYCAction_KYCActionTypes int32

const (
	KYCAction_CHANGE_STATUS KYCAction_KYCActionTypes = 0
)

// Enum value maps for KYCAction_KYCActionTypes.
var (
	KYCAction_KYCActionTypes_name = map[int32]string{
		0: "CHANGE_STATUS",
	}
	KYCAction_KYCActionTypes_value = map[string]int32{
		"CHANGE_STATUS": 0,
	}
)

func (x KYCAction_KYCActionTypes) Enum() *KYCAction_KYCActionTypes {
	p := new(KYCAction_KYCActionTypes)
	*p = x
	return p
}

func (x KYCAction_KYCActionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KYCAction_KYCActionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[25].Descriptor()
}

func (KYCAction_KYCActionTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[25]
}

func (x KYCAction_KYCActionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KYCAction_KYCActionTypes.Descriptor instead.
func (KYCAction_KYCActionTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33, 0}
}

type KYCAction_KYCStatuses int32

const (
	KYCAction_PENDING       KYCAction_KYCStatuses = 0
	KYCAction_MANUAL_REVIEW KYCAction_KYCStatuses = 1
	KYCAction_APPROVED      KYCAction_KYCStatuses = 2
	KYCAction_DECLINED      KYCAction_KYCStatuses = 3
)

// Enum value maps for KYCAction_KYCStatuses.
var (
	KYCAction_KYCStatuses_name = map[int32]string{
		0: "PENDING",
		1: "MANUAL_REVIEW",
		2: "APPROVED",
		3: "DECLINED",
	}
	KYCAction_KYCStatuses_value = map[string]int32{
		"PENDING":       0,
		"MANUAL_REVIEW": 1,
		"APPROVED":      2,
		"DECLINED":      3,
	}
)

func (x KYCAction_KYCStatuses) Enum() *KYCAction_KYCStatuses {
	p := new(KYCAction_KYCStatuses)
	*p = x
	return p
}

func (x KYCAction_KYCStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KYCAction_KYCStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[26].Descriptor()
}

func (KYCAction_KYCStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[26]
}

func (x KYCAction_KYCStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KYCAction_KYCStatuses.Descriptor instead.
func (KYCAction_KYCStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33, 1}
}

type Transaction_TransactionStatuses int32

const (
	Transaction_PENDING  Transaction_TransactionStatuses = 0
	Transaction_APPROVED Transaction_TransactionStatuses = 1
	Transaction_REJECTED Transaction_TransactionStatuses = 2
)

// Enum value maps for Transaction_TransactionStatuses.
var (
	Transaction_TransactionStatuses_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
	}
	Transaction_TransactionStatuses_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
	}
)

func (x Transaction_TransactionStatuses) Enum() *Transaction_TransactionStatuses {
	p := new(Transaction_TransactionStatuses)
	*p = x
	return p
}

func (x Transaction_TransactionStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_TransactionStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[27].Descriptor()
}

func (Transaction_TransactionStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[27]
}

func (x Transaction_TransactionStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_TransactionStatuses.Descriptor instead.
func (Transaction_TransactionStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{34, 0}
}

type LinkedTransaction_LinkedTransactionTypes int32

const (
	LinkedTransaction_DEPOSIT    LinkedTransaction_LinkedTransactionTypes = 0
	LinkedTransaction_WITHDRAWAL LinkedTransaction_LinkedTransactionTypes = 1
	LinkedTransaction_APPLY_FEE  LinkedTransaction_LinkedTransactionTypes = 2
)

// Enum value maps for LinkedTransaction_LinkedTransactionTypes.
var (
	LinkedTransaction_LinkedTransactionTypes_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAWAL",
		2: "APPLY_FEE",
	}
	LinkedTransaction_LinkedTransactionTypes_value = map[string]int32{
		"DEPOSIT":    0,
		"WITHDRAWAL": 1,
		"APPLY_FEE":  2,
	}
)

func (x LinkedTransaction_LinkedTransactionTypes) Enum() *LinkedTransaction_LinkedTransactionTypes {
	p := new(LinkedTransaction_LinkedTransactionTypes)
	*p = x
	return p
}

func (x LinkedTransaction_LinkedTransactionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedTransaction_LinkedTransactionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[28].Descriptor()
}

func (LinkedTransaction_LinkedTransactionTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[28]
}

func (x LinkedTransaction_LinkedTransactionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedTransaction_LinkedTransactionTypes.Descriptor instead.
func (LinkedTransaction_LinkedTransactionTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38, 0}
}

type LinkedTransaction_LinkedTransactionStatuses int32

const (
	LinkedTransaction_PENDING  LinkedTransaction_LinkedTransactionStatuses = 0
	LinkedTransaction_APPROVED LinkedTransaction_LinkedTransactionStatuses = 1
	LinkedTransaction_REJECTED LinkedTransaction_LinkedTransactionStatuses = 2
)

// Enum value maps for LinkedTransaction_LinkedTransactionStatuses.
var (
	LinkedTransaction_LinkedTransactionStatuses_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
	}
	LinkedTransaction_LinkedTransactionStatuses_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
	}
)

func (x LinkedTransaction_LinkedTransactionStatuses) Enum() *LinkedTransaction_LinkedTransactionStatuses {
	p := new(LinkedTransaction_LinkedTransactionStatuses)
	*p = x
	return p
}

func (x LinkedTransaction_LinkedTransactionStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedTransaction_LinkedTransactionStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[29].Descriptor()
}

func (LinkedTransaction_LinkedTransactionStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[29]
}

func (x LinkedTransaction_LinkedTransactionStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedTransaction_LinkedTransactionStatuses.Descriptor instead.
func (LinkedTransaction_LinkedTransactionStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38, 1}
}

type TransactionType_TransactionTypeStatuses int32

const (
	TransactionType_ACTIVE   TransactionType_TransactionTypeStatuses = 0
	TransactionType_INACTIVE TransactionType_TransactionTypeStatuses = 1
)

// Enum value maps for TransactionType_TransactionTypeStatuses.
var (
	TransactionType_TransactionTypeStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	TransactionType_TransactionTypeStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x TransactionType_TransactionTypeStatuses) Enum() *TransactionType_TransactionTypeStatuses {
	p := new(TransactionType_TransactionTypeStatuses)
	*p = x
	return p
}

func (x TransactionType_TransactionTypeStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType_TransactionTypeStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[30].Descriptor()
}

func (TransactionType_TransactionTypeStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[30]
}

func (x TransactionType_TransactionTypeStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType_TransactionTypeStatuses.Descriptor instead.
func (TransactionType_TransactionTypeStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{43, 0}
}

type Fee_FeeTypes int32

const (
	Fee_FIXED    Fee_FeeTypes = 0
	Fee_VARIABLE Fee_FeeTypes = 1
)

// Enum value maps for Fee_FeeTypes.
var (
	Fee_FeeTypes_name = map[int32]string{
		0: "FIXED",
		1: "VARIABLE",
	}
	Fee_FeeTypes_value = map[string]int32{
		"FIXED":    0,
		"VARIABLE": 1,
	}
)

func (x Fee_FeeTypes) Enum() *Fee_FeeTypes {
	p := new(Fee_FeeTypes)
	*p = x
	return p
}

func (x Fee_FeeTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fee_FeeTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[31].Descriptor()
}

func (Fee_FeeTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[31]
}

func (x Fee_FeeTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fee_FeeTypes.Descriptor instead.
func (Fee_FeeTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44, 0}
}

type Fee_FeeStatuses int32

const (
	Fee_ACTIVE   Fee_FeeStatuses = 0
	Fee_INACTIVE Fee_FeeStatuses = 1
)

// Enum value maps for Fee_FeeStatuses.
var (
	Fee_FeeStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Fee_FeeStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Fee_FeeStatuses) Enum() *Fee_FeeStatuses {
	p := new(Fee_FeeStatuses)
	*p = x
	return p
}

func (x Fee_FeeStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fee_FeeStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[32].Descriptor()
}

func (Fee_FeeStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[32]
}

func (x Fee_FeeStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fee_FeeStatuses.Descriptor instead.
func (Fee_FeeStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44, 1}
}

type ScheduledTransaction_ScheduledTransactionRepeatType int32

const (
	ScheduledTransaction_ONE_TIME ScheduledTransaction_ScheduledTransactionRepeatType = 0
	ScheduledTransaction_WEEKLY   ScheduledTransaction_ScheduledTransactionRepeatType = 1
	ScheduledTransaction_MONTHLY  ScheduledTransaction_ScheduledTransactionRepeatType = 2
	ScheduledTransaction_ANNUALLY ScheduledTransaction_ScheduledTransactionRepeatType = 3
)

// Enum value maps for ScheduledTransaction_ScheduledTransactionRepeatType.
var (
	ScheduledTransaction_ScheduledTransactionRepeatType_name = map[int32]string{
		0: "ONE_TIME",
		1: "WEEKLY",
		2: "MONTHLY",
		3: "ANNUALLY",
	}
	ScheduledTransaction_ScheduledTransactionRepeatType_value = map[string]int32{
		"ONE_TIME": 0,
		"WEEKLY":   1,
		"MONTHLY":  2,
		"ANNUALLY": 3,
	}
)

func (x ScheduledTransaction_ScheduledTransactionRepeatType) Enum() *ScheduledTransaction_ScheduledTransactionRepeatType {
	p := new(ScheduledTransaction_ScheduledTransactionRepeatType)
	*p = x
	return p
}

func (x ScheduledTransaction_ScheduledTransactionRepeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduledTransaction_ScheduledTransactionRepeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[33].Descriptor()
}

func (ScheduledTransaction_ScheduledTransactionRepeatType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[33]
}

func (x ScheduledTransaction_ScheduledTransactionRepeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduledTransaction_ScheduledTransactionRepeatType.Descriptor instead.
func (ScheduledTransaction_ScheduledTransactionRepeatType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49, 0}
}

type ScheduledTransaction_ScheduledTransactionStatuses int32

const (
	ScheduledTransaction_ACTIVE   ScheduledTransaction_ScheduledTransactionStatuses = 0
	ScheduledTransaction_INACTIVE ScheduledTransaction_ScheduledTransactionStatuses = 1
)

// Enum value maps for ScheduledTransaction_ScheduledTransactionStatuses.
var (
	ScheduledTransaction_ScheduledTransactionStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	ScheduledTransaction_ScheduledTransactionStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x ScheduledTransaction_ScheduledTransactionStatuses) Enum() *ScheduledTransaction_ScheduledTransactionStatuses {
	p := new(ScheduledTransaction_ScheduledTransactionStatuses)
	*p = x
	return p
}

func (x ScheduledTransaction_ScheduledTransactionStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduledTransaction_ScheduledTransactionStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[34].Descriptor()
}

func (ScheduledTransaction_ScheduledTransactionStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[34]
}

func (x ScheduledTransaction_ScheduledTransactionStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduledTransaction_ScheduledTransactionStatuses.Descriptor instead.
func (ScheduledTransaction_ScheduledTransactionStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49, 1}
}

type Beneficiary_BeneficiaryStatuses int32

const (
	Beneficiary_ACTIVE   Beneficiary_BeneficiaryStatuses = 0
	Beneficiary_INACTIVE Beneficiary_BeneficiaryStatuses = 1
)

// Enum value maps for Beneficiary_BeneficiaryStatuses.
var (
	Beneficiary_BeneficiaryStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Beneficiary_BeneficiaryStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Beneficiary_BeneficiaryStatuses) Enum() *Beneficiary_BeneficiaryStatuses {
	p := new(Beneficiary_BeneficiaryStatuses)
	*p = x
	return p
}

func (x Beneficiary_BeneficiaryStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Beneficiary_BeneficiaryStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[35].Descriptor()
}

func (Beneficiary_BeneficiaryStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[35]
}

func (x Beneficiary_BeneficiaryStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Beneficiary_BeneficiaryStatuses.Descriptor instead.
func (Beneficiary_BeneficiaryStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50, 0}
}

type BeneficiaryAccount_BeneficiaryAccountStatuses int32

const (
	BeneficiaryAccount_ACTIVE   BeneficiaryAccount_BeneficiaryAccountStatuses = 0
	BeneficiaryAccount_INACTIVE BeneficiaryAccount_BeneficiaryAccountStatuses = 1
)

// Enum value maps for BeneficiaryAccount_BeneficiaryAccountStatuses.
var (
	BeneficiaryAccount_BeneficiaryAccountStatuses_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	BeneficiaryAccount_BeneficiaryAccountStatuses_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x BeneficiaryAccount_BeneficiaryAccountStatuses) Enum() *BeneficiaryAccount_BeneficiaryAccountStatuses {
	p := new(BeneficiaryAccount_BeneficiaryAccountStatuses)
	*p = x
	return p
}

func (x BeneficiaryAccount_BeneficiaryAccountStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeneficiaryAccount_BeneficiaryAccountStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[36].Descriptor()
}

func (BeneficiaryAccount_BeneficiaryAccountStatuses) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[36]
}

func (x BeneficiaryAccount_BeneficiaryAccountStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BeneficiaryAccount_BeneficiaryAccountStatuses.Descriptor instead.
func (BeneficiaryAccount_BeneficiaryAccountStatuses) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{51, 0}
}

type Content_ContentType int32

const (
	Content_GENERAL_TC       Content_ContentType = 0
	Content_GBP_ACCOUNT_TC   Content_ContentType = 1
	Content_NGN_ACCOUNT_TC   Content_ContentType = 2
	Content_VAULT_ACCOUNT_TC Content_ContentType = 3
	Content_PRIVACY_NOTICE   Content_ContentType = 4
	Content_FEES_LIMITS      Content_ContentType = 5
)

// Enum value maps for Content_ContentType.
var (
	Content_ContentType_name = map[int32]string{
		0: "GENERAL_TC",
		1: "GBP_ACCOUNT_TC",
		2: "NGN_ACCOUNT_TC",
		3: "VAULT_ACCOUNT_TC",
		4: "PRIVACY_NOTICE",
		5: "FEES_LIMITS",
	}
	Content_ContentType_value = map[string]int32{
		"GENERAL_TC":       0,
		"GBP_ACCOUNT_TC":   1,
		"NGN_ACCOUNT_TC":   2,
		"VAULT_ACCOUNT_TC": 3,
		"PRIVACY_NOTICE":   4,
		"FEES_LIMITS":      5,
	}
)

func (x Content_ContentType) Enum() *Content_ContentType {
	p := new(Content_ContentType)
	*p = x
	return p
}

func (x Content_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Content_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[37].Descriptor()
}

func (Content_ContentType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[37]
}

func (x Content_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Content_ContentType.Descriptor instead.
func (Content_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{55, 0}
}

type JWTClaims_ClientType int32

const (
	JWTClaims_APP       JWTClaims_ClientType = 0
	JWTClaims_DASHBOARD JWTClaims_ClientType = 1
)

// Enum value maps for JWTClaims_ClientType.
var (
	JWTClaims_ClientType_name = map[int32]string{
		0: "APP",
		1: "DASHBOARD",
	}
	JWTClaims_ClientType_value = map[string]int32{
		"APP":       0,
		"DASHBOARD": 1,
	}
)

func (x JWTClaims_ClientType) Enum() *JWTClaims_ClientType {
	p := new(JWTClaims_ClientType)
	*p = x
	return p
}

func (x JWTClaims_ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JWTClaims_ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[38].Descriptor()
}

func (JWTClaims_ClientType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[38]
}

func (x JWTClaims_ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JWTClaims_ClientType.Descriptor instead.
func (JWTClaims_ClientType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{61, 0}
}

type StaffAuditLog_StaffAuditLogTypes int32

const (
	StaffAuditLog_FX_RATE                 StaffAuditLog_StaffAuditLogTypes = 0
	StaffAuditLog_FEES                    StaffAuditLog_StaffAuditLogTypes = 1
	StaffAuditLog_CUSTOMER_DETAILS_UPDATE StaffAuditLog_StaffAuditLogTypes = 2
)

// Enum value maps for StaffAuditLog_StaffAuditLogTypes.
var (
	StaffAuditLog_StaffAuditLogTypes_name = map[int32]string{
		0: "FX_RATE",
		1: "FEES",
		2: "CUSTOMER_DETAILS_UPDATE",
	}
	StaffAuditLog_StaffAuditLogTypes_value = map[string]int32{
		"FX_RATE":                 0,
		"FEES":                    1,
		"CUSTOMER_DETAILS_UPDATE": 2,
	}
)

func (x StaffAuditLog_StaffAuditLogTypes) Enum() *StaffAuditLog_StaffAuditLogTypes {
	p := new(StaffAuditLog_StaffAuditLogTypes)
	*p = x
	return p
}

func (x StaffAuditLog_StaffAuditLogTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaffAuditLog_StaffAuditLogTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[39].Descriptor()
}

func (StaffAuditLog_StaffAuditLogTypes) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[39]
}

func (x StaffAuditLog_StaffAuditLogTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaffAuditLog_StaffAuditLogTypes.Descriptor instead.
func (StaffAuditLog_StaffAuditLogTypes) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{64, 0}
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// String format DD-MM-YYYY
	Dob       string                    `protobuf:"bytes,4,opt,name=dob,proto3" json:"dob,omitempty"`
	Bvn       string                    `protobuf:"bytes,5,opt,name=bvn,proto3" json:"bvn,omitempty"`
	Addresses []*Address                `protobuf:"bytes,6,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Phones    []*Phone                  `protobuf:"bytes,7,rep,name=phones,proto3" json:"phones,omitempty"`
	Email     *Email                    `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Status    Customer_CustomerStatuses `protobuf:"varint,9,opt,name=status,proto3,enum=types.Customer_CustomerStatuses" json:"status,omitempty"`
	StatusTs  *timestamppb.Timestamp    `protobuf:"bytes,10,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts        *timestamppb.Timestamp    `protobuf:"bytes,11,opt,name=ts,proto3" json:"ts,omitempty"`
	Title     Customer_CustomerTitle    `protobuf:"varint,12,opt,name=title,proto3,enum=types.Customer_CustomerTitle" json:"title,omitempty"`
	HasPin    bool                      `protobuf:"varint,13,opt,name=has_pin,json=hasPin,proto3" json:"has_pin,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Customer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Customer) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Customer) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Customer) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *Customer) GetBvn() string {
	if x != nil {
		return x.Bvn
	}
	return ""
}

func (x *Customer) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Customer) GetPhones() []*Phone {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *Customer) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Customer) GetStatus() Customer_CustomerStatuses {
	if x != nil {
		return x.Status
	}
	return Customer_SIGNEDUP
}

func (x *Customer) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Customer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Customer) GetTitle() Customer_CustomerTitle {
	if x != nil {
		return x.Title
	}
	return Customer_MR
}

func (x *Customer) GetHasPin() bool {
	if x != nil {
		return x.HasPin
	}
	return false
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Verified bool   `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *Email) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Email) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary  bool   `protobuf:"varint,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Number   string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Verified bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *Phone) Reset() {
	*x = Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phone) ProtoMessage() {}

func (x *Phone) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phone.ProtoReflect.Descriptor instead.
func (*Phone) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Phone) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *Phone) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Phone) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary     bool         `protobuf:"varint,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Country     *Country     `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	State       string       `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	City        string       `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street      string       `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	Postcode    string       `protobuf:"bytes,6,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Coordinates *Coordinates `protobuf:"bytes,7,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *Address) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *Address) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *Address) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *Coordinates) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Coordinates) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer     *Customer                 `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Organization *Organization             `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	Credentials  *IdentityCredentials      `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Status       Identity_IdentityStatuses `protobuf:"varint,5,opt,name=status,proto3,enum=types.Identity_IdentityStatuses" json:"status,omitempty"`
	StatusTs     *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts           *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Identity) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Identity) GetCredentials() *IdentityCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Identity) GetStatus() Identity_IdentityStatuses {
	if x != nil {
		return x.Status
	}
	return Identity_ACTIVE
}

func (x *Identity) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Identity) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type IdentityCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     IdentityCredentials_IdentityCredentialsTypes    `protobuf:"varint,1,opt,name=type,proto3,enum=types.IdentityCredentials_IdentityCredentialsTypes" json:"type,omitempty"`
	Password string                                          `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Status   IdentityCredentials_IdentityCredentialsStatuses `protobuf:"varint,3,opt,name=status,proto3,enum=types.IdentityCredentials_IdentityCredentialsStatuses" json:"status,omitempty"`
	StatusTs *timestamppb.Timestamp                          `protobuf:"bytes,4,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts       *timestamppb.Timestamp                          `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	UpdateTs *timestamppb.Timestamp                          `protobuf:"bytes,6,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`
}

func (x *IdentityCredentials) Reset() {
	*x = IdentityCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityCredentials) ProtoMessage() {}

func (x *IdentityCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityCredentials.ProtoReflect.Descriptor instead.
func (*IdentityCredentials) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *IdentityCredentials) GetType() IdentityCredentials_IdentityCredentialsTypes {
	if x != nil {
		return x.Type
	}
	return IdentityCredentials_LOGIN
}

func (x *IdentityCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IdentityCredentials) GetStatus() IdentityCredentials_IdentityCredentialsStatuses {
	if x != nil {
		return x.Status
	}
	return IdentityCredentials_ACTIVE
}

func (x *IdentityCredentials) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *IdentityCredentials) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *IdentityCredentials) GetUpdateTs() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTs
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status   Organization_OrganizationStatuses `protobuf:"varint,3,opt,name=status,proto3,enum=types.Organization_OrganizationStatuses" json:"status,omitempty"`
	StatusTs *timestamppb.Timestamp            `protobuf:"bytes,4,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts       *timestamppb.Timestamp            `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetStatus() Organization_OrganizationStatuses {
	if x != nil {
		return x.Status
	}
	return Organization_ACTIVE
}

func (x *Organization) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Organization) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Staff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LastName string `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	// String format DD-MM-YYYY
	Dob       string                 `protobuf:"bytes,4,opt,name=dob,proto3" json:"dob,omitempty"`
	Addresses []*Address             `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Phones    []*Phone               `protobuf:"bytes,6,rep,name=phones,proto3" json:"phones,omitempty"`
	Email     string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Status    Staff_StaffStatuses    `protobuf:"varint,8,opt,name=status,proto3,enum=types.Staff_StaffStatuses" json:"status,omitempty"`
	StatusTs  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Staff) Reset() {
	*x = Staff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staff) ProtoMessage() {}

func (x *Staff) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staff.ProtoReflect.Descriptor instead.
func (*Staff) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *Staff) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Staff) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Staff) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Staff) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *Staff) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Staff) GetPhones() []*Phone {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *Staff) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Staff) GetStatus() Staff_StaffStatuses {
	if x != nil {
		return x.Status
	}
	return Staff_ACTIVE
}

func (x *Staff) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Staff) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Acceptance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content  *Content               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Customer *Customer              `protobuf:"bytes,3,opt,name=customer,proto3" json:"customer,omitempty"`
	Ts       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Acceptance) Reset() {
	*x = Acceptance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acceptance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceptance) ProtoMessage() {}

func (x *Acceptance) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceptance.ProtoReflect.Descriptor instead.
func (*Acceptance) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *Acceptance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Acceptance) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Acceptance) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Acceptance) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Questionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      Questionary_QuestionaryTypes    `protobuf:"varint,2,opt,name=type,proto3,enum=types.Questionary_QuestionaryTypes" json:"type,omitempty"`
	Questions []*QuestionaryQuestion          `protobuf:"bytes,3,rep,name=questions,proto3" json:"questions,omitempty"`
	Status    Questionary_QuestionaryStatuses `protobuf:"varint,4,opt,name=status,proto3,enum=types.Questionary_QuestionaryStatuses" json:"status,omitempty"`
	StatusTs  *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts        *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Questionary) Reset() {
	*x = Questionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionary) ProtoMessage() {}

func (x *Questionary) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionary.ProtoReflect.Descriptor instead.
func (*Questionary) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *Questionary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Questionary) GetType() Questionary_QuestionaryTypes {
	if x != nil {
		return x.Type
	}
	return Questionary_REASONS
}

func (x *Questionary) GetQuestions() []*QuestionaryQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *Questionary) GetStatus() Questionary_QuestionaryStatuses {
	if x != nil {
		return x.Status
	}
	return Questionary_ACTIVE
}

func (x *Questionary) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Questionary) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type QuestionaryQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value             string                         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	PredefinedAnswers []*QuestionaryPredefinedAnswer `protobuf:"bytes,3,rep,name=predefined_answers,json=predefinedAnswers,proto3" json:"predefined_answers,omitempty"`
	Required          bool                           `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	MultipleOptions   bool                           `protobuf:"varint,5,opt,name=multiple_options,json=multipleOptions,proto3" json:"multiple_options,omitempty"`
}

func (x *QuestionaryQuestion) Reset() {
	*x = QuestionaryQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionaryQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionaryQuestion) ProtoMessage() {}

func (x *QuestionaryQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionaryQuestion.ProtoReflect.Descriptor instead.
func (*QuestionaryQuestion) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *QuestionaryQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionaryQuestion) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QuestionaryQuestion) GetPredefinedAnswers() []*QuestionaryPredefinedAnswer {
	if x != nil {
		return x.PredefinedAnswers
	}
	return nil
}

func (x *QuestionaryQuestion) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *QuestionaryQuestion) GetMultipleOptions() bool {
	if x != nil {
		return x.MultipleOptions
	}
	return false
}

type QuestionaryPredefinedAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuestionaryPredefinedAnswer) Reset() {
	*x = QuestionaryPredefinedAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionaryPredefinedAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionaryPredefinedAnswer) ProtoMessage() {}

func (x *QuestionaryPredefinedAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionaryPredefinedAnswer.ProtoReflect.Descriptor instead.
func (*QuestionaryPredefinedAnswer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *QuestionaryPredefinedAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionaryPredefinedAnswer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type QuestionaryAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionaryId string                       `protobuf:"bytes,2,opt,name=questionary_id,json=questionaryId,proto3" json:"questionary_id,omitempty"`
	CustomerId    string                       `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Questions     []*QuestionaryAnswerQuestion `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
	Ts            *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *QuestionaryAnswer) Reset() {
	*x = QuestionaryAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionaryAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionaryAnswer) ProtoMessage() {}

func (x *QuestionaryAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionaryAnswer.ProtoReflect.Descriptor instead.
func (*QuestionaryAnswer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *QuestionaryAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionaryAnswer) GetQuestionaryId() string {
	if x != nil {
		return x.QuestionaryId
	}
	return ""
}

func (x *QuestionaryAnswer) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *QuestionaryAnswer) GetQuestions() []*QuestionaryAnswerQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *QuestionaryAnswer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type QuestionaryAnswerQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Answer            string   `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	PredefinedAnswers []string `protobuf:"bytes,3,rep,name=predefined_answers,json=predefinedAnswers,proto3" json:"predefined_answers,omitempty"`
}

func (x *QuestionaryAnswerQuestion) Reset() {
	*x = QuestionaryAnswerQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionaryAnswerQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionaryAnswerQuestion) ProtoMessage() {}

func (x *QuestionaryAnswerQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionaryAnswerQuestion.ProtoReflect.Descriptor instead.
func (*QuestionaryAnswerQuestion) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *QuestionaryAnswerQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionaryAnswerQuestion) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionaryAnswerQuestion) GetPredefinedAnswers() []string {
	if x != nil {
		return x.PredefinedAnswers
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer    *Customer              `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Identifier  string                 `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Os          string                 `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Brand       string                 `protobuf:"bytes,5,opt,name=brand,proto3" json:"brand,omitempty"`
	Tokens      []*DeviceToken         `protobuf:"bytes,6,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Preferences []*DevicePreferences   `protobuf:"bytes,7,rep,name=preferences,proto3" json:"preferences,omitempty"`
	Status      Device_DeviceStatuses  `protobuf:"varint,8,opt,name=status,proto3,enum=types.Device_DeviceStatuses" json:"status,omitempty"`
	StatusTs    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Device) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Device) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Device) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Device) GetTokens() []*DeviceToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Device) GetPreferences() []*DevicePreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *Device) GetStatus() Device_DeviceStatuses {
	if x != nil {
		return x.Status
	}
	return Device_ACTIVE
}

func (x *Device) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Device) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type DevicePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DevicePreferences_DevicePreferencesTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.DevicePreferences_DevicePreferencesTypes" json:"type,omitempty"`
	Value bool                                     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DevicePreferences) Reset() {
	*x = DevicePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePreferences) ProtoMessage() {}

func (x *DevicePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePreferences.ProtoReflect.Descriptor instead.
func (*DevicePreferences) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *DevicePreferences) GetType() DevicePreferences_DevicePreferencesTypes {
	if x != nil {
		return x.Type
	}
	return DevicePreferences_PUSH
}

func (x *DevicePreferences) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type DeviceToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DeviceToken_DeviceTokenTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.DeviceToken_DeviceTokenTypes" json:"type,omitempty"`
	Value string                       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceToken) Reset() {
	*x = DeviceToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceToken) ProtoMessage() {}

func (x *DeviceToken) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceToken.ProtoReflect.Descriptor instead.
func (*DeviceToken) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceToken) GetType() DeviceToken_DeviceTokenTypes {
	if x != nil {
		return x.Type
	}
	return DeviceToken_FIREBASE
}

func (x *DeviceToken) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer      *Customer `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Product       *Product  `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Name          string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Iban          string    `protobuf:"bytes,5,opt,name=iban,proto3" json:"iban,omitempty"`
	AccountNumber string    `protobuf:"bytes,6,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Code          string    `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	// String format DD-MM-YYYY
	MaturityDate string                  `protobuf:"bytes,8,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	Balances     *AccountBalances        `protobuf:"bytes,9,opt,name=balances,proto3" json:"balances,omitempty"`
	Mambu        *AccountMambu           `protobuf:"bytes,10,opt,name=mambu,proto3" json:"mambu,omitempty"`
	Fcmb         *AccountFCMB            `protobuf:"bytes,11,opt,name=fcmb,proto3" json:"fcmb,omitempty"`
	Vault        *AccountVault           `protobuf:"bytes,12,opt,name=vault,proto3" json:"vault,omitempty"`
	Status       Account_AccountStatuses `protobuf:"varint,13,opt,name=status,proto3,enum=types.Account_AccountStatuses" json:"status,omitempty"`
	StatusTs     *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts           *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Account) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *Account) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *Account) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Account) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

func (x *Account) GetBalances() *AccountBalances {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *Account) GetMambu() *AccountMambu {
	if x != nil {
		return x.Mambu
	}
	return nil
}

func (x *Account) GetFcmb() *AccountFCMB {
	if x != nil {
		return x.Fcmb
	}
	return nil
}

func (x *Account) GetVault() *AccountVault {
	if x != nil {
		return x.Vault
	}
	return nil
}

func (x *Account) GetStatus() Account_AccountStatuses {
	if x != nil {
		return x.Status
	}
	return Account_ACTIVE
}

func (x *Account) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Account) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type AccountVault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalAmount     float32 `protobuf:"fixed32,1,opt,name=principal_amount,json=principalAmount,proto3" json:"principal_amount,omitempty"`
	InterestAccumulated float32 `protobuf:"fixed32,2,opt,name=interest_accumulated,json=interestAccumulated,proto3" json:"interest_accumulated,omitempty"`
}

func (x *AccountVault) Reset() {
	*x = AccountVault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVault) ProtoMessage() {}

func (x *AccountVault) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVault.ProtoReflect.Descriptor instead.
func (*AccountVault) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *AccountVault) GetPrincipalAmount() float32 {
	if x != nil {
		return x.PrincipalAmount
	}
	return 0
}

func (x *AccountVault) GetInterestAccumulated() float32 {
	if x != nil {
		return x.InterestAccumulated
	}
	return 0
}

type AccountFCMB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NgnAccountNumber string `protobuf:"bytes,1,opt,name=ngn_account_number,json=ngnAccountNumber,proto3" json:"ngn_account_number,omitempty"`
	CifId            string `protobuf:"bytes,2,opt,name=cif_id,json=cifId,proto3" json:"cif_id,omitempty"`
}

func (x *AccountFCMB) Reset() {
	*x = AccountFCMB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountFCMB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFCMB) ProtoMessage() {}

func (x *AccountFCMB) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFCMB.ProtoReflect.Descriptor instead.
func (*AccountFCMB) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *AccountFCMB) GetNgnAccountNumber() string {
	if x != nil {
		return x.NgnAccountNumber
	}
	return ""
}

func (x *AccountFCMB) GetCifId() string {
	if x != nil {
		return x.CifId
	}
	return ""
}

type AccountMambu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodedKey string `protobuf:"bytes,1,opt,name=encoded_key,json=encodedKey,proto3" json:"encoded_key,omitempty"`
	BranchKey  string `protobuf:"bytes,2,opt,name=branch_key,json=branchKey,proto3" json:"branch_key,omitempty"`
}

func (x *AccountMambu) Reset() {
	*x = AccountMambu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMambu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMambu) ProtoMessage() {}

func (x *AccountMambu) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMambu.ProtoReflect.Descriptor instead.
func (*AccountMambu) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *AccountMambu) GetEncodedKey() string {
	if x != nil {
		return x.EncodedKey
	}
	return ""
}

func (x *AccountMambu) GetBranchKey() string {
	if x != nil {
		return x.BranchKey
	}
	return ""
}

type AccountBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBalance float32 `protobuf:"fixed32,1,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
}

func (x *AccountBalances) Reset() {
	*x = AccountBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalances) ProtoMessage() {}

func (x *AccountBalances) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalances.ProtoReflect.Descriptor instead.
func (*AccountBalances) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (x *AccountBalances) GetTotalBalance() float32 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  Product_ProductTypes    `protobuf:"varint,2,opt,name=type,proto3,enum=types.Product_ProductTypes" json:"type,omitempty"`
	Currency              *Currency               `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Name                  string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TermLength            int32                   `protobuf:"varint,5,opt,name=term_length,json=termLength,proto3" json:"term_length,omitempty"`
	TermUnit              string                  `protobuf:"bytes,6,opt,name=term_unit,json=termUnit,proto3" json:"term_unit,omitempty"`
	InterestRate          float32                 `protobuf:"fixed32,7,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	MinimumOpeningBalance float32                 `protobuf:"fixed32,8,opt,name=minimum_opening_balance,json=minimumOpeningBalance,proto3" json:"minimum_opening_balance,omitempty"`
	Mambu                 *ProductMambu           `protobuf:"bytes,9,opt,name=mambu,proto3" json:"mambu,omitempty"`
	Status                Product_ProductStatuses `protobuf:"varint,10,opt,name=status,proto3,enum=types.Product_ProductStatuses" json:"status,omitempty"`
	StatusTs              *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts                    *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetType() Product_ProductTypes {
	if x != nil {
		return x.Type
	}
	return Product_FIXED_DEPOSIT
}

func (x *Product) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetTermLength() int32 {
	if x != nil {
		return x.TermLength
	}
	return 0
}

func (x *Product) GetTermUnit() string {
	if x != nil {
		return x.TermUnit
	}
	return ""
}

func (x *Product) GetInterestRate() float32 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *Product) GetMinimumOpeningBalance() float32 {
	if x != nil {
		return x.MinimumOpeningBalance
	}
	return 0
}

func (x *Product) GetMambu() *ProductMambu {
	if x != nil {
		return x.Mambu
	}
	return nil
}

func (x *Product) GetStatus() Product_ProductStatuses {
	if x != nil {
		return x.Status
	}
	return Product_ACTIVE
}

func (x *Product) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Product) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type ProductMambu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodedKey string `protobuf:"bytes,1,opt,name=encoded_key,json=encodedKey,proto3" json:"encoded_key,omitempty"`
}

func (x *ProductMambu) Reset() {
	*x = ProductMambu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductMambu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductMambu) ProtoMessage() {}

func (x *ProductMambu) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductMambu.ProtoReflect.Descriptor instead.
func (*ProductMambu) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *ProductMambu) GetEncodedKey() string {
	if x != nil {
		return x.EncodedKey
	}
	return ""
}

type CDD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer *Customer              `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Amls     []*AML                 `protobuf:"bytes,3,rep,name=amls,proto3" json:"amls,omitempty"`
	Kycs     []*KYC                 `protobuf:"bytes,4,rep,name=kycs,proto3" json:"kycs,omitempty"`
	Poas     []*POA                 `protobuf:"bytes,5,rep,name=poas,proto3" json:"poas,omitempty"`
	Status   CDD_CDDStatuses        `protobuf:"varint,6,opt,name=status,proto3,enum=types.CDD_CDDStatuses" json:"status,omitempty"`
	StatusTs *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *CDD) Reset() {
	*x = CDD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDD) ProtoMessage() {}

func (x *CDD) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDD.ProtoReflect.Descriptor instead.
func (*CDD) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

func (x *CDD) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CDD) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CDD) GetAmls() []*AML {
	if x != nil {
		return x.Amls
	}
	return nil
}

func (x *CDD) GetKycs() []*KYC {
	if x != nil {
		return x.Kycs
	}
	return nil
}

func (x *CDD) GetPoas() []*POA {
	if x != nil {
		return x.Poas
	}
	return nil
}

func (x *CDD) GetStatus() CDD_CDDStatuses {
	if x != nil {
		return x.Status
	}
	return CDD_PENDING
}

func (x *CDD) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *CDD) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type AML struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Identifier   string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	File         string                 `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Result       string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	PublicUrl    string                 `protobuf:"bytes,5,opt,name=public_url,json=publicUrl,proto3" json:"public_url,omitempty"`
	Actions      []*AMLAction           `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	Status       AML_AMLStatuses        `protobuf:"varint,7,opt,name=status,proto3,enum=types.AML_AMLStatuses" json:"status,omitempty"`
	StatusTs     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *AML) Reset() {
	*x = AML{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AML) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AML) ProtoMessage() {}

func (x *AML) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AML.ProtoReflect.Descriptor instead.
func (*AML) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26}
}

func (x *AML) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *AML) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AML) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *AML) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *AML) GetPublicUrl() string {
	if x != nil {
		return x.PublicUrl
	}
	return ""
}

func (x *AML) GetActions() []*AMLAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AML) GetStatus() AML_AMLStatuses {
	if x != nil {
		return x.Status
	}
	return AML_PENDING
}

func (x *AML) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *AML) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type KYC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Identifier   string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	PublicUrl    string                 `protobuf:"bytes,3,opt,name=public_url,json=publicUrl,proto3" json:"public_url,omitempty"`
	Reports      []*Report              `protobuf:"bytes,4,rep,name=reports,proto3" json:"reports,omitempty"`
	Actions      []*KYCAction           `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
	Status       KYC_KYCStatuses        `protobuf:"varint,6,opt,name=status,proto3,enum=types.KYC_KYCStatuses" json:"status,omitempty"`
	StatusTs     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *KYC) Reset() {
	*x = KYC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KYC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KYC) ProtoMessage() {}

func (x *KYC) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KYC.ProtoReflect.Descriptor instead.
func (*KYC) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27}
}

func (x *KYC) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *KYC) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *KYC) GetPublicUrl() string {
	if x != nil {
		return x.PublicUrl
	}
	return ""
}

func (x *KYC) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *KYC) GetActions() []*KYCAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *KYC) GetStatus() KYC_KYCStatuses {
	if x != nil {
		return x.Status
	}
	return KYC_PENDING
}

func (x *KYC) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *KYC) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Type       Report_ReportTypes     `protobuf:"varint,2,opt,name=type,proto3,enum=types.Report_ReportTypes" json:"type,omitempty"`
	File       string                 `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Result     string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	SubResult  string                 `protobuf:"bytes,5,opt,name=sub_result,json=subResult,proto3" json:"sub_result,omitempty"`
	PublicUrl  string                 `protobuf:"bytes,6,opt,name=public_url,json=publicUrl,proto3" json:"public_url,omitempty"`
	Review     *Review                `protobuf:"bytes,7,opt,name=review,proto3" json:"review,omitempty"`
	Status     Report_ReportStatuses  `protobuf:"varint,8,opt,name=status,proto3,enum=types.Report_ReportStatuses" json:"status,omitempty"`
	StatusTs   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28}
}

func (x *Report) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Report) GetType() Report_ReportTypes {
	if x != nil {
		return x.Type
	}
	return Report_FACIAL_VIDEO
}

func (x *Report) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Report) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Report) GetSubResult() string {
	if x != nil {
		return x.SubResult
	}
	return ""
}

func (x *Report) GetPublicUrl() string {
	if x != nil {
		return x.PublicUrl
	}
	return ""
}

func (x *Report) GetReview() *Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Report) GetStatus() Report_ReportStatuses {
	if x != nil {
		return x.Status
	}
	return Report_PENDING
}

func (x *Report) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Report) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resubmit bool                   `protobuf:"varint,1,opt,name=resubmit,proto3" json:"resubmit,omitempty"`
	Message  string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Ts       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{29}
}

func (x *Review) GetResubmit() bool {
	if x != nil {
		return x.Resubmit
	}
	return false
}

func (x *Review) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Review) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type POA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization *Organization          `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Identifier   string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	File         string                 `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Result       string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Review       *Review                `protobuf:"bytes,5,opt,name=review,proto3" json:"review,omitempty"`
	Actions      []*POAAction           `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	Status       POA_POAStatuses        `protobuf:"varint,7,opt,name=status,proto3,enum=types.POA_POAStatuses" json:"status,omitempty"`
	StatusTs     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *POA) Reset() {
	*x = POA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POA) ProtoMessage() {}

func (x *POA) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POA.ProtoReflect.Descriptor instead.
func (*POA) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{30}
}

func (x *POA) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *POA) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *POA) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *POA) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *POA) GetReview() *Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *POA) GetActions() []*POAAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *POA) GetStatus() POA_POAStatuses {
	if x != nil {
		return x.Status
	}
	return POA_PENDING
}

func (x *POA) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *POA) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type POAAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         POAAction_POAActionTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.POAAction_POAActionTypes" json:"type,omitempty"`
	Reporter     *Staff                   `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	TargetStatus POAAction_POAStatuses    `protobuf:"varint,3,opt,name=target_status,json=targetStatus,proto3,enum=types.POAAction_POAStatuses" json:"target_status,omitempty"`
	Message      string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Ts           *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *POAAction) Reset() {
	*x = POAAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POAAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POAAction) ProtoMessage() {}

func (x *POAAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POAAction.ProtoReflect.Descriptor instead.
func (*POAAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31}
}

func (x *POAAction) GetType() POAAction_POAActionTypes {
	if x != nil {
		return x.Type
	}
	return POAAction_CHANGE_STATUS
}

func (x *POAAction) GetReporter() *Staff {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *POAAction) GetTargetStatus() POAAction_POAStatuses {
	if x != nil {
		return x.TargetStatus
	}
	return POAAction_PENDING
}

func (x *POAAction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *POAAction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type AMLAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         AMLAction_AMLActionTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.AMLAction_AMLActionTypes" json:"type,omitempty"`
	Reporter     *Staff                   `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	TargetStatus AMLAction_AMLStatuses    `protobuf:"varint,3,opt,name=target_status,json=targetStatus,proto3,enum=types.AMLAction_AMLStatuses" json:"target_status,omitempty"`
	Message      string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Ts           *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *AMLAction) Reset() {
	*x = AMLAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMLAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMLAction) ProtoMessage() {}

func (x *AMLAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMLAction.ProtoReflect.Descriptor instead.
func (*AMLAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32}
}

func (x *AMLAction) GetType() AMLAction_AMLActionTypes {
	if x != nil {
		return x.Type
	}
	return AMLAction_CHANGE_STATUS
}

func (x *AMLAction) GetReporter() *Staff {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *AMLAction) GetTargetStatus() AMLAction_AMLStatuses {
	if x != nil {
		return x.TargetStatus
	}
	return AMLAction_PENDING
}

func (x *AMLAction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AMLAction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type KYCAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         KYCAction_KYCActionTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.KYCAction_KYCActionTypes" json:"type,omitempty"`
	Reporter     *Staff                   `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	TargetStatus KYCAction_KYCStatuses    `protobuf:"varint,3,opt,name=target_status,json=targetStatus,proto3,enum=types.KYCAction_KYCStatuses" json:"target_status,omitempty"`
	Message      string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Ts           *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *KYCAction) Reset() {
	*x = KYCAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KYCAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KYCAction) ProtoMessage() {}

func (x *KYCAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KYCAction.ProtoReflect.Descriptor instead.
func (*KYCAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33}
}

func (x *KYCAction) GetType() KYCAction_KYCActionTypes {
	if x != nil {
		return x.Type
	}
	return KYCAction_CHANGE_STATUS
}

func (x *KYCAction) GetReporter() *Staff {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *KYCAction) GetTargetStatus() KYCAction_KYCStatuses {
	if x != nil {
		return x.TargetStatus
	}
	return KYCAction_PENDING
}

func (x *KYCAction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KYCAction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionType    *TransactionType                `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Reference          string                          `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	Fees               []*TransactionFee               `protobuf:"bytes,4,rep,name=fees,proto3" json:"fees,omitempty"`
	ExchangeRate       *ExchangeRate                   `protobuf:"bytes,5,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	Source             *TransactionSource              `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Target             *TransactionTarget              `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	IdempotencyKey     string                          `protobuf:"bytes,8,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	LinkedTransactions []*LinkedTransaction            `protobuf:"bytes,9,rep,name=linked_transactions,json=linkedTransactions,proto3" json:"linked_transactions,omitempty"`
	Status             Transaction_TransactionStatuses `protobuf:"varint,10,opt,name=status,proto3,enum=types.Transaction_TransactionStatuses" json:"status,omitempty"`
	StatusTs           *timestamppb.Timestamp          `protobuf:"bytes,11,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts                 *timestamppb.Timestamp          `protobuf:"bytes,12,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{34}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetTransactionType() *TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *Transaction) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Transaction) GetFees() []*TransactionFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Transaction) GetExchangeRate() *ExchangeRate {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *Transaction) GetSource() *TransactionSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Transaction) GetTarget() *TransactionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Transaction) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *Transaction) GetLinkedTransactions() []*LinkedTransaction {
	if x != nil {
		return x.LinkedTransactions
	}
	return nil
}

func (x *Transaction) GetStatus() Transaction_TransactionStatuses {
	if x != nil {
		return x.Status
	}
	return Transaction_PENDING
}

func (x *Transaction) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Transaction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type TransactionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer                *Customer           `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Beneficiary             *Beneficiary        `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	Account                 *Account            `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	BeneficiaryAccount      *BeneficiaryAccount `protobuf:"bytes,4,opt,name=beneficiary_account,json=beneficiaryAccount,proto3" json:"beneficiary_account,omitempty"`
	Amount                  float32             `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BalanceAfterTransaction float32             `protobuf:"fixed32,6,opt,name=balance_after_transaction,json=balanceAfterTransaction,proto3" json:"balance_after_transaction,omitempty"`
}

func (x *TransactionTarget) Reset() {
	*x = TransactionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTarget) ProtoMessage() {}

func (x *TransactionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTarget.ProtoReflect.Descriptor instead.
func (*TransactionTarget) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{35}
}

func (x *TransactionTarget) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *TransactionTarget) GetBeneficiary() *Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *TransactionTarget) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TransactionTarget) GetBeneficiaryAccount() *BeneficiaryAccount {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return nil
}

func (x *TransactionTarget) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionTarget) GetBalanceAfterTransaction() float32 {
	if x != nil {
		return x.BalanceAfterTransaction
	}
	return 0
}

type TransactionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer                *Customer `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Account                 *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Amount                  float32   `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	BalanceAfterTransaction float32   `protobuf:"fixed32,4,opt,name=balance_after_transaction,json=balanceAfterTransaction,proto3" json:"balance_after_transaction,omitempty"`
}

func (x *TransactionSource) Reset() {
	*x = TransactionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSource) ProtoMessage() {}

func (x *TransactionSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSource.ProtoReflect.Descriptor instead.
func (*TransactionSource) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{36}
}

func (x *TransactionSource) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *TransactionSource) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TransactionSource) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionSource) GetBalanceAfterTransaction() float32 {
	if x != nil {
		return x.BalanceAfterTransaction
	}
	return 0
}

type TransactionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransactionFee) Reset() {
	*x = TransactionFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFee) ProtoMessage() {}

func (x *TransactionFee) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFee.ProtoReflect.Descriptor instead.
func (*TransactionFee) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{37}
}

func (x *TransactionFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionFee) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type LinkedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     LinkedTransaction_LinkedTransactionTypes    `protobuf:"varint,2,opt,name=type,proto3,enum=types.LinkedTransaction_LinkedTransactionTypes" json:"type,omitempty"`
	Currency *Currency                                   `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount   float32                                     `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Source   *LinkedTransactionSource                    `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Target   *LinkedTransactionTarget                    `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	Mambu    *LinkedTransactionMambu                     `protobuf:"bytes,7,opt,name=mambu,proto3" json:"mambu,omitempty"`
	Fcmb     *LinkedTransactionFCMB                      `protobuf:"bytes,8,opt,name=fcmb,proto3" json:"fcmb,omitempty"`
	Status   LinkedTransaction_LinkedTransactionStatuses `protobuf:"varint,9,opt,name=status,proto3,enum=types.LinkedTransaction_LinkedTransactionStatuses" json:"status,omitempty"`
	StatusTs *timestamppb.Timestamp                      `protobuf:"bytes,10,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts       *timestamppb.Timestamp                      `protobuf:"bytes,11,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *LinkedTransaction) Reset() {
	*x = LinkedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedTransaction) ProtoMessage() {}

func (x *LinkedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedTransaction.ProtoReflect.Descriptor instead.
func (*LinkedTransaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38}
}

func (x *LinkedTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkedTransaction) GetType() LinkedTransaction_LinkedTransactionTypes {
	if x != nil {
		return x.Type
	}
	return LinkedTransaction_DEPOSIT
}

func (x *LinkedTransaction) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *LinkedTransaction) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LinkedTransaction) GetSource() *LinkedTransactionSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *LinkedTransaction) GetTarget() *LinkedTransactionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *LinkedTransaction) GetMambu() *LinkedTransactionMambu {
	if x != nil {
		return x.Mambu
	}
	return nil
}

func (x *LinkedTransaction) GetFcmb() *LinkedTransactionFCMB {
	if x != nil {
		return x.Fcmb
	}
	return nil
}

func (x *LinkedTransaction) GetStatus() LinkedTransaction_LinkedTransactionStatuses {
	if x != nil {
		return x.Status
	}
	return LinkedTransaction_PENDING
}

func (x *LinkedTransaction) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *LinkedTransaction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type LinkedTransactionFCMB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionIdentifier string `protobuf:"bytes,1,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *LinkedTransactionFCMB) Reset() {
	*x = LinkedTransactionFCMB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedTransactionFCMB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedTransactionFCMB) ProtoMessage() {}

func (x *LinkedTransactionFCMB) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedTransactionFCMB.ProtoReflect.Descriptor instead.
func (*LinkedTransactionFCMB) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{39}
}

func (x *LinkedTransactionFCMB) GetTransactionIdentifier() string {
	if x != nil {
		return x.TransactionIdentifier
	}
	return ""
}

type LinkedTransactionMambu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEncodedKey string `protobuf:"bytes,1,opt,name=transaction_encoded_key,json=transactionEncodedKey,proto3" json:"transaction_encoded_key,omitempty"`
}

func (x *LinkedTransactionMambu) Reset() {
	*x = LinkedTransactionMambu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedTransactionMambu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedTransactionMambu) ProtoMessage() {}

func (x *LinkedTransactionMambu) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedTransactionMambu.ProtoReflect.Descriptor instead.
func (*LinkedTransactionMambu) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{40}
}

func (x *LinkedTransactionMambu) GetTransactionEncodedKey() string {
	if x != nil {
		return x.TransactionEncodedKey
	}
	return ""
}

type LinkedTransactionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account            *Account            `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	BeneficiaryAccount *BeneficiaryAccount `protobuf:"bytes,2,opt,name=beneficiaryAccount,proto3" json:"beneficiaryAccount,omitempty"`
	AccountData        string              `protobuf:"bytes,3,opt,name=account_data,json=accountData,proto3" json:"account_data,omitempty"`
}

func (x *LinkedTransactionTarget) Reset() {
	*x = LinkedTransactionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedTransactionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedTransactionTarget) ProtoMessage() {}

func (x *LinkedTransactionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedTransactionTarget.ProtoReflect.Descriptor instead.
func (*LinkedTransactionTarget) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{41}
}

func (x *LinkedTransactionTarget) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *LinkedTransactionTarget) GetBeneficiaryAccount() *BeneficiaryAccount {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return nil
}

func (x *LinkedTransactionTarget) GetAccountData() string {
	if x != nil {
		return x.AccountData
	}
	return ""
}

type LinkedTransactionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer    *Customer `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Account     *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	AccountData string    `protobuf:"bytes,3,opt,name=account_data,json=accountData,proto3" json:"account_data,omitempty"`
}

func (x *LinkedTransactionSource) Reset() {
	*x = LinkedTransactionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedTransactionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedTransactionSource) ProtoMessage() {}

func (x *LinkedTransactionSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedTransactionSource.ProtoReflect.Descriptor instead.
func (*LinkedTransactionSource) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{42}
}

func (x *LinkedTransactionSource) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *LinkedTransactionSource) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *LinkedTransactionSource) GetAccountData() string {
	if x != nil {
		return x.AccountData
	}
	return ""
}

type TransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status   TransactionType_TransactionTypeStatuses `protobuf:"varint,3,opt,name=status,proto3,enum=types.TransactionType_TransactionTypeStatuses" json:"status,omitempty"`
	StatusTs *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts       *timestamppb.Timestamp                  `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *TransactionType) Reset() {
	*x = TransactionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionType) ProtoMessage() {}

func (x *TransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionType.ProtoReflect.Descriptor instead.
func (*TransactionType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{43}
}

func (x *TransactionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionType) GetStatus() TransactionType_TransactionTypeStatuses {
	if x != nil {
		return x.Status
	}
	return TransactionType_ACTIVE
}

func (x *TransactionType) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *TransactionType) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionType *TransactionType       `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Type            Fee_FeeTypes           `protobuf:"varint,3,opt,name=type,proto3,enum=types.Fee_FeeTypes" json:"type,omitempty"`
	Boundaries      []*FeeBoundaries       `protobuf:"bytes,4,rep,name=boundaries,proto3" json:"boundaries,omitempty"`
	Status          Fee_FeeStatuses        `protobuf:"varint,5,opt,name=status,proto3,enum=types.Fee_FeeStatuses" json:"status,omitempty"`
	StatusTs        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44}
}

func (x *Fee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fee) GetTransactionType() *TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *Fee) GetType() Fee_FeeTypes {
	if x != nil {
		return x.Type
	}
	return Fee_FIXED
}

func (x *Fee) GetBoundaries() []*FeeBoundaries {
	if x != nil {
		return x.Boundaries
	}
	return nil
}

func (x *Fee) GetStatus() Fee_FeeStatuses {
	if x != nil {
		return x.Status
	}
	return Fee_ACTIVE
}

func (x *Fee) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Fee) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type FeeBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower      float32 `protobuf:"fixed32,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper      float32 `protobuf:"fixed32,2,opt,name=upper,proto3" json:"upper,omitempty"`
	Amount     float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Percentage float32 `protobuf:"fixed32,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *FeeBoundaries) Reset() {
	*x = FeeBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeBoundaries) ProtoMessage() {}

func (x *FeeBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeBoundaries.ProtoReflect.Descriptor instead.
func (*FeeBoundaries) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{45}
}

func (x *FeeBoundaries) GetLower() float32 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *FeeBoundaries) GetUpper() float32 {
	if x != nil {
		return x.Upper
	}
	return 0
}

func (x *FeeBoundaries) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FeeBoundaries) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type ExchangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseCurrency   *Currency              `protobuf:"bytes,2,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	TargetCurrency *Currency              `protobuf:"bytes,3,opt,name=target_currency,json=targetCurrency,proto3" json:"target_currency,omitempty"`
	BuyPrice       float32                `protobuf:"fixed32,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SalePrice      float32                `protobuf:"fixed32,5,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	Ts             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{46}
}

func (x *ExchangeRate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExchangeRate) GetBaseCurrency() *Currency {
	if x != nil {
		return x.BaseCurrency
	}
	return nil
}

func (x *ExchangeRate) GetTargetCurrency() *Currency {
	if x != nil {
		return x.TargetCurrency
	}
	return nil
}

func (x *ExchangeRate) GetBuyPrice() float32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *ExchangeRate) GetSalePrice() float32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *ExchangeRate) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type ScheduledTransactionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beneficiary        *Beneficiary        `protobuf:"bytes,1,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	BeneficiaryAccount *BeneficiaryAccount `protobuf:"bytes,2,opt,name=beneficiary_account,json=beneficiaryAccount,proto3" json:"beneficiary_account,omitempty"`
}

func (x *ScheduledTransactionTarget) Reset() {
	*x = ScheduledTransactionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTransactionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTransactionTarget) ProtoMessage() {}

func (x *ScheduledTransactionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTransactionTarget.ProtoReflect.Descriptor instead.
func (*ScheduledTransactionTarget) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{47}
}

func (x *ScheduledTransactionTarget) GetBeneficiary() *Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *ScheduledTransactionTarget) GetBeneficiaryAccount() *BeneficiaryAccount {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return nil
}

type ScheduledTransactionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *Customer `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Account  *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *ScheduledTransactionSource) Reset() {
	*x = ScheduledTransactionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTransactionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTransactionSource) ProtoMessage() {}

func (x *ScheduledTransactionSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTransactionSource.ProtoReflect.Descriptor instead.
func (*ScheduledTransactionSource) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{48}
}

func (x *ScheduledTransactionSource) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *ScheduledTransactionSource) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type ScheduledTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionType *TransactionType                                    `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Reference       string                                              `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	Source          *ScheduledTransactionSource                         `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Target          *ScheduledTransactionTarget                         `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Amount          float32                                             `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ReferenceDate   *timestamppb.Timestamp                              `protobuf:"bytes,7,opt,name=reference_date,json=referenceDate,proto3" json:"reference_date,omitempty"`
	RepeatType      ScheduledTransaction_ScheduledTransactionRepeatType `protobuf:"varint,8,opt,name=repeat_type,json=repeatType,proto3,enum=types.ScheduledTransaction_ScheduledTransactionRepeatType" json:"repeat_type,omitempty"`
	Status          ScheduledTransaction_ScheduledTransactionStatuses   `protobuf:"varint,9,opt,name=status,proto3,enum=types.ScheduledTransaction_ScheduledTransactionStatuses" json:"status,omitempty"`
	StatusTs        *timestamppb.Timestamp                              `protobuf:"bytes,10,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts              *timestamppb.Timestamp                              `protobuf:"bytes,11,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *ScheduledTransaction) Reset() {
	*x = ScheduledTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTransaction) ProtoMessage() {}

func (x *ScheduledTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTransaction.ProtoReflect.Descriptor instead.
func (*ScheduledTransaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49}
}

func (x *ScheduledTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScheduledTransaction) GetTransactionType() *TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *ScheduledTransaction) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ScheduledTransaction) GetSource() *ScheduledTransactionSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ScheduledTransaction) GetTarget() *ScheduledTransactionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ScheduledTransaction) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ScheduledTransaction) GetReferenceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceDate
	}
	return nil
}

func (x *ScheduledTransaction) GetRepeatType() ScheduledTransaction_ScheduledTransactionRepeatType {
	if x != nil {
		return x.RepeatType
	}
	return ScheduledTransaction_ONE_TIME
}

func (x *ScheduledTransaction) GetStatus() ScheduledTransaction_ScheduledTransactionStatuses {
	if x != nil {
		return x.Status
	}
	return ScheduledTransaction_ACTIVE
}

func (x *ScheduledTransaction) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *ScheduledTransaction) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Beneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer          *Customer                       `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Name              string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Accounts          []*BeneficiaryAccount           `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
	TransactionsCount int32                           `protobuf:"varint,5,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty"`
	Status            Beneficiary_BeneficiaryStatuses `protobuf:"varint,6,opt,name=status,proto3,enum=types.Beneficiary_BeneficiaryStatuses" json:"status,omitempty"`
	StatusTs          *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts                *timestamppb.Timestamp          `protobuf:"bytes,8,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Beneficiary) Reset() {
	*x = Beneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beneficiary) ProtoMessage() {}

func (x *Beneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beneficiary.ProtoReflect.Descriptor instead.
func (*Beneficiary) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50}
}

func (x *Beneficiary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Beneficiary) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Beneficiary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beneficiary) GetAccounts() []*BeneficiaryAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Beneficiary) GetTransactionsCount() int32 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *Beneficiary) GetStatus() Beneficiary_BeneficiaryStatuses {
	if x != nil {
		return x.Status
	}
	return Beneficiary_ACTIVE
}

func (x *Beneficiary) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *Beneficiary) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type BeneficiaryAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Beneficiary   *Beneficiary                                  `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	Name          string                                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Account       *Account                                      `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Currency      *Currency                                     `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	AccountNumber string                                        `protobuf:"bytes,6,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Code          string                                        `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Status        BeneficiaryAccount_BeneficiaryAccountStatuses `protobuf:"varint,8,opt,name=status,proto3,enum=types.BeneficiaryAccount_BeneficiaryAccountStatuses" json:"status,omitempty"`
	StatusTs      *timestamppb.Timestamp                        `protobuf:"bytes,9,opt,name=status_ts,json=statusTs,proto3" json:"status_ts,omitempty"`
	Ts            *timestamppb.Timestamp                        `protobuf:"bytes,10,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *BeneficiaryAccount) Reset() {
	*x = BeneficiaryAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeneficiaryAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeneficiaryAccount) ProtoMessage() {}

func (x *BeneficiaryAccount) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeneficiaryAccount.ProtoReflect.Descriptor instead.
func (*BeneficiaryAccount) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{51}
}

func (x *BeneficiaryAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BeneficiaryAccount) GetBeneficiary() *Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *BeneficiaryAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BeneficiaryAccount) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BeneficiaryAccount) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *BeneficiaryAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BeneficiaryAccount) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BeneficiaryAccount) GetStatus() BeneficiaryAccount_BeneficiaryAccountStatuses {
	if x != nil {
		return x.Status
	}
	return BeneficiaryAccount_ACTIVE
}

func (x *BeneficiaryAccount) GetStatusTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTs
	}
	return nil
}

func (x *BeneficiaryAccount) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{52}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CodeAlpha2 string   `protobuf:"bytes,2,opt,name=code_alpha2,json=codeAlpha2,proto3" json:"code_alpha2,omitempty"`
	CodeAlpha3 string   `protobuf:"bytes,3,opt,name=code_alpha3,json=codeAlpha3,proto3" json:"code_alpha3,omitempty"`
	Name       string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	States     []*State `protobuf:"bytes,5,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{53}
}

func (x *Country) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Country) GetCodeAlpha2() string {
	if x != nil {
		return x.CodeAlpha2
	}
	return ""
}

func (x *Country) GetCodeAlpha3() string {
	if x != nil {
		return x.CodeAlpha3
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoCode string `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{54}
}

func (x *State) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *State) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type Content_ContentType    `protobuf:"varint,2,opt,name=type,proto3,enum=types.Content_ContentType" json:"type,omitempty"`
	Link string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Ts   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{55}
}

func (x *Content) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Content) GetType() Content_ContentType {
	if x != nil {
		return x.Type
	}
	return Content_GENERAL_TC
}

func (x *Content) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Content) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type DefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DefaultResponse) Reset() {
	*x = DefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultResponse) ProtoMessage() {}

func (x *DefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultResponse.ProtoReflect.Descriptor instead.
func (*DefaultResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{56}
}

func (x *DefaultResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DefaultResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type DeviceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier  string                    `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Os          string                    `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Brand       string                    `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	Tokens      []*DeviceTokenInput       `protobuf:"bytes,4,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Preferences []*DevicePreferencesInput `protobuf:"bytes,5,rep,name=preferences,proto3" json:"preferences,omitempty"`
}

func (x *DeviceInput) Reset() {
	*x = DeviceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInput) ProtoMessage() {}

func (x *DeviceInput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInput.ProtoReflect.Descriptor instead.
func (*DeviceInput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{57}
}

func (x *DeviceInput) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DeviceInput) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DeviceInput) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *DeviceInput) GetTokens() []*DeviceTokenInput {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *DeviceInput) GetPreferences() []*DevicePreferencesInput {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type DeviceTokenInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DeviceToken_DeviceTokenTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.DeviceToken_DeviceTokenTypes" json:"type,omitempty"`
	Value string                       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceTokenInput) Reset() {
	*x = DeviceTokenInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTokenInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTokenInput) ProtoMessage() {}

func (x *DeviceTokenInput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTokenInput.ProtoReflect.Descriptor instead.
func (*DeviceTokenInput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58}
}

func (x *DeviceTokenInput) GetType() DeviceToken_DeviceTokenTypes {
	if x != nil {
		return x.Type
	}
	return DeviceToken_FIREBASE
}

func (x *DeviceTokenInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DevicePreferencesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DevicePreferences_DevicePreferencesTypes `protobuf:"varint,1,opt,name=type,proto3,enum=types.DevicePreferences_DevicePreferencesTypes" json:"type,omitempty"`
	Value bool                                     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DevicePreferencesInput) Reset() {
	*x = DevicePreferencesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePreferencesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePreferencesInput) ProtoMessage() {}

func (x *DevicePreferencesInput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePreferencesInput.ProtoReflect.Descriptor instead.
func (*DevicePreferencesInput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{59}
}

func (x *DevicePreferencesInput) GetType() DevicePreferences_DevicePreferencesTypes {
	if x != nil {
		return x.Type
	}
	return DevicePreferences_PUSH
}

func (x *DevicePreferencesInput) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type PaginationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNextPage     bool   `protobuf:"varint,1,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
	HasPreviousPage bool   `protobuf:"varint,2,opt,name=has_previous_page,json=hasPreviousPage,proto3" json:"has_previous_page,omitempty"`
	StartCursor     string `protobuf:"bytes,3,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	EndCursor       string `protobuf:"bytes,4,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`
}

func (x *PaginationInfo) Reset() {
	*x = PaginationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationInfo) ProtoMessage() {}

func (x *PaginationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationInfo.ProtoReflect.Descriptor instead.
func (*PaginationInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{60}
}

func (x *PaginationInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *PaginationInfo) GetHasPreviousPage() bool {
	if x != nil {
		return x.HasPreviousPage
	}
	return false
}

func (x *PaginationInfo) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *PaginationInfo) GetEndCursor() string {
	if x != nil {
		return x.EndCursor
	}
	return ""
}

type JWTClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType JWTClaims_ClientType `protobuf:"varint,1,opt,name=clientType,proto3,enum=types.JWTClaims_ClientType" json:"clientType,omitempty"`
	Id         string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Email      string               `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	DeviceId   string               `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *JWTClaims) Reset() {
	*x = JWTClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTClaims) ProtoMessage() {}

func (x *JWTClaims) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTClaims.ProtoReflect.Descriptor instead.
func (*JWTClaims) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{61}
}

func (x *JWTClaims) GetClientType() JWTClaims_ClientType {
	if x != nil {
		return x.ClientType
	}
	return JWTClaims_APP
}

func (x *JWTClaims) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JWTClaims) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *JWTClaims) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type Bank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BankCode      string                 `protobuf:"bytes,2,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	BankName      string                 `protobuf:"bytes,3,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankShortName string                 `protobuf:"bytes,4,opt,name=bank_short_name,json=bankShortName,proto3" json:"bank_short_name,omitempty"`
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Bank) Reset() {
	*x = Bank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{62}
}

func (x *Bank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bank) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *Bank) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *Bank) GetBankShortName() string {
	if x != nil {
		return x.BankShortName
	}
	return ""
}

func (x *Bank) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Bank) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type StaffAuditLogValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*StaffAuditLogValue_Fee
	//	*StaffAuditLogValue_ExchangeRate
	//	*StaffAuditLogValue_Customer
	Data isStaffAuditLogValue_Data `protobuf_oneof:"data"`
}

func (x *StaffAuditLogValue) Reset() {
	*x = StaffAuditLogValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffAuditLogValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffAuditLogValue) ProtoMessage() {}

func (x *StaffAuditLogValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffAuditLogValue.ProtoReflect.Descriptor instead.
func (*StaffAuditLogValue) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{63}
}

func (m *StaffAuditLogValue) GetData() isStaffAuditLogValue_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *StaffAuditLogValue) GetFee() *Fee {
	if x, ok := x.GetData().(*StaffAuditLogValue_Fee); ok {
		return x.Fee
	}
	return nil
}

func (x *StaffAuditLogValue) GetExchangeRate() *ExchangeRate {
	if x, ok := x.GetData().(*StaffAuditLogValue_ExchangeRate); ok {
		return x.ExchangeRate
	}
	return nil
}

func (x *StaffAuditLogValue) GetCustomer() *Customer {
	if x, ok := x.GetData().(*StaffAuditLogValue_Customer); ok {
		return x.Customer
	}
	return nil
}

type isStaffAuditLogValue_Data interface {
	isStaffAuditLogValue_Data()
}

type StaffAuditLogValue_Fee struct {
	Fee *Fee `protobuf:"bytes,1,opt,name=fee,proto3,oneof"` // Fee.
}

type StaffAuditLogValue_ExchangeRate struct {
	ExchangeRate *ExchangeRate `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3,oneof"` // Exchange rate.
}

type StaffAuditLogValue_Customer struct {
	Customer *Customer `protobuf:"bytes,3,opt,name=customer,proto3,oneof"`
}

func (*StaffAuditLogValue_Fee) isStaffAuditLogValue_Data() {}

func (*StaffAuditLogValue_ExchangeRate) isStaffAuditLogValue_Data() {}

func (*StaffAuditLogValue_Customer) isStaffAuditLogValue_Data() {}

type StaffAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Staff    *Staff                           `protobuf:"bytes,2,opt,name=staff,proto3" json:"staff,omitempty"`
	OldValue *StaffAuditLogValue              `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue *StaffAuditLogValue              `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	Type     StaffAuditLog_StaffAuditLogTypes `protobuf:"varint,5,opt,name=type,proto3,enum=types.StaffAuditLog_StaffAuditLogTypes" json:"type,omitempty"`
	Ts       *timestamppb.Timestamp           `protobuf:"bytes,6,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *StaffAuditLog) Reset() {
	*x = StaffAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffAuditLog) ProtoMessage() {}

func (x *StaffAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffAuditLog.ProtoReflect.Descriptor instead.
func (*StaffAuditLog) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{64}
}

func (x *StaffAuditLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StaffAuditLog) GetStaff() *Staff {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *StaffAuditLog) GetOldValue() *StaffAuditLogValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *StaffAuditLog) GetNewValue() *StaffAuditLogValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *StaffAuditLog) GetType() StaffAuditLog_StaffAuditLogTypes {
	if x != nil {
		return x.Type
	}
	return StaffAuditLog_FX_RATE
}

func (x *StaffAuditLog) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x04, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x76, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x76, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x06,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x50, 0x69, 0x6e, 0x22, 0x67, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x22, 0x32, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x4d, 0x53, 0x10, 0x03, 0x22, 0x3d, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x47,
	0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xd1, 0x03, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x47, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73,
	0x22, 0x2e, 0x0a, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x4e, 0x10, 0x01,
	0x22, 0x37, 0x0a, 0x1b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x87, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x6f, 0x62, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x66, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x22, 0x2f, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xd5, 0x01,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49,
	0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x01, 0x22, 0x7e, 0x0a, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x49, 0x52, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x22, 0x81, 0x05, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x6d,
	0x62, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6d, 0x62, 0x75, 0x52, 0x05, 0x6d,
	0x61, 0x6d, 0x62, 0x75, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x63, 0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x43, 0x4d, 0x42, 0x52, 0x04, 0x66, 0x63, 0x6d, 0x62, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0x6c,
	0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x43, 0x4d, 0x42, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x69, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x69, 0x66, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6d, 0x62, 0x75,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x22, 0x36, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x6d, 0x62, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6d, 0x62, 0x75, 0x52, 0x05, 0x6d, 0x61, 0x6d, 0x62, 0x75, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x01, 0x22, 0x2b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x2f,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6d, 0x62, 0x75, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22,
	0x82, 0x03, 0x0a, 0x03, 0x43, 0x44, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x61, 0x6d, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x4c, 0x52, 0x04,
	0x61, 0x6d, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6b, 0x79, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x59, 0x43, 0x52, 0x04,
	0x6b, 0x79, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x6f, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x41, 0x52, 0x04,
	0x70, 0x6f, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x44, 0x44,
	0x2e, 0x43, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x44, 0x44,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x03, 0x22, 0xb5, 0x03, 0x0a, 0x03, 0x41, 0x4d, 0x4c, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x4c, 0x2e, 0x41, 0x4d, 0x4c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x22, 0x49, 0x0a, 0x0b, 0x41, 0x4d, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb2, 0x03, 0x0a,
	0x03, 0x4b, 0x59, 0x43, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b,
	0x59, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x59, 0x43, 0x2e, 0x4b, 0x59,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x22, 0x80, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x6a, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x22, 0xbd, 0x03, 0x0a, 0x03, 0x50, 0x4f, 0x41, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f,
	0x41, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x41, 0x2e, 0x50, 0x4f, 0x41,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x4f, 0x41, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x22, 0xe3, 0x02, 0x0a, 0x09, 0x50, 0x4f, 0x41, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x41, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x4f, 0x41, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x4f, 0x41,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x4f, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x0e, 0x50, 0x4f, 0x41, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x22, 0x49, 0x0a, 0x0b, 0x50,
	0x4f, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0xe3, 0x02, 0x0a, 0x09, 0x41, 0x4d, 0x4c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x4d, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x4d, 0x4c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x0e,
	0x41, 0x4d, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x00, 0x22, 0x49, 0x0a, 0x0b, 0x41, 0x4d, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0xe3, 0x02, 0x0a,
	0x09, 0x4b, 0x59, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4b, 0x59, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x59, 0x43, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x59, 0x43, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x22, 0x23, 0x0a, 0x0e, 0x4b, 0x59, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x22, 0x49, 0x0a, 0x0b, 0x4b, 0x59, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xa0, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xc0, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc1, 0x05, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x61, 0x6d, 0x62, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6d, 0x62,
	0x75, 0x52, 0x05, 0x6d, 0x61, 0x6d, 0x62, 0x75, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x63, 0x6d, 0x62,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x43, 0x4d, 0x42, 0x52, 0x04, 0x66, 0x63, 0x6d, 0x62, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x10,
	0x02, 0x22, 0x44, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x43, 0x4d, 0x42,
	0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6d, 0x62,
	0x75, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x97, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x9a, 0x03,
	0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46,
	0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x46, 0x65, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x22, 0x27, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x73, 0x0a, 0x0d, 0x46, 0x65,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xf6, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x4a, 0x0a,
	0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd,
	0x05, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x55, 0x0a,
	0x1e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c,
	0x4c, 0x59, 0x10, 0x03, 0x22, 0x38, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x9a,
	0x03, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xeb, 0x03, 0x0a, 0x12,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x22, 0x36, 0x0a, 0x1a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x36, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x43, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x42, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x47, 0x4e, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x43, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x43, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x53, 0x10, 0x05, 0x22, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x61, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x73, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x4a,
	0x57, 0x54, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x57, 0x54, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x50, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0xbc,
	0x01, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0xa7, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x36, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x58, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x45, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x42, 0x18, 0x5a, 0x16, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 40)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_types_proto_goTypes = []interface{}{
	(Customer_CustomerStatuses)(0),                           // 0: types.Customer.CustomerStatuses
	(Customer_CustomerTitle)(0),                              // 1: types.Customer.CustomerTitle
	(Identity_IdentityStatuses)(0),                           // 2: types.Identity.IdentityStatuses
	(IdentityCredentials_IdentityCredentialsTypes)(0),        // 3: types.IdentityCredentials.IdentityCredentialsTypes
	(IdentityCredentials_IdentityCredentialsStatuses)(0),     // 4: types.IdentityCredentials.IdentityCredentialsStatuses
	(Organization_OrganizationStatuses)(0),                   // 5: types.Organization.OrganizationStatuses
	(Staff_StaffStatuses)(0),                                 // 6: types.Staff.StaffStatuses
	(Questionary_QuestionaryTypes)(0),                        // 7: types.Questionary.QuestionaryTypes
	(Questionary_QuestionaryStatuses)(0),                     // 8: types.Questionary.QuestionaryStatuses
	(Device_DeviceStatuses)(0),                               // 9: types.Device.DeviceStatuses
	(DevicePreferences_DevicePreferencesTypes)(0),            // 10: types.DevicePreferences.DevicePreferencesTypes
	(DeviceToken_DeviceTokenTypes)(0),                        // 11: types.DeviceToken.DeviceTokenTypes
	(Account_AccountStatuses)(0),                             // 12: types.Account.AccountStatuses
	(Product_ProductTypes)(0),                                // 13: types.Product.ProductTypes
	(Product_ProductStatuses)(0),                             // 14: types.Product.ProductStatuses
	(CDD_CDDStatuses)(0),                                     // 15: types.CDD.CDDStatuses
	(AML_AMLStatuses)(0),                                     // 16: types.AML.AMLStatuses
	(KYC_KYCStatuses)(0),                                     // 17: types.KYC.KYCStatuses
	(Report_ReportTypes)(0),                                  // 18: types.Report.ReportTypes
	(Report_ReportStatuses)(0),                               // 19: types.Report.ReportStatuses
	(POA_POAStatuses)(0),                                     // 20: types.POA.POAStatuses
	(POAAction_POAActionTypes)(0),                            // 21: types.POAAction.POAActionTypes
	(POAAction_POAStatuses)(0),                               // 22: types.POAAction.POAStatuses
	(AMLAction_AMLActionTypes)(0),                            // 23: types.AMLAction.AMLActionTypes
	(AMLAction_AMLStatuses)(0),                               // 24: types.AMLAction.AMLStatuses
	(KYCAction_KYCActionTypes)(0),                            // 25: types.KYCAction.KYCActionTypes
	(KYCAction_KYCStatuses)(0),                               // 26: types.KYCAction.KYCStatuses
	(Transaction_TransactionStatuses)(0),                     // 27: types.Transaction.TransactionStatuses
	(LinkedTransaction_LinkedTransactionTypes)(0),            // 28: types.LinkedTransaction.LinkedTransactionTypes
	(LinkedTransaction_LinkedTransactionStatuses)(0),         // 29: types.LinkedTransaction.LinkedTransactionStatuses
	(TransactionType_TransactionTypeStatuses)(0),             // 30: types.TransactionType.TransactionTypeStatuses
	(Fee_FeeTypes)(0),                                        // 31: types.Fee.FeeTypes
	(Fee_FeeStatuses)(0),                                     // 32: types.Fee.FeeStatuses
	(ScheduledTransaction_ScheduledTransactionRepeatType)(0), // 33: types.ScheduledTransaction.ScheduledTransactionRepeatType
	(ScheduledTransaction_ScheduledTransactionStatuses)(0),   // 34: types.ScheduledTransaction.ScheduledTransactionStatuses
	(Beneficiary_BeneficiaryStatuses)(0),                     // 35: types.Beneficiary.BeneficiaryStatuses
	(BeneficiaryAccount_BeneficiaryAccountStatuses)(0),       // 36: types.BeneficiaryAccount.BeneficiaryAccountStatuses
	(Content_ContentType)(0),                                 // 37: types.Content.ContentType
	(JWTClaims_ClientType)(0),                                // 38: types.JWTClaims.ClientType
	(StaffAuditLog_StaffAuditLogTypes)(0),                    // 39: types.StaffAuditLog.StaffAuditLogTypes
	(*Customer)(nil),                                         // 40: types.Customer
	(*Email)(nil),                                            // 41: types.Email
	(*Phone)(nil),                                            // 42: types.Phone
	(*Address)(nil),                                          // 43: types.Address
	(*Coordinates)(nil),                                      // 44: types.Coordinates
	(*Identity)(nil),                                         // 45: types.Identity
	(*IdentityCredentials)(nil),                              // 46: types.IdentityCredentials
	(*Organization)(nil),                                     // 47: types.Organization
	(*Staff)(nil),                                            // 48: types.Staff
	(*Acceptance)(nil),                                       // 49: types.Acceptance
	(*Questionary)(nil),                                      // 50: types.Questionary
	(*QuestionaryQuestion)(nil),                              // 51: types.QuestionaryQuestion
	(*QuestionaryPredefinedAnswer)(nil),                      // 52: types.QuestionaryPredefinedAnswer
	(*QuestionaryAnswer)(nil),                                // 53: types.QuestionaryAnswer
	(*QuestionaryAnswerQuestion)(nil),                        // 54: types.QuestionaryAnswerQuestion
	(*Device)(nil),                                           // 55: types.Device
	(*DevicePreferences)(nil),                                // 56: types.DevicePreferences
	(*DeviceToken)(nil),                                      // 57: types.DeviceToken
	(*Account)(nil),                                          // 58: types.Account
	(*AccountVault)(nil),                                     // 59: types.AccountVault
	(*AccountFCMB)(nil),                                      // 60: types.AccountFCMB
	(*AccountMambu)(nil),                                     // 61: types.AccountMambu
	(*AccountBalances)(nil),                                  // 62: types.AccountBalances
	(*Product)(nil),                                          // 63: types.Product
	(*ProductMambu)(nil),                                     // 64: types.ProductMambu
	(*CDD)(nil),                                              // 65: types.CDD
	(*AML)(nil),                                              // 66: types.AML
	(*KYC)(nil),                                              // 67: types.KYC
	(*Report)(nil),                                           // 68: types.Report
	(*Review)(nil),                                           // 69: types.Review
	(*POA)(nil),                                              // 70: types.POA
	(*POAAction)(nil),                                        // 71: types.POAAction
	(*AMLAction)(nil),                                        // 72: types.AMLAction
	(*KYCAction)(nil),                                        // 73: types.KYCAction
	(*Transaction)(nil),                                      // 74: types.Transaction
	(*TransactionTarget)(nil),                                // 75: types.TransactionTarget
	(*TransactionSource)(nil),                                // 76: types.TransactionSource
	(*TransactionFee)(nil),                                   // 77: types.TransactionFee
	(*LinkedTransaction)(nil),                                // 78: types.LinkedTransaction
	(*LinkedTransactionFCMB)(nil),                            // 79: types.LinkedTransactionFCMB
	(*LinkedTransactionMambu)(nil),                           // 80: types.LinkedTransactionMambu
	(*LinkedTransactionTarget)(nil),                          // 81: types.LinkedTransactionTarget
	(*LinkedTransactionSource)(nil),                          // 82: types.LinkedTransactionSource
	(*TransactionType)(nil),                                  // 83: types.TransactionType
	(*Fee)(nil),                                              // 84: types.Fee
	(*FeeBoundaries)(nil),                                    // 85: types.FeeBoundaries
	(*ExchangeRate)(nil),                                     // 86: types.ExchangeRate
	(*ScheduledTransactionTarget)(nil),                       // 87: types.ScheduledTransactionTarget
	(*ScheduledTransactionSource)(nil),                       // 88: types.ScheduledTransactionSource
	(*ScheduledTransaction)(nil),                             // 89: types.ScheduledTransaction
	(*Beneficiary)(nil),                                      // 90: types.Beneficiary
	(*BeneficiaryAccount)(nil),                               // 91: types.BeneficiaryAccount
	(*Currency)(nil),                                         // 92: types.Currency
	(*Country)(nil),                                          // 93: types.Country
	(*State)(nil),                                            // 94: types.State
	(*Content)(nil),                                          // 95: types.Content
	(*DefaultResponse)(nil),                                  // 96: types.DefaultResponse
	(*DeviceInput)(nil),                                      // 97: types.DeviceInput
	(*DeviceTokenInput)(nil),                                 // 98: types.DeviceTokenInput
	(*DevicePreferencesInput)(nil),                           // 99: types.DevicePreferencesInput
	(*PaginationInfo)(nil),                                   // 100: types.PaginationInfo
	(*JWTClaims)(nil),                                        // 101: types.JWTClaims
	(*Bank)(nil),                                             // 102: types.Bank
	(*StaffAuditLogValue)(nil),                               // 103: types.StaffAuditLogValue
	(*StaffAuditLog)(nil),                                    // 104: types.StaffAuditLog
	(*timestamppb.Timestamp)(nil),                            // 105: google.protobuf.Timestamp
}
var file_types_proto_depIdxs = []int32{
	43,  // 0: types.Customer.addresses:type_name -> types.Address
	42,  // 1: types.Customer.phones:type_name -> types.Phone
	41,  // 2: types.Customer.email:type_name -> types.Email
	0,   // 3: types.Customer.status:type_name -> types.Customer.CustomerStatuses
	105, // 4: types.Customer.status_ts:type_name -> google.protobuf.Timestamp
	105, // 5: types.Customer.ts:type_name -> google.protobuf.Timestamp
	1,   // 6: types.Customer.title:type_name -> types.Customer.CustomerTitle
	93,  // 7: types.Address.country:type_name -> types.Country
	44,  // 8: types.Address.coordinates:type_name -> types.Coordinates
	40,  // 9: types.Identity.customer:type_name -> types.Customer
	47,  // 10: types.Identity.organization:type_name -> types.Organization
	46,  // 11: types.Identity.credentials:type_name -> types.IdentityCredentials
	2,   // 12: types.Identity.status:type_name -> types.Identity.IdentityStatuses
	105, // 13: types.Identity.status_ts:type_name -> google.protobuf.Timestamp
	105, // 14: types.Identity.ts:type_name -> google.protobuf.Timestamp
	3,   // 15: types.IdentityCredentials.type:type_name -> types.IdentityCredentials.IdentityCredentialsTypes
	4,   // 16: types.IdentityCredentials.status:type_name -> types.IdentityCredentials.IdentityCredentialsStatuses
	105, // 17: types.IdentityCredentials.status_ts:type_name -> google.protobuf.Timestamp
	105, // 18: types.IdentityCredentials.ts:type_name -> google.protobuf.Timestamp
	105, // 19: types.IdentityCredentials.update_ts:type_name -> google.protobuf.Timestamp
	5,   // 20: types.Organization.status:type_name -> types.Organization.OrganizationStatuses
	105, // 21: types.Organization.status_ts:type_name -> google.protobuf.Timestamp
	105, // 22: types.Organization.ts:type_name -> google.protobuf.Timestamp
	43,  // 23: types.Staff.addresses:type_name -> types.Address
	42,  // 24: types.Staff.phones:type_name -> types.Phone
	6,   // 25: types.Staff.status:type_name -> types.Staff.StaffStatuses
	105, // 26: types.Staff.status_ts:type_name -> google.protobuf.Timestamp
	105, // 27: types.Staff.ts:type_name -> google.protobuf.Timestamp
	95,  // 28: types.Acceptance.content:type_name -> types.Content
	40,  // 29: types.Acceptance.customer:type_name -> types.Customer
	105, // 30: types.Acceptance.ts:type_name -> google.protobuf.Timestamp
	7,   // 31: types.Questionary.type:type_name -> types.Questionary.QuestionaryTypes
	51,  // 32: types.Questionary.questions:type_name -> types.QuestionaryQuestion
	8,   // 33: types.Questionary.status:type_name -> types.Questionary.QuestionaryStatuses
	105, // 34: types.Questionary.status_ts:type_name -> google.protobuf.Timestamp
	105, // 35: types.Questionary.ts:type_name -> google.protobuf.Timestamp
	52,  // 36: types.QuestionaryQuestion.predefined_answers:type_name -> types.QuestionaryPredefinedAnswer
	54,  // 37: types.QuestionaryAnswer.questions:type_name -> types.QuestionaryAnswerQuestion
	105, // 38: types.QuestionaryAnswer.ts:type_name -> google.protobuf.Timestamp
	40,  // 39: types.Device.customer:type_name -> types.Customer
	57,  // 40: types.Device.tokens:type_name -> types.DeviceToken
	56,  // 41: types.Device.preferences:type_name -> types.DevicePreferences
	9,   // 42: types.Device.status:type_name -> types.Device.DeviceStatuses
	105, // 43: types.Device.status_ts:type_name -> google.protobuf.Timestamp
	105, // 44: types.Device.ts:type_name -> google.protobuf.Timestamp
	10,  // 45: types.DevicePreferences.type:type_name -> types.DevicePreferences.DevicePreferencesTypes
	11,  // 46: types.DeviceToken.type:type_name -> types.DeviceToken.DeviceTokenTypes
	40,  // 47: types.Account.customer:type_name -> types.Customer
	63,  // 48: types.Account.product:type_name -> types.Product
	62,  // 49: types.Account.balances:type_name -> types.AccountBalances
	61,  // 50: types.Account.mambu:type_name -> types.AccountMambu
	60,  // 51: types.Account.fcmb:type_name -> types.AccountFCMB
	59,  // 52: types.Account.vault:type_name -> types.AccountVault
	12,  // 53: types.Account.status:type_name -> types.Account.AccountStatuses
	105, // 54: types.Account.status_ts:type_name -> google.protobuf.Timestamp
	105, // 55: types.Account.ts:type_name -> google.protobuf.Timestamp
	13,  // 56: types.Product.type:type_name -> types.Product.ProductTypes
	92,  // 57: types.Product.currency:type_name -> types.Currency
	64,  // 58: types.Product.mambu:type_name -> types.ProductMambu
	14,  // 59: types.Product.status:type_name -> types.Product.ProductStatuses
	105, // 60: types.Product.status_ts:type_name -> google.protobuf.Timestamp
	105, // 61: types.Product.ts:type_name -> google.protobuf.Timestamp
	40,  // 62: types.CDD.customer:type_name -> types.Customer
	66,  // 63: types.CDD.amls:type_name -> types.AML
	67,  // 64: types.CDD.kycs:type_name -> types.KYC
	70,  // 65: types.CDD.poas:type_name -> types.POA
	15,  // 66: types.CDD.status:type_name -> types.CDD.CDDStatuses
	105, // 67: types.CDD.status_ts:type_name -> google.protobuf.Timestamp
	105, // 68: types.CDD.ts:type_name -> google.protobuf.Timestamp
	47,  // 69: types.AML.organization:type_name -> types.Organization
	72,  // 70: types.AML.actions:type_name -> types.AMLAction
	16,  // 71: types.AML.status:type_name -> types.AML.AMLStatuses
	105, // 72: types.AML.status_ts:type_name -> google.protobuf.Timestamp
	105, // 73: types.AML.ts:type_name -> google.protobuf.Timestamp
	47,  // 74: types.KYC.organization:type_name -> types.Organization
	68,  // 75: types.KYC.reports:type_name -> types.Report
	73,  // 76: types.KYC.actions:type_name -> types.KYCAction
	17,  // 77: types.KYC.status:type_name -> types.KYC.KYCStatuses
	105, // 78: types.KYC.status_ts:type_name -> google.protobuf.Timestamp
	105, // 79: types.KYC.ts:type_name -> google.protobuf.Timestamp
	18,  // 80: types.Report.type:type_name -> types.Report.ReportTypes
	69,  // 81: types.Report.review:type_name -> types.Review
	19,  // 82: types.Report.status:type_name -> types.Report.ReportStatuses
	105, // 83: types.Report.status_ts:type_name -> google.protobuf.Timestamp
	105, // 84: types.Report.ts:type_name -> google.protobuf.Timestamp
	105, // 85: types.Review.ts:type_name -> google.protobuf.Timestamp
	47,  // 86: types.POA.organization:type_name -> types.Organization
	69,  // 87: types.POA.review:type_name -> types.Review
	71,  // 88: types.POA.actions:type_name -> types.POAAction
	20,  // 89: types.POA.status:type_name -> types.POA.POAStatuses
	105, // 90: types.POA.status_ts:type_name -> google.protobuf.Timestamp
	105, // 91: types.POA.ts:type_name -> google.protobuf.Timestamp
	21,  // 92: types.POAAction.type:type_name -> types.POAAction.POAActionTypes
	48,  // 93: types.POAAction.reporter:type_name -> types.Staff
	22,  // 94: types.POAAction.target_status:type_name -> types.POAAction.POAStatuses
	105, // 95: types.POAAction.ts:type_name -> google.protobuf.Timestamp
	23,  // 96: types.AMLAction.type:type_name -> types.AMLAction.AMLActionTypes
	48,  // 97: types.AMLAction.reporter:type_name -> types.Staff
	24,  // 98: types.AMLAction.target_status:type_name -> types.AMLAction.AMLStatuses
	105, // 99: types.AMLAction.ts:type_name -> google.protobuf.Timestamp
	25,  // 100: types.KYCAction.type:type_name -> types.KYCAction.KYCActionTypes
	48,  // 101: types.KYCAction.reporter:type_name -> types.Staff
	26,  // 102: types.KYCAction.target_status:type_name -> types.KYCAction.KYCStatuses
	105, // 103: types.KYCAction.ts:type_name -> google.protobuf.Timestamp
	83,  // 104: types.Transaction.transaction_type:type_name -> types.TransactionType
	77,  // 105: types.Transaction.fees:type_name -> types.TransactionFee
	86,  // 106: types.Transaction.exchange_rate:type_name -> types.ExchangeRate
	76,  // 107: types.Transaction.source:type_name -> types.TransactionSource
	75,  // 108: types.Transaction.target:type_name -> types.TransactionTarget
	78,  // 109: types.Transaction.linked_transactions:type_name -> types.LinkedTransaction
	27,  // 110: types.Transaction.status:type_name -> types.Transaction.TransactionStatuses
	105, // 111: types.Transaction.status_ts:type_name -> google.protobuf.Timestamp
	105, // 112: types.Transaction.ts:type_name -> google.protobuf.Timestamp
	40,  // 113: types.TransactionTarget.customer:type_name -> types.Customer
	90,  // 114: types.TransactionTarget.beneficiary:type_name -> types.Beneficiary
	58,  // 115: types.TransactionTarget.account:type_name -> types.Account
	91,  // 116: types.TransactionTarget.beneficiary_account:type_name -> types.BeneficiaryAccount
	40,  // 117: types.TransactionSource.customer:type_name -> types.Customer
	58,  // 118: types.TransactionSource.account:type_name -> types.Account
	28,  // 119: types.LinkedTransaction.type:type_name -> types.LinkedTransaction.LinkedTransactionTypes
	92,  // 120: types.LinkedTransaction.currency:type_name -> types.Currency
	82,  // 121: types.LinkedTransaction.source:type_name -> types.LinkedTransactionSource
	81,  // 122: types.LinkedTransaction.target:type_name -> types.LinkedTransactionTarget
	80,  // 123: types.LinkedTransaction.mambu:type_name -> types.LinkedTransactionMambu
	79,  // 124: types.LinkedTransaction.fcmb:type_name -> types.LinkedTransactionFCMB
	29,  // 125: types.LinkedTransaction.status:type_name -> types.LinkedTransaction.LinkedTransactionStatuses
	105, // 126: types.LinkedTransaction.status_ts:type_name -> google.protobuf.Timestamp
	105, // 127: types.LinkedTransaction.ts:type_name -> google.protobuf.Timestamp
	58,  // 128: types.LinkedTransactionTarget.account:type_name -> types.Account
	91,  // 129: types.LinkedTransactionTarget.beneficiaryAccount:type_name -> types.BeneficiaryAccount
	40,  // 130: types.LinkedTransactionSource.customer:type_name -> types.Customer
	58,  // 131: types.LinkedTransactionSource.account:type_name -> types.Account
	30,  // 132: types.TransactionType.status:type_name -> types.TransactionType.TransactionTypeStatuses
	105, // 133: types.TransactionType.status_ts:type_name -> google.protobuf.Timestamp
	105, // 134: types.TransactionType.ts:type_name -> google.protobuf.Timestamp
	83,  // 135: types.Fee.transaction_type:type_name -> types.TransactionType
	31,  // 136: types.Fee.type:type_name -> types.Fee.FeeTypes
	85,  // 137: types.Fee.boundaries:type_name -> types.FeeBoundaries
	32,  // 138: types.Fee.status:type_name -> types.Fee.FeeStatuses
	105, // 139: types.Fee.status_ts:type_name -> google.protobuf.Timestamp
	105, // 140: types.Fee.ts:type_name -> google.protobuf.Timestamp
	92,  // 141: types.ExchangeRate.base_currency:type_name -> types.Currency
	92,  // 142: types.ExchangeRate.target_currency:type_name -> types.Currency
	105, // 143: types.ExchangeRate.ts:type_name -> google.protobuf.Timestamp
	90,  // 144: types.ScheduledTransactionTarget.beneficiary:type_name -> types.Beneficiary
	91,  // 145: types.ScheduledTransactionTarget.beneficiary_account:type_name -> types.BeneficiaryAccount
	40,  // 146: types.ScheduledTransactionSource.customer:type_name -> types.Customer
	58,  // 147: types.ScheduledTransactionSource.account:type_name -> types.Account
	83,  // 148: types.ScheduledTransaction.transaction_type:type_name -> types.TransactionType
	88,  // 149: types.ScheduledTransaction.source:type_name -> types.ScheduledTransactionSource
	87,  // 150: types.ScheduledTransaction.target:type_name -> types.ScheduledTransactionTarget
	105, // 151: types.ScheduledTransaction.reference_date:type_name -> google.protobuf.Timestamp
	33,  // 152: types.ScheduledTransaction.repeat_type:type_name -> types.ScheduledTransaction.ScheduledTransactionRepeatType
	34,  // 153: types.ScheduledTransaction.status:type_name -> types.ScheduledTransaction.ScheduledTransactionStatuses
	105, // 154: types.ScheduledTransaction.status_ts:type_name -> google.protobuf.Timestamp
	105, // 155: types.ScheduledTransaction.ts:type_name -> google.protobuf.Timestamp
	40,  // 156: types.Beneficiary.customer:type_name -> types.Customer
	91,  // 157: types.Beneficiary.accounts:type_name -> types.BeneficiaryAccount
	35,  // 158: types.Beneficiary.status:type_name -> types.Beneficiary.BeneficiaryStatuses
	105, // 159: types.Beneficiary.status_ts:type_name -> google.protobuf.Timestamp
	105, // 160: types.Beneficiary.ts:type_name -> google.protobuf.Timestamp
	90,  // 161: types.BeneficiaryAccount.beneficiary:type_name -> types.Beneficiary
	58,  // 162: types.BeneficiaryAccount.account:type_name -> types.Account
	92,  // 163: types.BeneficiaryAccount.currency:type_name -> types.Currency
	36,  // 164: types.BeneficiaryAccount.status:type_name -> types.BeneficiaryAccount.BeneficiaryAccountStatuses
	105, // 165: types.BeneficiaryAccount.status_ts:type_name -> google.protobuf.Timestamp
	105, // 166: types.BeneficiaryAccount.ts:type_name -> google.protobuf.Timestamp
	94,  // 167: types.Country.states:type_name -> types.State
	37,  // 168: types.Content.type:type_name -> types.Content.ContentType
	105, // 169: types.Content.ts:type_name -> google.protobuf.Timestamp
	98,  // 170: types.DeviceInput.tokens:type_name -> types.DeviceTokenInput
	99,  // 171: types.DeviceInput.preferences:type_name -> types.DevicePreferencesInput
	11,  // 172: types.DeviceTokenInput.type:type_name -> types.DeviceToken.DeviceTokenTypes
	10,  // 173: types.DevicePreferencesInput.type:type_name -> types.DevicePreferences.DevicePreferencesTypes
	38,  // 174: types.JWTClaims.clientType:type_name -> types.JWTClaims.ClientType
	105, // 175: types.Bank.ts:type_name -> google.protobuf.Timestamp
	84,  // 176: types.StaffAuditLogValue.fee:type_name -> types.Fee
	86,  // 177: types.StaffAuditLogValue.exchange_rate:type_name -> types.ExchangeRate
	40,  // 178: types.StaffAuditLogValue.customer:type_name -> types.Customer
	48,  // 179: types.StaffAuditLog.staff:type_name -> types.Staff
	103, // 180: types.StaffAuditLog.old_value:type_name -> types.StaffAuditLogValue
	103, // 181: types.StaffAuditLog.new_value:type_name -> types.StaffAuditLogValue
	39,  // 182: types.StaffAuditLog.type:type_name -> types.StaffAuditLog.StaffAuditLogTypes
	105, // 183: types.StaffAuditLog.ts:type_name -> google.protobuf.Timestamp
	184, // [184:184] is the sub-list for method output_type
	184, // [184:184] is the sub-list for method input_type
	184, // [184:184] is the sub-list for extension type_name
	184, // [184:184] is the sub-list for extension extendee
	0,   // [0:184] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acceptance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionaryQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionaryPredefinedAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionaryAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionaryAnswerQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountVault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountFCMB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMambu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductMambu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AML); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KYC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*POA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*POAAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMLAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KYCAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedTransactionFCMB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedTransactionMambu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedTransactionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedTransactionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTransactionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTransactionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeneficiaryAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTokenInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePreferencesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffAuditLogValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*StaffAuditLogValue_Fee)(nil),
		(*StaffAuditLogValue_ExchangeRate)(nil),
		(*StaffAuditLogValue_Customer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      40,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
