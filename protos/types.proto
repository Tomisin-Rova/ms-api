syntax = "proto3";
package types;
option go_package = "ms.api/protos/pb/types";

import "google/protobuf/any.proto";

// GraphQL API response
message Response {
  string message = 1;
  bool success = 2;
  int32 code = 3;
  string token = 4;
}

// Person type
message Person {
  string id = 1;
  string title = 2;
  string first_name = 3;
  string last_name = 4;
  string middle_name = 5;
  repeated PhoneNumber phones = 6;
  repeated Email emails = 7;
  string dob = 8;
  string country_residence = 9;
  repeated string nationality = 10;
  repeated Address addresses = 11;
  string employer = 12;
  repeated Identity identities = 13;
  int64 ts = 14;
  Cdd cdd = 15;
  repeated Activity activities = 16;
  string status = 17;
  string objectId = 18;
}

// Persons type
message Persons {
  repeated Person persons = 1;
  int64 totalCount = 2;
  bool hasNextPage = 3;
  bool hasPreviousPage = 4;
}

// Address type
message Address {
  string name = 1;
  bool primary = 2;
  string street = 3;
  string city = 4;
  string county = 5;
  string state = 6;
  string postcode = 7;
  string country = 8;
  string address_type = 10;
  repeated double coordinate = 11;
}

// Device type
message Device {
  string identifier = 1;
  string brand = 2;
  string os = 3;
}

// Email type
message Email {
  string Value = 1;
  bool Verified = 2;
}

// PhoneNumber type
message PhoneNumber {
  string Number = 1;
  bool Verified = 2;
}

// Cdd type
message Cdd {
  string id = 1;
  Person owner = 2;
  bool watchlist = 3;
  string details = 4;
  string status = 5;
  bool onboard = 6;
  int64 version = 7;
  repeated Validation validations = 8;
  bool active = 9;
  int32 ts = 10;
  string objectId = 11;
}

message Cdds {
  repeated Cdd results = 1;
  int64 totalCount = 2;
  bool hasNextPage = 3;
  bool hasPreviousPage = 4;
}
// Validation type
message Validation {
  string id = 1;
  string validation_type = 2;
  string applicant = 3;
  google.protobuf.Any data = 4;
  Organisation organisation = 5;
  string status = 6;
  bool approved = 7;
  int32 ts = 8;
  repeated Action actions = 9;
}

// Staff type without identities Reporter type
message Reporter {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string status = 4;
  repeated Email emails = 5;
  repeated PhoneNumber phones = 6;
  int64 ts = 7;
}

message Action {
  string id = 1;
  Reporter reporter = 2;
  string notes = 3;
  string status = 4;
  int32 ts = 5;
}

// Kyc type
message Kyc {
  string id = 1;
  Applicant applicant = 2;
  string status = 3;
  string vendor = 4;
  string created_at = 5;
  string updated_at = 6;
}


message Aml {
  string created_at = 1;
  string updated_at = 2;
  string title = 3;
  string person_id = 4;
  string first_name = 5;
  string last_name = 6;
  string middle_name = 7;
  string date_of_birth = 8;
  string email = 9;
  string nationality = 10;
  google.protobuf.Any reports = 11; // Excluded from customers on the public graph.
  string status = 12;
}

// Roava type
message Roava {}

// Cra type
message Cra {}

message Applicant {
  string application_id = 1;
  string applicant_id = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string dob = 6;
  Address address = 7;
  string vendor = 8;
}

// Country type
message Country {
  string countryId = 1;
  string capital = 2;
  string countryName = 3;
  string continent = 4;
  string dial = 5;
  string geoNameId = 6;
  string ISO4217CurrencyAlphabeticCode = 7;
  int32 ISO4217CurrencyNumericCode = 8;
  string isIndependent = 9;
  string languages = 10;
  string officialNameEnglish = 11;
  string deviceId = 12;
}

// Payee type
message Payee {
  string id = 1;
  string owner = 2;
  string name = 3;
  string avatar = 4;
  repeated payeeAccount accounts = 5;
  int64 ts = 6;
}

// Payees type
message Payees {
  repeated Payee payee = 1;
}

message payeeAccount {
  string id = 1;
  string name = 2;
  string currency = 3;
  string accountNumber = 4;
  string sortCode = 5;
  string iban = 6;
  string swiftBic = 7;
  string bankCode = 8;
  string routingNumber = 9;
  string phoneNumber = 10;
}

// Identity type
message Identity {
  string id = 1;
  string owner = 2;
  string nickname = 3;
  Organisation organisation = 4;
  string status = 5;
  bool active = 6;
  bool authentication = 7;
  repeated Device devices = 8;
  Credentials credentials = 9;
  int64 ts = 10;
}

// Identity type
message ExtendedIdentity {
  string id = 1;
  Person owner = 2;
  string nickname = 3;
  Organisation organisation = 4;
  string status = 5;
  bool active = 6;
  bool authentication = 7;
  repeated Device devices = 8;
  Credentials credentials = 9;
  int64 ts = 10;
}


// Credentials type
message Credentials {
  string identifier = 1;
  string refresh_token = 2;
}

// Organisation type
message Organisation {
  string id = 1;
  string name = 2;
  string keywords = 3;
  string description = 4;
  string domain = 5;
  string banner = 6;
  float revenue = 7;
  string language = 8;
  float raised = 9;
  string employees = 10;
  string email = 11;
  repeated Address addresses = 12;
  OrgLocation location = 13;
  repeated Industry industries = 14;
  Social social = 15;
  repeated ImageAssets image_assets = 16;
  repeated Identity identities = 17;
}

// OrgLocation type
message OrgLocation {
  string continent = 1;
  string country = 2;
  string state = 3;
  string city = 4;
  string country_code = 5;
}

// Industry type
message Industry {
  string id = 1;
  int64 code = 2;
  float score = 3;
  string  section = 4;
  string description = 5;
  string source = 6;
}

// Social type
message Social {
  string youtube = 1;
  string github = 2;
  string facebook = 3;
  string pinterest = 4;
  string instagram = 5;
  string linkedin = 6;
  string medium = 7;
  string crunchbase = 8;
  string twitter = 9;
}

// ImageAssets type
message ImageAssets {
  bool safe = 1;
  string type = 2;
  string image = 3;
  string svg = 4;
}

// AddressLookup type
message AddressLookup {
  string addressline1 = 1;
  string addressline2 = 2;
  string summaryline = 3;
  string organisation = 4;
  string buildingname = 5;
  string premise = 6;
  string street = 7;
  string dependentlocality = 8;
  string posttown = 9;
  string county = 10;
  string postcode = 11;
  string latitude = 12;
  string longitude = 13;
  string grideasting = 14;
  string gridnorthing = 15;
}

// Activity type
message Activity {
  string id = 1;
  string description = 2;
  int64 risk_weighting = 3;
  bool supported = 4;
  int64 archived = 5;
  int64 ts = 6;
}

// Product type
message ProductInput {
  string id = 1;
  string identification = 2;
  string scheme = 3;
}

// Roava Account type
message Account {
  string id = 1;
  string owner = 2;
  string product = 3;
  string name = 4;
  types.AccountData accountData = 5;
  repeated types.Transaction transactions = 6;
  bool active = 7;
  string status = 8;
  repeated Tag tags = 9;
  string image = 10;
  string organisation = 11;
  int32 ts = 12;
  types.AccountDetails AccountDetails = 13;
}

message Tag {
  string id = 1;
  string name = 2;
}

// AccountData type
message AccountData {
  string accountHolderKey = 1;
  string accountHolderType = 2;
  string accountState = 3;
  string accountType = 4;
  AccruedAmounts accruedAmounts = 5;
  int32 activationDate = 6;
  int32 approvedDate = 7;
  string assignedBranchKey = 8;
  string assignedCentreKey = 9;
  string assignedUserKey = 10;
  Balances balances = 11;
  string closedDate = 12;
  string creationDate = 13;
  string creditArrangementKey = 14;
  string currencyCode = 15;
  string encodedKey = 16;
  string id = 17;
  InterestSettings interestSettings = 18;
  InternalControls internalControls = 19;
  string lastAccountAppraisalDate = 20;
  string lastInterestCalculationDate = 21;
  string lastInterestStoredDate = 22;
  string lastModifiedDate = 23;
  string lastOverdraftInterestReviewDate = 24;
  string lastSetToArrearsDate = 25;
  repeated string linkedSettlementAccountKeys = 26;
  string lockedDate = 27;
  string maturityDate = 28;
  string migrationEventKey = 29;
  string name = 30;
  string notes = 31;
  OverdraftInterestSettings overdraftInterestSettings = 32;
  OverdraftSettings overdraftSettings = 33;
  string productTypeKey = 34;
  string withholdingTaxSourceKey = 35;
}

// AccountDetails type
message AccountDetails {
  string VirtualAccountID = 1;
  string Iban = 2;
  string AccountNumber = 3;
  string SortCode = 4;
  string SwiftBic = 5;
  string BankCode = 6;
  string RoutingNumber = 7;
}

// AccruedAmounts type
message AccruedAmounts  {
  double interestAccrued = 1;
  double overdraftInterestAccrued = 2;
  double technicalOverdraftInterestAccrued = 3;
}

// Balances type
message Balances {
  double availableBalance = 1;
  double blockedBalance = 2;
  double feesDue = 3;
  double forwardAvailableBalance = 4;
  double holdBalance = 5;
  double lockedBalance = 6;
  double overdraftAmount = 7;
  double overdraftInterestDue = 8;
  double technicalOverdraftAmount = 9;
  double technicalOverdraftInterestDue = 10;
  double totalBalance = 11;
}

// InterestSettings type
message InterestSettings {
  InterestPaymentSettings interestPaymentSettings = 1;
  InterestRateSettings interestRateSettings = 2;
  string daysInYear = 3;
  string interestCalculationBalance = 4;
  string indexSourceKey = 5;
  string chargeFrequency = 6;
  int32 chargeFrequencyCount = 7;
  int32 rateReviewCount = 8;
  string interestRateReviewUnit = 9;
  string rateSource = 10;
  string rateTerms = 11;
  InterestRate interestRate = 12;
  repeated RateTiers rateTiers = 13;
}

// InterestPaymentSettings type
message InterestPaymentSettings {
  repeated InterestPaymentDate interestPaymentDates = 1;
  string interestPaymentPoint = 2;
}

// InterestPaymentDate type
message InterestPaymentDate {
  int32 day = 1;
  int32 month = 2;
}

// InternalControls type
message InternalControls {
  double maxWithdrawalAmount = 1;
  double recommendedDepositAmount = 2;
  double targetAmount = 3;
}

// OverdraftInterestSettings type
message OverdraftInterestSettings {
  InterestRateSettings interestRateSettings = 1;
}

// InterestRateSettings type
message InterestRateSettings {
  string encodedKey = 1;
  string interestChargeFrequency = 2;
  int32 interestChargeFrequencyCount = 3;
  int32 interestRate = 4;
  int32 interestRateReviewCount = 5;
  string interestRateReviewUnit = 6;
  string interestRateSource = 7;
  string interestRateTerms = 8;
  repeated InterestRateTier interestRateTiers = 9;
  int32 interestSpread = 10;
}

// OverdraftSettings type
message OverdraftSettings {
  bool allowOverdraft = 1;
  int32 overdraftExpiryDate = 2;
  int32 overdraftLimit = 3;
}

// InterestRateTier type
message InterestRateTier {
  string encodedKey = 1;
  double endingBalance = 2;
  int32 endingDay = 3;
  double interestRate = 4;
}

// Product type
message Product {
  string id = 1;
  string identification = 2;
  string scheme = 3;
  ProductDetails details = 4;
}

// ProductDetails type
message ProductDetails {
  string category = 1;
  string type = 2;
  string name = 3;
  string state = 4;
  string currency = 5;
  string notes = 6;
  string creditRequirement = 7;
  bool withholdingTaxEnabled = 8;
  bool allowOffset = 9;
  repeated ProductTemplates productTemplates = 10;
  repeated ProductFees productFees = 11;
  ProductControl productControl = 12;
  ProductMaturity productMaturity = 13;
  OverdraftSetting overdraftSetting = 14;
  ProductInterestSetting interestSetting = 15;
  ProductSetting productSetting = 16;
}

// ProductControl type
message ProductControl {
  int64 dormancyPeriodDays = 1;
  int64 maxWithdrawalAmount = 2;
  int64 recommendedDepositAmount = 3;
  OpeningBalance openingBalance = 4;
}

// OpeningBalance type
message OpeningBalance {
  double defaultValue = 1;
  double max = 2;
  double min = 3;
}

// ProductFees type
message ProductFees {
  int64 amount = 1;
  string name = 2;
  string state = 3;
  string creationDate = 4;
  string encodedKey = 5;
  string feeApplication = 6;
  string lastModified = 7;
  string calculationMethod = 8;
  string applyDateMethod = 9;
  string trigger = 10;
  repeated AccountingRules accountingRules = 11;
}

// ProductTemplates type
message ProductTemplates {
  string name = 1;
  string type = 2;
  string creationDate = 3;
  string encodedKey = 4;
  string lastModifiedDate = 5;
}

// ProductMaturity type
message ProductMaturity {
  string unit = 1;
  int64 defaultValue = 2;
  int64 max = 3;
  int64 min = 4;
}

// OverdraftSetting type
message OverdraftSetting {
  bool allowOverdraft = 1;
  bool allowTechnicalOverdraft = 2;
  int64 maxLimit = 3;
  InterestSettings interestSettings = 4;
}

message ProductInterestSetting {
  bool collectInterestWhenLocked = 1;
  string daysInYear = 2;
  string interestCalculationBalance = 3;
  bool interestPaidIntoAccount = 4;
  string interestPaymentPoint = 5;
  double maximumBalance = 6;
  RateSetting rateSetting = 7;
  repeated InterestPaymentDate interestPaymentDates = 8;
}

message RateSetting {
  bool accrueAfterMaturity = 1;
  string indexSourceKey = 2;
  string chargeFrequency = 3;
  int64 chargeFrequencyCount = 4;
  string rateSource = 5;
  string rateTerms = 6;
  repeated RateTiers rateTiers = 7;
  InterestRate interestRate = 8;
}

message RateTiers {
  string encodedKey = 1;
  int64 endingBalance = 2;
  int64 endingDay = 3;
  int64 interestRate = 4;
}


message InterestRate {
  double defaultValue = 1;
  double maxValue = 2;
  double minValue = 3;
}

message ProductSetting {
  string accountingMethod = 1;
  string interestAccounting = 2;
  repeated AccountingRules accountingRules = 3;
}

message AccountingRules {
  string encoded_key = 1;
  string financialResource = 2;
  string glKey = 3;
}

// Transaction type
message Transaction {
  string id = 1;
  Account account = 2;
  int32 ts = 3;
  TransactionData transactionData = 4;
}

// TransactionData type
message TransactionData {
  string id = 1;
  double amount = 2;
  string bookingDate = 3;
  string creationDate = 4;
  string currencyCode = 5;
  string encodedKey = 6;
  string externalID = 7;
  string notes = 8;
  string parentAccountKey = 9;
  string paymentOrderID = 10;
  string type = 11;
  string userKey = 12;
  string valueDate = 13;
  TransferDetails transferDetails = 14;
  repeated TransactionFee fees = 15;
  AffectedAmounts affectedAmounts = 16;
  AccountBalances accountBalances = 17;
}

// AccountBalances type
message AccountBalances  {
  double totalBalance = 1;
}

// AffectedAmounts type
message AffectedAmounts {
  double feesAmount = 1;
  double fractionAmount = 2;
  double fundsAmount = 3;
  double interestAmount = 4;
  double overdraftAmount = 5;
  double overdraftFeesAmount = 6;
  double overdraftInterestAmount = 7;
  double technicalOverdraftAmount = 8;
  double technicalOverdraftInterestAmount = 9;
}

// TransferDetails type
message TransferDetails {
  string linkedLoanTransactionKey = 1;
}

// TransactionFee type
message TransactionFee {
  int32 Amount = 1;
  string Name = 2;
  string PredefinedFeeKey = 3;
  int32 TaxAmount = 4;
  string Trigger = 5;
}


// Staff type
message Staff {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string status = 4;
  repeated Email emails = 5;
  repeated PhoneNumber phones = 6;
  repeated ExtendedIdentity identities = 7;
  int64 ts = 8;
}

message Fx {
  string currency = 1;
  string baseCurrency = 2;
  float buyRate = 3;
  float sellRate = 4;
  int64 ts = 5;
}

message TransferFees {
  string currency = 1;
  string baseCurrency = 2;
  repeated Fee fees = 3;
  int64 ts = 4;
}

message Fee {
  float lowerBoundary = 1;
  float upperBoundary = 2;
  float fee = 3;
}

// Payment type
message Payment {
  string id = 1;
  string idempotency_key = 2;
  Person owner = 3;
  Source source = 4;
  int64 charge = 5;
  string reference =6;
  string status = 7;
  string image = 8;
  string notes = 9;
  repeated string tags = 10;
  Target target = 11;
  string currency = 12;
  float funding_amount = 13;
  string quote = 14;
  int64 ts = 15;
}

// Payments type
message Payments {
  repeated Payment payment = 1;
}

message Source {
  google.protobuf.Any account = 1;
  string currency = 2;
  double  amount = 3;
}

message Target {
  google.protobuf.Any account = 1;
  string currency = 2;
  double  amount = 3;
}

message Quote {
  string id = 1;
  bool has_expiry = 2;
  int64 expires = 3;
  Fee fee = 4;
  Fx fx = 5;
  int64 ts = 6;
}