// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"strconv"
)

type GraphQLResponse interface {
	IsGraphQLResponse()
}

type MeResult interface {
	IsMeResult()
}

type Aml struct {
	Organization *Organization `json:"organization"`
	Identifier   string        `json:"identifier"`
	File         *string       `json:"file"`
	Result       string        `json:"result"`
	PublicURL    *string       `json:"publicUrl"`
	Actions      []*AMLAction  `json:"actions"`
	Status       AMLStatuses   `json:"status"`
	StatusTs     int64         `json:"statusTs"`
	Ts           int64         `json:"ts"`
}

type AMLAction struct {
	Type         AMLActionTypes `json:"type"`
	Reporter     *Staff         `json:"reporter"`
	TargetStatus AMLStatuses    `json:"targetStatus"`
	Message      string         `json:"message"`
	Ts           int64          `json:"ts"`
}

type Acceptance struct {
	ID       string    `json:"id"`
	Content  *Content  `json:"content"`
	Customer *Customer `json:"customer"`
	Ts       int64     `json:"ts"`
}

type Account struct {
	ID            string           `json:"id"`
	Customer      *Customer        `json:"customer"`
	Product       *Product         `json:"product"`
	Name          string           `json:"name"`
	Iban          *string          `json:"iban"`
	AccountNumber *string          `json:"accountNumber"`
	Code          *string          `json:"code"`
	MaturityDate  *string          `json:"maturityDate"`
	Balances      *AccountBalances `json:"balances"`
	Mambu         *AccountMambu    `json:"mambu"`
	Fcmb          *AccountFcmb     `json:"fcmb"`
	Status        AccountStatuses  `json:"status"`
	StatusTs      int64            `json:"statusTs"`
	Ts            int64            `json:"ts"`
}

type AccountBalances struct {
	TotalBalance float64 `json:"totalBalance"`
}

type AccountConnection struct {
	Nodes      []*Account `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int64      `json:"totalCount"`
}

type AccountFcmb struct {
	NgnAccountNumber *string `json:"ngnAccountNumber"`
	CifID            *string `json:"cifId"`
}

type AccountInput struct {
	ProductID string `json:"productId"`
}

type AccountMambu struct {
	EncodedKey *string `json:"encodedKey"`
	BranchKey  *string `json:"branchKey"`
}

type Address struct {
	Primary    bool        `json:"primary"`
	Country    *Country    `json:"country"`
	State      *string     `json:"state"`
	City       *string     `json:"city"`
	Street     string      `json:"street"`
	Postcode   string      `json:"postcode"`
	Cordinates *Cordinates `json:"cordinates"`
}

type AddressConnection struct {
	Nodes      []*Address `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int64      `json:"totalCount"`
}

type AddressInput struct {
	CountryID  string           `json:"countryId"`
	State      *string          `json:"state"`
	City       *string          `json:"city"`
	Street     string           `json:"street"`
	Postcode   string           `json:"postcode"`
	Cordinates *CordinatesInput `json:"cordinates"`
}

type AnswerInput struct {
	ID     string  `json:"id"`
	Answer *string `json:"answer"`
	// An array of IDs of the predefined answers chosen.
	PredefinedAnswers []string `json:"predefinedAnswers"`
}

type AuthInput struct {
	Email            string `json:"email"`
	Password         string `json:"password"`
	DeviceIdentifier string `json:"deviceIdentifier"`
}

type AuthResponse struct {
	Message *string     `json:"message"`
	Success bool        `json:"success"`
	Code    int64       `json:"code"`
	Tokens  *AuthTokens `json:"tokens"`
}

func (AuthResponse) IsGraphQLResponse() {}

type AuthTokens struct {
	Auth    string  `json:"auth"`
	Refresh *string `json:"refresh"`
}

type Bank struct {
	ID            string `json:"id"`
	BankCode      string `json:"bankCode"`
	BankName      string `json:"bankName"`
	BankShortName string `json:"bankShortName"`
	Active        bool   `json:"active"`
	Ts            int64  `json:"ts"`
}

type BankConnection struct {
	Nodes      []*Bank   `json:"nodes"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int64     `json:"totalCount"`
}

type Beneficiary struct {
	ID       string                `json:"id"`
	Customer *Customer             `json:"customer"`
	Name     string                `json:"name"`
	Accounts []*BeneficiaryAccount `json:"accounts"`
	Status   BeneficiaryStatuses   `json:"status"`
	StatusTs int64                 `json:"statusTs"`
	Ts       int64                 `json:"ts"`
}

type BeneficiaryAccount struct {
	ID            string                     `json:"id"`
	Beneficiary   *Beneficiary               `json:"beneficiary"`
	Name          *string                    `json:"name"`
	Account       *Account                   `json:"account"`
	Currency      *Currency                  `json:"currency"`
	AccountNumber string                     `json:"accountNumber"`
	Code          string                     `json:"code"`
	Status        BeneficiaryAccountStatuses `json:"status"`
	StatusTs      int64                      `json:"statusTs"`
	Ts            int64                      `json:"ts"`
}

type BeneficiaryAccountInput struct {
	Name          *string `json:"name"`
	CurrencyID    string  `json:"currencyId"`
	AccountNumber string  `json:"accountNumber"`
	Code          string  `json:"code"`
}

type BeneficiaryByPhoneInput struct {
	Phone string `json:"phone"`
	Name  string `json:"name"`
}

type BeneficiaryConnection struct {
	Nodes      []*Beneficiary `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int64          `json:"totalCount"`
}

type BeneficiaryInput struct {
	Name    string                   `json:"name"`
	Account *BeneficiaryAccountInput `json:"account"`
}

type Cdd struct {
	ID       string      `json:"id"`
	Customer *Customer   `json:"customer"`
	Amls     []*Aml      `json:"amls"`
	Kycs     []*Kyc      `json:"kycs"`
	Poas     []*Poa      `json:"poas"`
	Status   CDDStatuses `json:"status"`
	StatusTs int64       `json:"statusTs"`
	Ts       int64       `json:"ts"`
}

type CDDConnection struct {
	Nodes      []*Cdd    `json:"nodes"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int64     `json:"totalCount"`
}

type CDDInput struct {
	Kyc *KYCInput `json:"kyc"`
	Aml bool      `json:"aml"`
	Poa *POAInput `json:"poa"`
}

type CheckCustomerDataInput struct {
	Email            string `json:"email"`
	FirstName        string `json:"firstName"`
	LastName         string `json:"lastName"`
	Dob              string `json:"dob"`
	AccountNumber    string `json:"accountNumber"`
	SortCode         string `json:"sortCode"`
	DeviceIdentifier string `json:"deviceIdentifier"`
}

type CommonQueryFilterInput struct {
	ID         *string `json:"id"`
	CustomerID *string `json:"customerId"`
	Last       *bool   `json:"last"`
}

type Content struct {
	ID   string      `json:"id"`
	Type ContentType `json:"type"`
	Link *string     `json:"link"`
	Ts   int64       `json:"ts"`
}

type ContentConnection struct {
	Nodes      []*Content `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int64      `json:"totalCount"`
}

type Cordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type CordinatesInput struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type Country struct {
	ID         string `json:"id"`
	CodeAlpha2 string `json:"codeAlpha2"`
	CodeAlpha3 string `json:"codeAlpha3"`
	Name       string `json:"name"`
}

type CountryConnection struct {
	Nodes      []*Country `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int64      `json:"totalCount"`
}

type Currency struct {
	ID     string `json:"id"`
	Symbol string `json:"symbol"`
	Code   string `json:"code"`
	Name   string `json:"name"`
}

type CurrencyConnection struct {
	Nodes      []*Currency `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int64       `json:"totalCount"`
}

type Customer struct {
	ID        string           `json:"id"`
	Title     CustomerTitle    `json:"title"`
	FirstName string           `json:"firstName"`
	LastName  string           `json:"lastName"`
	Dob       string           `json:"dob"`
	Bvn       *string          `json:"bvn"`
	Addresses []*Address       `json:"addresses"`
	Phones    []*Phone         `json:"phones"`
	Email     *Email           `json:"email"`
	Status    CustomerStatuses `json:"status"`
	StatusTs  int64            `json:"statusTs"`
	Ts        int64            `json:"ts"`
}

func (Customer) IsMeResult() {}

type CustomerConnection struct {
	Nodes      []*Customer `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int64       `json:"totalCount"`
}

type CustomerDetailsInput struct {
	Title     CustomerTitle `json:"title"`
	FirstName string        `json:"firstName"`
	LastName  string        `json:"lastName"`
	Dob       string        `json:"dob"`
	Address   *AddressInput `json:"address"`
}

type CustomerDetailsUpdateInput struct {
	FirstName *string       `json:"firstName"`
	LastName  *string       `json:"lastName"`
	Phone     *string       `json:"phone"`
	Email     *string       `json:"email"`
	Address   *AddressInput `json:"address"`
}

type CustomerInput struct {
	Phone         string       `json:"phone"`
	Email         string       `json:"email"`
	LoginPassword string       `json:"loginPassword"`
	Device        *DeviceInput `json:"device"`
}

type Device struct {
	ID          string               `json:"id"`
	Customer    *Customer            `json:"customer"`
	Identifier  string               `json:"identifier"`
	Os          string               `json:"os"`
	Brand       string               `json:"brand"`
	Tokens      []*DeviceToken       `json:"tokens"`
	Preferences []*DevicePreferences `json:"preferences"`
	Status      DeviceStatuses       `json:"status"`
	StatusTs    int64                `json:"statusTs"`
	Ts          int64                `json:"ts"`
}

type DeviceInput struct {
	Identifier  string                    `json:"identifier"`
	Os          string                    `json:"os"`
	Brand       string                    `json:"brand"`
	Tokens      []*DeviceTokenInput       `json:"tokens"`
	Preferences []*DevicePreferencesInput `json:"preferences"`
}

type DevicePreferences struct {
	Type  DevicePreferencesTypes `json:"type"`
	Value bool                   `json:"value"`
}

type DevicePreferencesInput struct {
	Type  DevicePreferencesTypes `json:"type"`
	Value bool                   `json:"value"`
}

type DeviceToken struct {
	Type  DeviceTokenTypes `json:"type"`
	Value string           `json:"value"`
}

type DeviceTokenInput struct {
	Type  DeviceTokenTypes `json:"type"`
	Value string           `json:"value"`
}

type Email struct {
	Address  string `json:"address"`
	Verified bool   `json:"verified"`
}

type ExchangeRate struct {
	ID             string    `json:"id"`
	BaseCurrency   *Currency `json:"baseCurrency"`
	TargetCurrency *Currency `json:"targetCurrency"`
	BuyPrice       float64   `json:"buyPrice"`
	SalePrice      float64   `json:"salePrice"`
	Ts             int64     `json:"ts"`
}

type Fee struct {
	ID              string           `json:"id"`
	TransactionType *TransactionType `json:"transactionType"`
	Type            FeeTypes         `json:"type"`
	Boundaries      []*FeeBoundaries `json:"boundaries"`
	Status          FeeStatuses      `json:"status"`
	StatusTs        int64            `json:"statusTs"`
	Ts              int64            `json:"ts"`
}

type FeeBoundaries struct {
	Lower      *float64 `json:"lower"`
	Upper      *float64 `json:"upper"`
	Amount     *float64 `json:"amount"`
	Percentage *float64 `json:"percentage"`
}

type Identity struct {
	ID           string                 `json:"id"`
	Customer     *Customer              `json:"customer"`
	Organization *Organization          `json:"organization"`
	Credentials  []*IdentityCredentials `json:"credentials"`
	Status       IdentityStatuses       `json:"status"`
	StatusTs     int64                  `json:"statusTs"`
	Ts           int64                  `json:"ts"`
}

type IdentityCredentials struct {
	Type     IdentityCredentialsTypes    `json:"type"`
	Password string                      `json:"password"`
	Status   IdentityCredentialsStatuses `json:"status"`
	StatusTs int64                       `json:"statusTs"`
	Ts       int64                       `json:"ts"`
	UpdateTs int64                       `json:"updateTs"`
}

type Kyc struct {
	Organization *Organization `json:"organization"`
	Identifier   string        `json:"identifier"`
	PublicURL    *string       `json:"publicUrl"`
	Reports      []*Reports    `json:"reports"`
	Actions      []*KYCAction  `json:"actions"`
	Status       KYCStatuses   `json:"status"`
	StatusTs     int64         `json:"statusTs"`
	Ts           int64         `json:"ts"`
}

type KYCAction struct {
	Type         KYCActionTypes `json:"type"`
	Reporter     *Staff         `json:"reporter"`
	TargetStatus KYCStatuses    `json:"targetStatus"`
	Message      string         `json:"message"`
	Ts           int64          `json:"ts"`
}

type KYCInput struct {
	ReportTypes []KYCTypes `json:"reportTypes"`
}

type LinkedTransaction struct {
	ID       string                    `json:"id"`
	Type     LinkedTransactionTypes    `json:"type"`
	Currency *Currency                 `json:"currency"`
	Amount   float64                   `json:"amount"`
	Source   *LinkedTransactionSource  `json:"source"`
	Target   *LinkedTransactionTarget  `json:"target"`
	Mambu    *LinkedTransactionMambu   `json:"mambu"`
	Fcmb     *LinkedTransactionFcmb    `json:"fcmb"`
	Status   LinkedTransactionStatuses `json:"status"`
	StatusTs int64                     `json:"statusTs"`
	Ts       int64                     `json:"ts"`
}

type LinkedTransactionFcmb struct {
	TransactionIdentifier string `json:"transactionIdentifier"`
}

type LinkedTransactionMambu struct {
	TransactionEncodedKey string `json:"transactionEncodedKey"`
}

type LinkedTransactionSource struct {
	Customer    *Customer `json:"customer"`
	Account     *Account  `json:"account"`
	AccountData string    `json:"accountData"`
}

type LinkedTransactionTarget struct {
	Account            *Account            `json:"account"`
	BeneficiaryAccount *BeneficiaryAccount `json:"beneficiaryAccount"`
	AccountData        string              `json:"accountData"`
}

type Organization struct {
	ID       string               `json:"id"`
	Name     string               `json:"name"`
	Status   OrganizationStatuses `json:"status"`
	StatusTs int64                `json:"statusTs"`
	Ts       int64                `json:"ts"`
}

type Poa struct {
	Organization *Organization `json:"organization"`
	Identifier   string        `json:"identifier"`
	File         *string       `json:"file"`
	Result       *string       `json:"result"`
	Review       *Review       `json:"review"`
	Actions      []*POAAction  `json:"actions"`
	Status       POAStatuses   `json:"status"`
	StatusTs     int64         `json:"statusTs"`
	Ts           int64         `json:"ts"`
}

type POAAction struct {
	Type         POAActionTypes `json:"type"`
	Reporter     *Staff         `json:"reporter"`
	TargetStatus POAStatuses    `json:"targetStatus"`
	Message      string         `json:"message"`
	Ts           int64          `json:"ts"`
}

type POAInput struct {
	Data string `json:"data"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type Phone struct {
	Primary  bool   `json:"primary"`
	Number   string `json:"number"`
	Verified bool   `json:"verified"`
}

type Product struct {
	ID                    string          `json:"id"`
	Type                  ProductTypes    `json:"type"`
	Currency              *Currency       `json:"currency"`
	Name                  *string         `json:"name"`
	TermLength            *int64          `json:"termLength"`
	InterestRate          *float64        `json:"interestRate"`
	MinimumOpeningBalance *float64        `json:"minimumOpeningBalance"`
	Mambu                 *ProductMambu   `json:"mambu"`
	Status                ProductStatuses `json:"status"`
	StatusTs              int64           `json:"statusTs"`
	Ts                    int64           `json:"ts"`
}

type ProductConnection struct {
	Nodes      []*Product `json:"nodes"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int64      `json:"totalCount"`
}

type ProductMambu struct {
	EncodedKey *string `json:"encodedKey"`
}

type Questionary struct {
	ID   string           `json:"id"`
	Type QuestionaryTypes `json:"type"`
	// An array of different questions related to the current questionary.
	Questions []*QuestionaryQuestion `json:"questions"`
	Status    QuestionaryStatuses    `json:"status"`
	StatusTs  int64                  `json:"statusTs"`
	Ts        int64                  `json:"ts"`
}

type QuestionaryAnswer struct {
	ID            string `json:"id"`
	QuestionaryID string `json:"questionaryId"`
	CustomerID    string `json:"customerId"`
	// An array of the responses for the questions related to current questionary.
	Questions []*QuestionaryAnswerQuestion `json:"questions"`
	Ts        int64                        `json:"ts"`
}

type QuestionaryAnswerInput struct {
	ID string `json:"id"`
	// An array of the responses for the questions related to current questionary.
	Answers []*AnswerInput `json:"answers"`
}

type QuestionaryAnswerQuestion struct {
	ID     string  `json:"id"`
	Answer *string `json:"answer"`
	// An array of IDs of the predefined answers chosen.
	PredefinedAnswers []string `json:"predefinedAnswers"`
}

type QuestionaryConnection struct {
	Nodes      []*Questionary `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int64          `json:"totalCount"`
}

type QuestionaryPredefinedAnswer struct {
	ID    string `json:"id"`
	Value string `json:"value"`
}

type QuestionaryQuestion struct {
	ID    string `json:"id"`
	Value string `json:"value"`
	// An array of predefined answers for the current question.
	// *not required
	PredefinedAnswers []*QuestionaryPredefinedAnswer `json:"predefinedAnswers"`
	// If true the question must be answered.
	Required bool `json:"required"`
	// If true the question can be answered with multiple values from the predefined answers.
	MultipleOptions bool `json:"multipleOptions"`
}

type Reports struct {
	Identifier string         `json:"identifier"`
	Type       KYCTypes       `json:"type"`
	File       *string        `json:"file"`
	Result     *string        `json:"result"`
	SubResult  *string        `json:"subResult"`
	PublicURL  *string        `json:"publicUrl"`
	Review     *Review        `json:"review"`
	Status     ReportStatuses `json:"status"`
	StatusTs   int64          `json:"statusTs"`
	Ts         int64          `json:"ts"`
}

type Response struct {
	Message *string `json:"message"`
	Success bool    `json:"success"`
	Code    int64   `json:"code"`
}

func (Response) IsGraphQLResponse() {}

type Review struct {
	Resubmit bool    `json:"resubmit"`
	Message  *string `json:"message"`
	Ts       int64   `json:"ts"`
}

type Staff struct {
	ID        string        `json:"id"`
	Name      string        `json:"name"`
	LastName  string        `json:"lastName"`
	Dob       *string       `json:"dob"`
	Addresses []*Address    `json:"addresses"`
	Phones    []*Phone      `json:"phones"`
	Email     string        `json:"email"`
	Status    StaffStatuses `json:"status"`
	StatusTs  int64         `json:"statusTs"`
	Ts        int64         `json:"ts"`
}

func (Staff) IsMeResult() {}

type TokenResponse struct {
	Message *string `json:"message"`
	Success bool    `json:"success"`
	Code    int64   `json:"code"`
	Token   string  `json:"token"`
}

func (TokenResponse) IsGraphQLResponse() {}

type Transaction struct {
	ID                 string               `json:"id"`
	TransactionType    *TransactionType     `json:"transactionType"`
	Reference          string               `json:"reference"`
	Fees               []*TransactionFee    `json:"fees"`
	ExchangeRate       *ExchangeRate        `json:"exchangeRate"`
	Source             *TransactionSource   `json:"source"`
	Target             *TransactionTarget   `json:"target"`
	IdempotencyKey     string               `json:"idempotencyKey"`
	LinkedTransactions []*LinkedTransaction `json:"linkedTransactions"`
	Status             TransactionStatuses  `json:"status"`
	StatusTs           int64                `json:"statusTs"`
	Ts                 int64                `json:"ts"`
}

type TransactionConnection struct {
	Nodes      []*Transaction `json:"nodes"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int64          `json:"totalCount"`
}

type TransactionFee struct {
	ID     string  `json:"id"`
	Amount float64 `json:"amount"`
}

type TransactionInput struct {
	TransactionTypeID string   `json:"transactionTypeId"`
	Reference         *string  `json:"reference"`
	FeeIds            []string `json:"feeIds"`
	ExchangeRateID    *string  `json:"exchangeRateId"`
	Amount            float64  `json:"amount"`
	SourceAccountID   string   `json:"sourceAccountId"`
	TargetAccountID   string   `json:"targetAccountId"`
	IdempotencyKey    string   `json:"idempotencyKey"`
}

type TransactionSource struct {
	Customer                *Customer `json:"customer"`
	Account                 *Account  `json:"account"`
	Amount                  float64   `json:"amount"`
	BalanceAfterTransaction float64   `json:"balanceAfterTransaction"`
}

type TransactionTarget struct {
	Customer                *Customer           `json:"customer"`
	Beneficiary             *Beneficiary        `json:"beneficiary"`
	Account                 *Account            `json:"account"`
	BeneficiaryAccount      *BeneficiaryAccount `json:"beneficiaryAccount"`
	Amount                  float64             `json:"amount"`
	BalanceAfterTransaction float64             `json:"balanceAfterTransaction"`
}

type TransactionType struct {
	ID       string                  `json:"id"`
	Name     string                  `json:"name"`
	Status   TransactionTypeStatuses `json:"status"`
	StatusTs int64                   `json:"statusTs"`
	Ts       int64                   `json:"ts"`
}

type TransactionTypeConnection struct {
	Nodes      []*TransactionType `json:"nodes"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	TotalCount int64              `json:"totalCount"`
}

type VaultAccountInput struct {
	ProductID     string  `json:"productId"`
	SourceAccount string  `json:"sourceAccount"`
	Amount        float64 `json:"amount"`
	Name          *string `json:"name"`
}

type AMLActionTypes string

const (
	AMLActionTypesChangeStatus AMLActionTypes = "CHANGE_STATUS"
)

var AllAMLActionTypes = []AMLActionTypes{
	AMLActionTypesChangeStatus,
}

func (e AMLActionTypes) IsValid() bool {
	switch e {
	case AMLActionTypesChangeStatus:
		return true
	}
	return false
}

func (e AMLActionTypes) String() string {
	return string(e)
}

func (e *AMLActionTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AMLActionTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AMLActionTypes", str)
	}
	return nil
}

func (e AMLActionTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AMLStatuses string

const (
	AMLStatusesPending      AMLStatuses = "PENDING"
	AMLStatusesManualReview AMLStatuses = "MANUAL_REVIEW"
	AMLStatusesApproved     AMLStatuses = "APPROVED"
	AMLStatusesDeclined     AMLStatuses = "DECLINED"
)

var AllAMLStatuses = []AMLStatuses{
	AMLStatusesPending,
	AMLStatusesManualReview,
	AMLStatusesApproved,
	AMLStatusesDeclined,
}

func (e AMLStatuses) IsValid() bool {
	switch e {
	case AMLStatusesPending, AMLStatusesManualReview, AMLStatusesApproved, AMLStatusesDeclined:
		return true
	}
	return false
}

func (e AMLStatuses) String() string {
	return string(e)
}

func (e *AMLStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AMLStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AMLStatuses", str)
	}
	return nil
}

func (e AMLStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountStatuses string

const (
	AccountStatusesActive   AccountStatuses = "ACTIVE"
	AccountStatusesPending  AccountStatuses = "PENDING"
	AccountStatusesInactive AccountStatuses = "INACTIVE"
)

var AllAccountStatuses = []AccountStatuses{
	AccountStatusesActive,
	AccountStatusesPending,
	AccountStatusesInactive,
}

func (e AccountStatuses) IsValid() bool {
	switch e {
	case AccountStatusesActive, AccountStatusesPending, AccountStatusesInactive:
		return true
	}
	return false
}

func (e AccountStatuses) String() string {
	return string(e)
}

func (e *AccountStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatuses", str)
	}
	return nil
}

func (e AccountStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthType string

const (
	AuthTypeGoogle AuthType = "GOOGLE"
)

var AllAuthType = []AuthType{
	AuthTypeGoogle,
}

func (e AuthType) IsValid() bool {
	switch e {
	case AuthTypeGoogle:
		return true
	}
	return false
}

func (e AuthType) String() string {
	return string(e)
}

func (e *AuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}

func (e AuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BeneficiaryAccountStatuses string

const (
	BeneficiaryAccountStatusesActive   BeneficiaryAccountStatuses = "ACTIVE"
	BeneficiaryAccountStatusesInactive BeneficiaryAccountStatuses = "INACTIVE"
)

var AllBeneficiaryAccountStatuses = []BeneficiaryAccountStatuses{
	BeneficiaryAccountStatusesActive,
	BeneficiaryAccountStatusesInactive,
}

func (e BeneficiaryAccountStatuses) IsValid() bool {
	switch e {
	case BeneficiaryAccountStatusesActive, BeneficiaryAccountStatusesInactive:
		return true
	}
	return false
}

func (e BeneficiaryAccountStatuses) String() string {
	return string(e)
}

func (e *BeneficiaryAccountStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BeneficiaryAccountStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BeneficiaryAccountStatuses", str)
	}
	return nil
}

func (e BeneficiaryAccountStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BeneficiaryStatuses string

const (
	BeneficiaryStatusesActive   BeneficiaryStatuses = "ACTIVE"
	BeneficiaryStatusesInactive BeneficiaryStatuses = "INACTIVE"
)

var AllBeneficiaryStatuses = []BeneficiaryStatuses{
	BeneficiaryStatusesActive,
	BeneficiaryStatusesInactive,
}

func (e BeneficiaryStatuses) IsValid() bool {
	switch e {
	case BeneficiaryStatusesActive, BeneficiaryStatusesInactive:
		return true
	}
	return false
}

func (e BeneficiaryStatuses) String() string {
	return string(e)
}

func (e *BeneficiaryStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BeneficiaryStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BeneficiaryStatuses", str)
	}
	return nil
}

func (e BeneficiaryStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CDDStatuses string

const (
	CDDStatusesPending      CDDStatuses = "PENDING"
	CDDStatusesManualReview CDDStatuses = "MANUAL_REVIEW"
	CDDStatusesApproved     CDDStatuses = "APPROVED"
	CDDStatusesDeclined     CDDStatuses = "DECLINED"
)

var AllCDDStatuses = []CDDStatuses{
	CDDStatusesPending,
	CDDStatusesManualReview,
	CDDStatusesApproved,
	CDDStatusesDeclined,
}

func (e CDDStatuses) IsValid() bool {
	switch e {
	case CDDStatusesPending, CDDStatusesManualReview, CDDStatusesApproved, CDDStatusesDeclined:
		return true
	}
	return false
}

func (e CDDStatuses) String() string {
	return string(e)
}

func (e *CDDStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CDDStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CDDStatuses", str)
	}
	return nil
}

func (e CDDStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentType string

const (
	ContentTypeGeneralTc      ContentType = "GENERAL_TC"
	ContentTypeGbpAccountTc   ContentType = "GBP_ACCOUNT_TC"
	ContentTypeNgnAccountTc   ContentType = "NGN_ACCOUNT_TC"
	ContentTypeVaultAccountTc ContentType = "VAULT_ACCOUNT_TC"
	ContentTypePrivacyNotice  ContentType = "PRIVACY_NOTICE"
	ContentTypeFeesLimits     ContentType = "FEES_LIMITS"
)

var AllContentType = []ContentType{
	ContentTypeGeneralTc,
	ContentTypeGbpAccountTc,
	ContentTypeNgnAccountTc,
	ContentTypeVaultAccountTc,
	ContentTypePrivacyNotice,
	ContentTypeFeesLimits,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypeGeneralTc, ContentTypeGbpAccountTc, ContentTypeNgnAccountTc, ContentTypeVaultAccountTc, ContentTypePrivacyNotice, ContentTypeFeesLimits:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerStatuses string

const (
	CustomerStatusesSignedup   CustomerStatuses = "SIGNEDUP"
	CustomerStatusesRegistered CustomerStatuses = "REGISTERED"
	CustomerStatusesVerified   CustomerStatuses = "VERIFIED"
	CustomerStatusesOnboarded  CustomerStatuses = "ONBOARDED"
	CustomerStatusesRejected   CustomerStatuses = "REJECTED"
	CustomerStatusesExited     CustomerStatuses = "EXITED"
)

var AllCustomerStatuses = []CustomerStatuses{
	CustomerStatusesSignedup,
	CustomerStatusesRegistered,
	CustomerStatusesVerified,
	CustomerStatusesOnboarded,
	CustomerStatusesRejected,
	CustomerStatusesExited,
}

func (e CustomerStatuses) IsValid() bool {
	switch e {
	case CustomerStatusesSignedup, CustomerStatusesRegistered, CustomerStatusesVerified, CustomerStatusesOnboarded, CustomerStatusesRejected, CustomerStatusesExited:
		return true
	}
	return false
}

func (e CustomerStatuses) String() string {
	return string(e)
}

func (e *CustomerStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerStatuses", str)
	}
	return nil
}

func (e CustomerStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerTitle string

const (
	CustomerTitleMr   CustomerTitle = "MR"
	CustomerTitleMrs  CustomerTitle = "MRS"
	CustomerTitleMiss CustomerTitle = "MISS"
	CustomerTitleMs   CustomerTitle = "MS"
)

var AllCustomerTitle = []CustomerTitle{
	CustomerTitleMr,
	CustomerTitleMrs,
	CustomerTitleMiss,
	CustomerTitleMs,
}

func (e CustomerTitle) IsValid() bool {
	switch e {
	case CustomerTitleMr, CustomerTitleMrs, CustomerTitleMiss, CustomerTitleMs:
		return true
	}
	return false
}

func (e CustomerTitle) String() string {
	return string(e)
}

func (e *CustomerTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerTitle", str)
	}
	return nil
}

func (e CustomerTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryMode string

const (
	DeliveryModeEmail DeliveryMode = "EMAIL"
	DeliveryModeSms   DeliveryMode = "SMS"
	DeliveryModePush  DeliveryMode = "PUSH"
)

var AllDeliveryMode = []DeliveryMode{
	DeliveryModeEmail,
	DeliveryModeSms,
	DeliveryModePush,
}

func (e DeliveryMode) IsValid() bool {
	switch e {
	case DeliveryModeEmail, DeliveryModeSms, DeliveryModePush:
		return true
	}
	return false
}

func (e DeliveryMode) String() string {
	return string(e)
}

func (e *DeliveryMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMode", str)
	}
	return nil
}

func (e DeliveryMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DevicePreferencesTypes string

const (
	DevicePreferencesTypesPush       DevicePreferencesTypes = "PUSH"
	DevicePreferencesTypesBiometrics DevicePreferencesTypes = "BIOMETRICS"
)

var AllDevicePreferencesTypes = []DevicePreferencesTypes{
	DevicePreferencesTypesPush,
	DevicePreferencesTypesBiometrics,
}

func (e DevicePreferencesTypes) IsValid() bool {
	switch e {
	case DevicePreferencesTypesPush, DevicePreferencesTypesBiometrics:
		return true
	}
	return false
}

func (e DevicePreferencesTypes) String() string {
	return string(e)
}

func (e *DevicePreferencesTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DevicePreferencesTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DevicePreferencesTypes", str)
	}
	return nil
}

func (e DevicePreferencesTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceStatuses string

const (
	DeviceStatusesActive   DeviceStatuses = "ACTIVE"
	DeviceStatusesInactive DeviceStatuses = "INACTIVE"
)

var AllDeviceStatuses = []DeviceStatuses{
	DeviceStatusesActive,
	DeviceStatusesInactive,
}

func (e DeviceStatuses) IsValid() bool {
	switch e {
	case DeviceStatusesActive, DeviceStatusesInactive:
		return true
	}
	return false
}

func (e DeviceStatuses) String() string {
	return string(e)
}

func (e *DeviceStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceStatuses", str)
	}
	return nil
}

func (e DeviceStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceTokenTypes string

const (
	DeviceTokenTypesFirebase DeviceTokenTypes = "FIREBASE"
)

var AllDeviceTokenTypes = []DeviceTokenTypes{
	DeviceTokenTypesFirebase,
}

func (e DeviceTokenTypes) IsValid() bool {
	switch e {
	case DeviceTokenTypesFirebase:
		return true
	}
	return false
}

func (e DeviceTokenTypes) String() string {
	return string(e)
}

func (e *DeviceTokenTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceTokenTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceTokenTypes", str)
	}
	return nil
}

func (e DeviceTokenTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FeeStatuses string

const (
	FeeStatusesActive   FeeStatuses = "ACTIVE"
	FeeStatusesInactive FeeStatuses = "INACTIVE"
)

var AllFeeStatuses = []FeeStatuses{
	FeeStatusesActive,
	FeeStatusesInactive,
}

func (e FeeStatuses) IsValid() bool {
	switch e {
	case FeeStatusesActive, FeeStatusesInactive:
		return true
	}
	return false
}

func (e FeeStatuses) String() string {
	return string(e)
}

func (e *FeeStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeeStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeeStatuses", str)
	}
	return nil
}

func (e FeeStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FeeTypes string

const (
	FeeTypesFixed    FeeTypes = "FIXED"
	FeeTypesVariable FeeTypes = "VARIABLE"
)

var AllFeeTypes = []FeeTypes{
	FeeTypesFixed,
	FeeTypesVariable,
}

func (e FeeTypes) IsValid() bool {
	switch e {
	case FeeTypesFixed, FeeTypesVariable:
		return true
	}
	return false
}

func (e FeeTypes) String() string {
	return string(e)
}

func (e *FeeTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeeTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeeTypes", str)
	}
	return nil
}

func (e FeeTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IdentityCredentialsStatuses string

const (
	IdentityCredentialsStatusesActive   IdentityCredentialsStatuses = "ACTIVE"
	IdentityCredentialsStatusesInactive IdentityCredentialsStatuses = "INACTIVE"
)

var AllIdentityCredentialsStatuses = []IdentityCredentialsStatuses{
	IdentityCredentialsStatusesActive,
	IdentityCredentialsStatusesInactive,
}

func (e IdentityCredentialsStatuses) IsValid() bool {
	switch e {
	case IdentityCredentialsStatusesActive, IdentityCredentialsStatusesInactive:
		return true
	}
	return false
}

func (e IdentityCredentialsStatuses) String() string {
	return string(e)
}

func (e *IdentityCredentialsStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityCredentialsStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityCredentialsStatuses", str)
	}
	return nil
}

func (e IdentityCredentialsStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IdentityCredentialsTypes string

const (
	IdentityCredentialsTypesLogin IdentityCredentialsTypes = "LOGIN"
	IdentityCredentialsTypesPin   IdentityCredentialsTypes = "PIN"
)

var AllIdentityCredentialsTypes = []IdentityCredentialsTypes{
	IdentityCredentialsTypesLogin,
	IdentityCredentialsTypesPin,
}

func (e IdentityCredentialsTypes) IsValid() bool {
	switch e {
	case IdentityCredentialsTypesLogin, IdentityCredentialsTypesPin:
		return true
	}
	return false
}

func (e IdentityCredentialsTypes) String() string {
	return string(e)
}

func (e *IdentityCredentialsTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityCredentialsTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityCredentialsTypes", str)
	}
	return nil
}

func (e IdentityCredentialsTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IdentityStatuses string

const (
	IdentityStatusesActive   IdentityStatuses = "ACTIVE"
	IdentityStatusesInactive IdentityStatuses = "INACTIVE"
)

var AllIdentityStatuses = []IdentityStatuses{
	IdentityStatusesActive,
	IdentityStatusesInactive,
}

func (e IdentityStatuses) IsValid() bool {
	switch e {
	case IdentityStatusesActive, IdentityStatusesInactive:
		return true
	}
	return false
}

func (e IdentityStatuses) String() string {
	return string(e)
}

func (e *IdentityStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityStatuses", str)
	}
	return nil
}

func (e IdentityStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KYCActionTypes string

const (
	KYCActionTypesChangeStatus KYCActionTypes = "CHANGE_STATUS"
)

var AllKYCActionTypes = []KYCActionTypes{
	KYCActionTypesChangeStatus,
}

func (e KYCActionTypes) IsValid() bool {
	switch e {
	case KYCActionTypesChangeStatus:
		return true
	}
	return false
}

func (e KYCActionTypes) String() string {
	return string(e)
}

func (e *KYCActionTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KYCActionTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KYCActionTypes", str)
	}
	return nil
}

func (e KYCActionTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KYCStatuses string

const (
	KYCStatusesPending      KYCStatuses = "PENDING"
	KYCStatusesManualReview KYCStatuses = "MANUAL_REVIEW"
	KYCStatusesApproved     KYCStatuses = "APPROVED"
	KYCStatusesDeclined     KYCStatuses = "DECLINED"
)

var AllKYCStatuses = []KYCStatuses{
	KYCStatusesPending,
	KYCStatusesManualReview,
	KYCStatusesApproved,
	KYCStatusesDeclined,
}

func (e KYCStatuses) IsValid() bool {
	switch e {
	case KYCStatusesPending, KYCStatusesManualReview, KYCStatusesApproved, KYCStatusesDeclined:
		return true
	}
	return false
}

func (e KYCStatuses) String() string {
	return string(e)
}

func (e *KYCStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KYCStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KYCStatuses", str)
	}
	return nil
}

func (e KYCStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KYCTypes string

const (
	KYCTypesFacialVideo KYCTypes = "FACIAL_VIDEO"
	KYCTypesDocument    KYCTypes = "DOCUMENT"
)

var AllKYCTypes = []KYCTypes{
	KYCTypesFacialVideo,
	KYCTypesDocument,
}

func (e KYCTypes) IsValid() bool {
	switch e {
	case KYCTypesFacialVideo, KYCTypesDocument:
		return true
	}
	return false
}

func (e KYCTypes) String() string {
	return string(e)
}

func (e *KYCTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KYCTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KYCTypes", str)
	}
	return nil
}

func (e KYCTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LinkedTransactionStatuses string

const (
	LinkedTransactionStatusesPending  LinkedTransactionStatuses = "PENDING"
	LinkedTransactionStatusesApproved LinkedTransactionStatuses = "APPROVED"
	LinkedTransactionStatusesRejected LinkedTransactionStatuses = "REJECTED"
)

var AllLinkedTransactionStatuses = []LinkedTransactionStatuses{
	LinkedTransactionStatusesPending,
	LinkedTransactionStatusesApproved,
	LinkedTransactionStatusesRejected,
}

func (e LinkedTransactionStatuses) IsValid() bool {
	switch e {
	case LinkedTransactionStatusesPending, LinkedTransactionStatusesApproved, LinkedTransactionStatusesRejected:
		return true
	}
	return false
}

func (e LinkedTransactionStatuses) String() string {
	return string(e)
}

func (e *LinkedTransactionStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkedTransactionStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkedTransactionStatuses", str)
	}
	return nil
}

func (e LinkedTransactionStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LinkedTransactionTypes string

const (
	LinkedTransactionTypesDeposit    LinkedTransactionTypes = "DEPOSIT"
	LinkedTransactionTypesWithdrawal LinkedTransactionTypes = "WITHDRAWAL"
	LinkedTransactionTypesApplyFee   LinkedTransactionTypes = "APPLY_FEE"
)

var AllLinkedTransactionTypes = []LinkedTransactionTypes{
	LinkedTransactionTypesDeposit,
	LinkedTransactionTypesWithdrawal,
	LinkedTransactionTypesApplyFee,
}

func (e LinkedTransactionTypes) IsValid() bool {
	switch e {
	case LinkedTransactionTypesDeposit, LinkedTransactionTypesWithdrawal, LinkedTransactionTypesApplyFee:
		return true
	}
	return false
}

func (e LinkedTransactionTypes) String() string {
	return string(e)
}

func (e *LinkedTransactionTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkedTransactionTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkedTransactionTypes", str)
	}
	return nil
}

func (e LinkedTransactionTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationStatuses string

const (
	OrganizationStatusesActive   OrganizationStatuses = "ACTIVE"
	OrganizationStatusesInactive OrganizationStatuses = "INACTIVE"
)

var AllOrganizationStatuses = []OrganizationStatuses{
	OrganizationStatusesActive,
	OrganizationStatusesInactive,
}

func (e OrganizationStatuses) IsValid() bool {
	switch e {
	case OrganizationStatusesActive, OrganizationStatusesInactive:
		return true
	}
	return false
}

func (e OrganizationStatuses) String() string {
	return string(e)
}

func (e *OrganizationStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationStatuses", str)
	}
	return nil
}

func (e OrganizationStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type POAActionTypes string

const (
	POAActionTypesChangeStatus POAActionTypes = "CHANGE_STATUS"
)

var AllPOAActionTypes = []POAActionTypes{
	POAActionTypesChangeStatus,
}

func (e POAActionTypes) IsValid() bool {
	switch e {
	case POAActionTypesChangeStatus:
		return true
	}
	return false
}

func (e POAActionTypes) String() string {
	return string(e)
}

func (e *POAActionTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = POAActionTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid POAActionTypes", str)
	}
	return nil
}

func (e POAActionTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type POAStatuses string

const (
	POAStatusesPending      POAStatuses = "PENDING"
	POAStatusesManualReview POAStatuses = "MANUAL_REVIEW"
	POAStatusesApproved     POAStatuses = "APPROVED"
	POAStatusesDeclined     POAStatuses = "DECLINED"
)

var AllPOAStatuses = []POAStatuses{
	POAStatusesPending,
	POAStatusesManualReview,
	POAStatusesApproved,
	POAStatusesDeclined,
}

func (e POAStatuses) IsValid() bool {
	switch e {
	case POAStatusesPending, POAStatusesManualReview, POAStatusesApproved, POAStatusesDeclined:
		return true
	}
	return false
}

func (e POAStatuses) String() string {
	return string(e)
}

func (e *POAStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = POAStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid POAStatuses", str)
	}
	return nil
}

func (e POAStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductStatuses string

const (
	ProductStatusesActive   ProductStatuses = "ACTIVE"
	ProductStatusesInactive ProductStatuses = "INACTIVE"
)

var AllProductStatuses = []ProductStatuses{
	ProductStatusesActive,
	ProductStatusesInactive,
}

func (e ProductStatuses) IsValid() bool {
	switch e {
	case ProductStatusesActive, ProductStatusesInactive:
		return true
	}
	return false
}

func (e ProductStatuses) String() string {
	return string(e)
}

func (e *ProductStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatuses", str)
	}
	return nil
}

func (e ProductStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductTypes string

const (
	ProductTypesFixedDeposit   ProductTypes = "FIXED_DEPOSIT"
	ProductTypesCurrentAccount ProductTypes = "CURRENT_ACCOUNT"
)

var AllProductTypes = []ProductTypes{
	ProductTypesFixedDeposit,
	ProductTypesCurrentAccount,
}

func (e ProductTypes) IsValid() bool {
	switch e {
	case ProductTypesFixedDeposit, ProductTypesCurrentAccount:
		return true
	}
	return false
}

func (e ProductTypes) String() string {
	return string(e)
}

func (e *ProductTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductTypes", str)
	}
	return nil
}

func (e ProductTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuestionaryStatuses string

const (
	QuestionaryStatusesActive   QuestionaryStatuses = "ACTIVE"
	QuestionaryStatusesInactive QuestionaryStatuses = "INACTIVE"
)

var AllQuestionaryStatuses = []QuestionaryStatuses{
	QuestionaryStatusesActive,
	QuestionaryStatusesInactive,
}

func (e QuestionaryStatuses) IsValid() bool {
	switch e {
	case QuestionaryStatusesActive, QuestionaryStatusesInactive:
		return true
	}
	return false
}

func (e QuestionaryStatuses) String() string {
	return string(e)
}

func (e *QuestionaryStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionaryStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionaryStatuses", str)
	}
	return nil
}

func (e QuestionaryStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuestionaryTypes string

const (
	QuestionaryTypesReasons QuestionaryTypes = "REASONS"
)

var AllQuestionaryTypes = []QuestionaryTypes{
	QuestionaryTypesReasons,
}

func (e QuestionaryTypes) IsValid() bool {
	switch e {
	case QuestionaryTypesReasons:
		return true
	}
	return false
}

func (e QuestionaryTypes) String() string {
	return string(e)
}

func (e *QuestionaryTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionaryTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionaryTypes", str)
	}
	return nil
}

func (e QuestionaryTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportStatuses string

const (
	ReportStatusesPending      ReportStatuses = "PENDING"
	ReportStatusesManualReview ReportStatuses = "MANUAL_REVIEW"
	ReportStatusesApproved     ReportStatuses = "APPROVED"
	ReportStatusesDeclined     ReportStatuses = "DECLINED"
)

var AllReportStatuses = []ReportStatuses{
	ReportStatusesPending,
	ReportStatusesManualReview,
	ReportStatusesApproved,
	ReportStatusesDeclined,
}

func (e ReportStatuses) IsValid() bool {
	switch e {
	case ReportStatusesPending, ReportStatusesManualReview, ReportStatusesApproved, ReportStatusesDeclined:
		return true
	}
	return false
}

func (e ReportStatuses) String() string {
	return string(e)
}

func (e *ReportStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportStatuses", str)
	}
	return nil
}

func (e ReportStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StaffStatuses string

const (
	StaffStatusesActive   StaffStatuses = "ACTIVE"
	StaffStatusesInactive StaffStatuses = "INACTIVE"
)

var AllStaffStatuses = []StaffStatuses{
	StaffStatusesActive,
	StaffStatusesInactive,
}

func (e StaffStatuses) IsValid() bool {
	switch e {
	case StaffStatusesActive, StaffStatusesInactive:
		return true
	}
	return false
}

func (e StaffStatuses) String() string {
	return string(e)
}

func (e *StaffStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffStatuses", str)
	}
	return nil
}

func (e StaffStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionStatuses string

const (
	TransactionStatusesPending  TransactionStatuses = "PENDING"
	TransactionStatusesApproved TransactionStatuses = "APPROVED"
	TransactionStatusesRejected TransactionStatuses = "REJECTED"
)

var AllTransactionStatuses = []TransactionStatuses{
	TransactionStatusesPending,
	TransactionStatusesApproved,
	TransactionStatusesRejected,
}

func (e TransactionStatuses) IsValid() bool {
	switch e {
	case TransactionStatusesPending, TransactionStatusesApproved, TransactionStatusesRejected:
		return true
	}
	return false
}

func (e TransactionStatuses) String() string {
	return string(e)
}

func (e *TransactionStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStatuses", str)
	}
	return nil
}

func (e TransactionStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionTypeStatuses string

const (
	TransactionTypeStatusesActive   TransactionTypeStatuses = "ACTIVE"
	TransactionTypeStatusesInactive TransactionTypeStatuses = "INACTIVE"
)

var AllTransactionTypeStatuses = []TransactionTypeStatuses{
	TransactionTypeStatusesActive,
	TransactionTypeStatusesInactive,
}

func (e TransactionTypeStatuses) IsValid() bool {
	switch e {
	case TransactionTypeStatusesActive, TransactionTypeStatusesInactive:
		return true
	}
	return false
}

func (e TransactionTypeStatuses) String() string {
	return string(e)
}

func (e *TransactionTypeStatuses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionTypeStatuses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionTypeStatuses", str)
	}
	return nil
}

func (e TransactionTypeStatuses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
