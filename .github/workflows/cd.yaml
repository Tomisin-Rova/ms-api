name: Push to GCR and create Github release

on:
  push:
    tags:
      - '*'

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  ORG: roava.io/services
  IMAGE: ms.api
  REGISTRY_HOSTNAME: gcr.io/${{ secrets.RUN_PROJECT }}

jobs:

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true


  deploy_to_gcr:
    name: Deploy tagged docker image to GCR
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Checkout code
        uses: actions/checkout@v2
      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker
      # Push the Docker image to Google Container Registry
      # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
      # docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA"
      - name: Build
        run: |
          export TAG=${{ steps.get_version.outputs.VERSION }}
          export CONTAINER=`echo $ORG/$IMAGE`
          docker build -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .
      - name: Publish
        run: |
          export TAG=${{ steps.get_version.outputs.VERSION }}
          export CONTAINER=`echo $ORG/$IMAGE`
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG"
          docker tag "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" "$REGISTRY_HOSTNAME"/"$CONTAINER":stable
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":stable
          docker tag "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" "$REGISTRY_HOSTNAME"/"$CONTAINER":"latest"
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"latest"

