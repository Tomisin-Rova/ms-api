name: Build, deploy to GCR
on:
  push:
    branches:
      - develop

env:
  PROJECT_ID: ${{ secrets.PROJECT_SHARED }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  ORG: roava.io/services
  IMAGE: ms.aml
  REGISTRY_HOSTNAME: eu.gcr.io/${{ secrets.PROJECT_SHARED }}

jobs:
  lint:
    name: Lint
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: ENV
        run: env
      # Setup Go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15 # The Go version to download (if necessary) and use.
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v2
      # Set credentials to get zebra library
      - name: Setup credentials to access private repo
        run: git config --global url."https://${{ secrets.PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      # Run fmt of code
      - name: check formatting
        run: make fmt-check
      # Run vet & lint on the code
      - name: Run code vet
        run: make vet
      # Run vet & lint on the code
      - name: Run code lint
        run: make lint

  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [lint] # Only run this workflow when "lint" workflow succeeds
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Setup Go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15 # The Go version to download (if necessary) and use.
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v2
      # Set credentials to get zebra library
      - name: Setup credentials to access private repo
        run: git config --global url."https://${{ secrets.PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      # Run unit tests + coverage
      - name: Run unit tests
        run: make test

  build:
    name: Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [lint, test]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Setup Go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15 # The Go version to download (if necessary) and use.
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v2
      # Set credentials to get zebra library
      - name: Setup credentials to access private repo
        run: git config --global url."https://${{ secrets.PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      # Run build of the application
      - name: Run build
        run: go build .

  package:
    name: Package (docker)
    runs-on: ubuntu-latest
    needs: [build] # Only run this workflow when "build" workflow succeeds

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/heads\//}

      - name: Get short commit id
        id: vars
        run: echo "::set-output name=SHORT_COMMIT_ID::$(git rev-parse --short HEAD)"

      - name: Print version
        run: |
          echo [github.tag]: ${{ steps.get_version.outputs.VERSION }}
          echo [github.sha]: ${{ github.sha }}
          echo [github.ref]: ${{ github.ref }}
          echo [github.actor]: trigered by $GITHUB_ACTOR

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup gcloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.SA_SHARED }}
          project_id: ${{ secrets.PROJECT_SHARED }}

      - name: Configure docker
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
      - name: Build the Docker image
        id: build
        run: |
          export TAG=`echo ${{ steps.get_version.outputs.VERSION }}`
          export CONTAINER=`echo $ORG/$IMAGE`
          docker build -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" \
          -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"${GITHUB_SHA::8}" \
          -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg ACCESS_TOKEN="${{ secrets.PAT }}" \
            --build-arg GITHUB_REF="$GITHUB_REF" .
          docker tag "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" "$REGISTRY_HOSTNAME"/"$CONTAINER":latest

      - name: Publish
        id: publish
        run: |
          export TAG=`echo ${{ steps.get_version.outputs.VERSION }}`
          export CONTAINER=`echo $ORG/$IMAGE`
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG"
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":latest

  deploy:
    name: Deploy to DEV
    runs-on: [self-hosted, linux, x64, dev]
    needs: [package]

    steps:
      - name: Deploy service
        run: |
          export SERVICE_NAME=`echo $GITHUB_REPOSITORY | cut -d'/' -f2`
          export VERSION_NAME=`echo $GITHUB_REF | cut -d'/' -f3`
          deploy "${SERVICE_NAME}" "${VERSION_NAME}"

