// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	onboarding "ms.api/protos/pb/onboarding"

	types "ms.api/protos/pb/types"
)

// OnboardingServiceClient is an autogenerated mock type for the OnboardingServiceClient type
type OnboardingServiceClient struct {
	mock.Mock
}

// GetCDD provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) GetCDD(ctx context.Context, in *onboarding.GetCDDRequest, opts ...grpc.CallOption) (*types.CDD, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.CDD
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.GetCDDRequest, ...grpc.CallOption) *types.CDD); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CDD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.GetCDDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCDDs provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) GetCDDs(ctx context.Context, in *onboarding.GetCDDsRequest, opts ...grpc.CallOption) (*onboarding.GetCDDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *onboarding.GetCDDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.GetCDDsRequest, ...grpc.CallOption) *onboarding.GetCDDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onboarding.GetCDDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.GetCDDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnfidoSDKToken provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) GetOnfidoSDKToken(ctx context.Context, in *onboarding.GetOnfidoSDKTokenRequest, opts ...grpc.CallOption) (*onboarding.GetOnfidoSDKTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *onboarding.GetOnfidoSDKTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.GetOnfidoSDKTokenRequest, ...grpc.CallOption) *onboarding.GetOnfidoSDKTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onboarding.GetOnfidoSDKTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.GetOnfidoSDKTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestResubmit provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) RequestResubmit(ctx context.Context, in *onboarding.RequestResubmitRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.RequestResubmitRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.RequestResubmitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitCDD provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) SubmitCDD(ctx context.Context, in *onboarding.SubmitCDDRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.SubmitCDDRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.SubmitCDDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAMLStatus provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) UpdateAMLStatus(ctx context.Context, in *onboarding.UpdateAMLStatusRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.UpdateAMLStatusRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.UpdateAMLStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKYCStatus provides a mock function with given fields: ctx, in, opts
func (_m *OnboardingServiceClient) UpdateKYCStatus(ctx context.Context, in *onboarding.UpdateKYCStatusRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *onboarding.UpdateKYCStatusRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onboarding.UpdateKYCStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
