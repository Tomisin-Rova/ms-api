// Code generated by MockGen. DO NOT EDIT.
// Source: ./protos/pb/onboarding/onboarding.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	onboarding "ms.api/protos/pb/onboarding"
	types "ms.api/protos/pb/types"
)

// MockOnboardingServiceClient is a mock of OnboardingServiceClient interface.
type MockOnboardingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOnboardingServiceClientMockRecorder
}

// MockOnboardingServiceClientMockRecorder is the mock recorder for MockOnboardingServiceClient.
type MockOnboardingServiceClientMockRecorder struct {
	mock *MockOnboardingServiceClient
}

// NewMockOnboardingServiceClient creates a new mock instance.
func NewMockOnboardingServiceClient(ctrl *gomock.Controller) *MockOnboardingServiceClient {
	mock := &MockOnboardingServiceClient{ctrl: ctrl}
	mock.recorder = &MockOnboardingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnboardingServiceClient) EXPECT() *MockOnboardingServiceClientMockRecorder {
	return m.recorder
}

// CreateFAQ mocks base method.
func (m *MockOnboardingServiceClient) CreateFAQ(ctx context.Context, in *onboarding.CreateFAQRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFAQ", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFAQ indicates an expected call of CreateFAQ.
func (mr *MockOnboardingServiceClientMockRecorder) CreateFAQ(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFAQ", reflect.TypeOf((*MockOnboardingServiceClient)(nil).CreateFAQ), varargs...)
}

// DeleteFAQ mocks base method.
func (m *MockOnboardingServiceClient) DeleteFAQ(ctx context.Context, in *onboarding.DeleteFAQRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFAQ", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFAQ indicates an expected call of DeleteFAQ.
func (mr *MockOnboardingServiceClientMockRecorder) DeleteFAQ(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFAQ", reflect.TypeOf((*MockOnboardingServiceClient)(nil).DeleteFAQ), varargs...)
}

// GetCDD mocks base method.
func (m *MockOnboardingServiceClient) GetCDD(ctx context.Context, in *onboarding.GetCDDRequest, opts ...grpc.CallOption) (*types.CDD, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCDD", varargs...)
	ret0, _ := ret[0].(*types.CDD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCDD indicates an expected call of GetCDD.
func (mr *MockOnboardingServiceClientMockRecorder) GetCDD(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCDD", reflect.TypeOf((*MockOnboardingServiceClient)(nil).GetCDD), varargs...)
}

// GetCDDs mocks base method.
func (m *MockOnboardingServiceClient) GetCDDs(ctx context.Context, in *onboarding.GetCDDsRequest, opts ...grpc.CallOption) (*onboarding.GetCDDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCDDs", varargs...)
	ret0, _ := ret[0].(*onboarding.GetCDDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCDDs indicates an expected call of GetCDDs.
func (mr *MockOnboardingServiceClientMockRecorder) GetCDDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCDDs", reflect.TypeOf((*MockOnboardingServiceClient)(nil).GetCDDs), varargs...)
}

// GetFAQs mocks base method.
func (m *MockOnboardingServiceClient) GetFAQs(ctx context.Context, in *onboarding.GetFAQRequest, opts ...grpc.CallOption) (*onboarding.GetFAQResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFAQs", varargs...)
	ret0, _ := ret[0].(*onboarding.GetFAQResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFAQs indicates an expected call of GetFAQs.
func (mr *MockOnboardingServiceClientMockRecorder) GetFAQs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFAQs", reflect.TypeOf((*MockOnboardingServiceClient)(nil).GetFAQs), varargs...)
}

// GetOnfidoSDKToken mocks base method.
func (m *MockOnboardingServiceClient) GetOnfidoSDKToken(ctx context.Context, in *onboarding.GetOnfidoSDKTokenRequest, opts ...grpc.CallOption) (*onboarding.GetOnfidoSDKTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOnfidoSDKToken", varargs...)
	ret0, _ := ret[0].(*onboarding.GetOnfidoSDKTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnfidoSDKToken indicates an expected call of GetOnfidoSDKToken.
func (mr *MockOnboardingServiceClientMockRecorder) GetOnfidoSDKToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnfidoSDKToken", reflect.TypeOf((*MockOnboardingServiceClient)(nil).GetOnfidoSDKToken), varargs...)
}

// RequestResubmit mocks base method.
func (m *MockOnboardingServiceClient) RequestResubmit(ctx context.Context, in *onboarding.RequestResubmitRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestResubmit", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestResubmit indicates an expected call of RequestResubmit.
func (mr *MockOnboardingServiceClientMockRecorder) RequestResubmit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestResubmit", reflect.TypeOf((*MockOnboardingServiceClient)(nil).RequestResubmit), varargs...)
}

// SubmitCDD mocks base method.
func (m *MockOnboardingServiceClient) SubmitCDD(ctx context.Context, in *onboarding.SubmitCDDRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitCDD", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitCDD indicates an expected call of SubmitCDD.
func (mr *MockOnboardingServiceClientMockRecorder) SubmitCDD(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCDD", reflect.TypeOf((*MockOnboardingServiceClient)(nil).SubmitCDD), varargs...)
}

// UpdateAMLStatus mocks base method.
func (m *MockOnboardingServiceClient) UpdateAMLStatus(ctx context.Context, in *onboarding.UpdateAMLStatusRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAMLStatus", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAMLStatus indicates an expected call of UpdateAMLStatus.
func (mr *MockOnboardingServiceClientMockRecorder) UpdateAMLStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAMLStatus", reflect.TypeOf((*MockOnboardingServiceClient)(nil).UpdateAMLStatus), varargs...)
}

// UpdateFAQ mocks base method.
func (m *MockOnboardingServiceClient) UpdateFAQ(ctx context.Context, in *onboarding.UpdateFAQRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFAQ", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFAQ indicates an expected call of UpdateFAQ.
func (mr *MockOnboardingServiceClientMockRecorder) UpdateFAQ(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFAQ", reflect.TypeOf((*MockOnboardingServiceClient)(nil).UpdateFAQ), varargs...)
}

// UpdateKYCStatus mocks base method.
func (m *MockOnboardingServiceClient) UpdateKYCStatus(ctx context.Context, in *onboarding.UpdateKYCStatusRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKYCStatus", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKYCStatus indicates an expected call of UpdateKYCStatus.
func (mr *MockOnboardingServiceClientMockRecorder) UpdateKYCStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKYCStatus", reflect.TypeOf((*MockOnboardingServiceClient)(nil).UpdateKYCStatus), varargs...)
}

// MockOnboardingServiceServer is a mock of OnboardingServiceServer interface.
type MockOnboardingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOnboardingServiceServerMockRecorder
}

// MockOnboardingServiceServerMockRecorder is the mock recorder for MockOnboardingServiceServer.
type MockOnboardingServiceServerMockRecorder struct {
	mock *MockOnboardingServiceServer
}

// NewMockOnboardingServiceServer creates a new mock instance.
func NewMockOnboardingServiceServer(ctrl *gomock.Controller) *MockOnboardingServiceServer {
	mock := &MockOnboardingServiceServer{ctrl: ctrl}
	mock.recorder = &MockOnboardingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnboardingServiceServer) EXPECT() *MockOnboardingServiceServerMockRecorder {
	return m.recorder
}

// CreateFAQ mocks base method.
func (m *MockOnboardingServiceServer) CreateFAQ(arg0 context.Context, arg1 *onboarding.CreateFAQRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFAQ", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFAQ indicates an expected call of CreateFAQ.
func (mr *MockOnboardingServiceServerMockRecorder) CreateFAQ(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFAQ", reflect.TypeOf((*MockOnboardingServiceServer)(nil).CreateFAQ), arg0, arg1)
}

// DeleteFAQ mocks base method.
func (m *MockOnboardingServiceServer) DeleteFAQ(arg0 context.Context, arg1 *onboarding.DeleteFAQRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFAQ", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFAQ indicates an expected call of DeleteFAQ.
func (mr *MockOnboardingServiceServerMockRecorder) DeleteFAQ(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFAQ", reflect.TypeOf((*MockOnboardingServiceServer)(nil).DeleteFAQ), arg0, arg1)
}

// GetCDD mocks base method.
func (m *MockOnboardingServiceServer) GetCDD(arg0 context.Context, arg1 *onboarding.GetCDDRequest) (*types.CDD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCDD", arg0, arg1)
	ret0, _ := ret[0].(*types.CDD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCDD indicates an expected call of GetCDD.
func (mr *MockOnboardingServiceServerMockRecorder) GetCDD(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCDD", reflect.TypeOf((*MockOnboardingServiceServer)(nil).GetCDD), arg0, arg1)
}

// GetCDDs mocks base method.
func (m *MockOnboardingServiceServer) GetCDDs(arg0 context.Context, arg1 *onboarding.GetCDDsRequest) (*onboarding.GetCDDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCDDs", arg0, arg1)
	ret0, _ := ret[0].(*onboarding.GetCDDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCDDs indicates an expected call of GetCDDs.
func (mr *MockOnboardingServiceServerMockRecorder) GetCDDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCDDs", reflect.TypeOf((*MockOnboardingServiceServer)(nil).GetCDDs), arg0, arg1)
}

// GetFAQs mocks base method.
func (m *MockOnboardingServiceServer) GetFAQs(arg0 context.Context, arg1 *onboarding.GetFAQRequest) (*onboarding.GetFAQResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFAQs", arg0, arg1)
	ret0, _ := ret[0].(*onboarding.GetFAQResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFAQs indicates an expected call of GetFAQs.
func (mr *MockOnboardingServiceServerMockRecorder) GetFAQs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFAQs", reflect.TypeOf((*MockOnboardingServiceServer)(nil).GetFAQs), arg0, arg1)
}

// GetOnfidoSDKToken mocks base method.
func (m *MockOnboardingServiceServer) GetOnfidoSDKToken(arg0 context.Context, arg1 *onboarding.GetOnfidoSDKTokenRequest) (*onboarding.GetOnfidoSDKTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnfidoSDKToken", arg0, arg1)
	ret0, _ := ret[0].(*onboarding.GetOnfidoSDKTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnfidoSDKToken indicates an expected call of GetOnfidoSDKToken.
func (mr *MockOnboardingServiceServerMockRecorder) GetOnfidoSDKToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnfidoSDKToken", reflect.TypeOf((*MockOnboardingServiceServer)(nil).GetOnfidoSDKToken), arg0, arg1)
}

// RequestResubmit mocks base method.
func (m *MockOnboardingServiceServer) RequestResubmit(arg0 context.Context, arg1 *onboarding.RequestResubmitRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestResubmit", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestResubmit indicates an expected call of RequestResubmit.
func (mr *MockOnboardingServiceServerMockRecorder) RequestResubmit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestResubmit", reflect.TypeOf((*MockOnboardingServiceServer)(nil).RequestResubmit), arg0, arg1)
}

// SubmitCDD mocks base method.
func (m *MockOnboardingServiceServer) SubmitCDD(arg0 context.Context, arg1 *onboarding.SubmitCDDRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCDD", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitCDD indicates an expected call of SubmitCDD.
func (mr *MockOnboardingServiceServerMockRecorder) SubmitCDD(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCDD", reflect.TypeOf((*MockOnboardingServiceServer)(nil).SubmitCDD), arg0, arg1)
}

// UpdateAMLStatus mocks base method.
func (m *MockOnboardingServiceServer) UpdateAMLStatus(arg0 context.Context, arg1 *onboarding.UpdateAMLStatusRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAMLStatus", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAMLStatus indicates an expected call of UpdateAMLStatus.
func (mr *MockOnboardingServiceServerMockRecorder) UpdateAMLStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAMLStatus", reflect.TypeOf((*MockOnboardingServiceServer)(nil).UpdateAMLStatus), arg0, arg1)
}

// UpdateFAQ mocks base method.
func (m *MockOnboardingServiceServer) UpdateFAQ(arg0 context.Context, arg1 *onboarding.UpdateFAQRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFAQ", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFAQ indicates an expected call of UpdateFAQ.
func (mr *MockOnboardingServiceServerMockRecorder) UpdateFAQ(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFAQ", reflect.TypeOf((*MockOnboardingServiceServer)(nil).UpdateFAQ), arg0, arg1)
}

// UpdateKYCStatus mocks base method.
func (m *MockOnboardingServiceServer) UpdateKYCStatus(arg0 context.Context, arg1 *onboarding.UpdateKYCStatusRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKYCStatus", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKYCStatus indicates an expected call of UpdateKYCStatus.
func (mr *MockOnboardingServiceServerMockRecorder) UpdateKYCStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKYCStatus", reflect.TypeOf((*MockOnboardingServiceServer)(nil).UpdateKYCStatus), arg0, arg1)
}
