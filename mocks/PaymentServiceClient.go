// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	payment "ms.api/protos/pb/payment"

	types "ms.api/protos/pb/types"
)

// PaymentServiceClient is an autogenerated mock type for the PaymentServiceClient type
type PaymentServiceClient struct {
	mock.Mock
}

// AddBeneficiaryAccount provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) AddBeneficiaryAccount(ctx context.Context, in *payment.AddBeneficiaryAccountRequest, opts ...grpc.CallOption) (*types.BeneficiaryAccount, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.BeneficiaryAccount
	if rf, ok := ret.Get(0).(func(context.Context, *payment.AddBeneficiaryAccountRequest, ...grpc.CallOption) *types.BeneficiaryAccount); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BeneficiaryAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.AddBeneficiaryAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBeneficiary provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) CreateBeneficiary(ctx context.Context, in *payment.CreateBeneficiaryRequest, opts ...grpc.CallOption) (*types.Beneficiary, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Beneficiary
	if rf, ok := ret.Get(0).(func(context.Context, *payment.CreateBeneficiaryRequest, ...grpc.CallOption) *types.Beneficiary); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Beneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.CreateBeneficiaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransfer provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) CreateTransfer(ctx context.Context, in *payment.CreateTransferRequest, opts ...grpc.CallOption) (*types.Transaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *payment.CreateTransferRequest, ...grpc.CallOption) *types.Transaction); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.CreateTransferRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBeneficiaryAccount provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) DeleteBeneficiaryAccount(ctx context.Context, in *payment.DeleteBeneficiaryAccountRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *payment.DeleteBeneficiaryAccountRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.DeleteBeneficiaryAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBeneficiaries provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetBeneficiaries(ctx context.Context, in *payment.GetBeneficiariesRequest, opts ...grpc.CallOption) (*payment.GetBeneficiariesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *payment.GetBeneficiariesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *payment.GetBeneficiariesRequest, ...grpc.CallOption) *payment.GetBeneficiariesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.GetBeneficiariesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.GetBeneficiariesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBeneficiary provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetBeneficiary(ctx context.Context, in *payment.GetBeneficiaryRequest, opts ...grpc.CallOption) (*types.Beneficiary, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Beneficiary
	if rf, ok := ret.Get(0).(func(context.Context, *payment.GetBeneficiaryRequest, ...grpc.CallOption) *types.Beneficiary); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Beneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.GetBeneficiaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetTransaction(ctx context.Context, in *payment.GetTransactionRequest, opts ...grpc.CallOption) (*types.Transaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *payment.GetTransactionRequest, ...grpc.CallOption) *types.Transaction); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionTypes provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetTransactionTypes(ctx context.Context, in *payment.GetTransactionTypesRequest, opts ...grpc.CallOption) (*payment.GetTransactionTypesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *payment.GetTransactionTypesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *payment.GetTransactionTypesRequest, ...grpc.CallOption) *payment.GetTransactionTypesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.GetTransactionTypesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.GetTransactionTypesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetTransactions(ctx context.Context, in *payment.GetTransactionsRequest, opts ...grpc.CallOption) (*payment.GetTransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *payment.GetTransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *payment.GetTransactionsRequest, ...grpc.CallOption) *payment.GetTransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.GetTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payment.GetTransactionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
