// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	paymentService "ms.api/protos/pb/paymentService"

	types "ms.api/protos/pb/types"
)

// PaymentServiceClient is an autogenerated mock type for the PaymentServiceClient type
type PaymentServiceClient struct {
	mock.Mock
}

// AddPayeeAccount provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) AddPayeeAccount(ctx context.Context, in *paymentService.AddPayeeAccountRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.AddPayeeAccountRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.AddPayeeAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayee provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) CreatePayee(ctx context.Context, in *paymentService.CreatePayeeRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.CreatePayeeRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.CreatePayeeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) CreatePayment(ctx context.Context, in *paymentService.CreatePaymentRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.CreatePaymentRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.CreatePaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePayeeAccount provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) DeletePayeeAccount(ctx context.Context, in *paymentService.DeletePayeeAccountRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.DeletePayeeAccountRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.DeletePayeeAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayee provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetPayee(ctx context.Context, in *paymentService.GetPayeeRequest, opts ...grpc.CallOption) (*types.Payee, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Payee
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.GetPayeeRequest, ...grpc.CallOption) *types.Payee); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Payee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.GetPayeeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayees provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetPayees(ctx context.Context, in *paymentService.GetPayeesRequest, opts ...grpc.CallOption) (*types.Payees, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Payees
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.GetPayeesRequest, ...grpc.CallOption) *types.Payees); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Payees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.GetPayeesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetPayment(ctx context.Context, in *paymentService.GetPaymentRequest, opts ...grpc.CallOption) (*types.Payment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Payment
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.GetPaymentRequest, ...grpc.CallOption) *types.Payment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.GetPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayments provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) GetPayments(ctx context.Context, in *paymentService.GetPaymentsRequest, opts ...grpc.CallOption) (*types.Payments, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Payments
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.GetPaymentsRequest, ...grpc.CallOption) *types.Payments); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Payments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.GetPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayee provides a mock function with given fields: ctx, in, opts
func (_m *PaymentServiceClient) UpdatePayee(ctx context.Context, in *paymentService.UpdatePayeeRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *paymentService.UpdatePayeeRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *paymentService.UpdatePayeeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
