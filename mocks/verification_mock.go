// Code generated by MockGen. DO NOT EDIT.
// Source: ./protos/pb/verification/verification.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	types "ms.api/protos/pb/types"
	verification "ms.api/protos/pb/verification"
)

// MockVerificationServiceClient is a mock of VerificationServiceClient interface.
type MockVerificationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationServiceClientMockRecorder
}

// MockVerificationServiceClientMockRecorder is the mock recorder for MockVerificationServiceClient.
type MockVerificationServiceClientMockRecorder struct {
	mock *MockVerificationServiceClient
}

// NewMockVerificationServiceClient creates a new mock instance.
func NewMockVerificationServiceClient(ctrl *gomock.Controller) *MockVerificationServiceClient {
	mock := &MockVerificationServiceClient{ctrl: ctrl}
	mock.recorder = &MockVerificationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationServiceClient) EXPECT() *MockVerificationServiceClientMockRecorder {
	return m.recorder
}

// RequestOTP mocks base method.
func (m *MockVerificationServiceClient) RequestOTP(ctx context.Context, in *verification.RequestOTPRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestOTP", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOTP indicates an expected call of RequestOTP.
func (mr *MockVerificationServiceClientMockRecorder) RequestOTP(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOTP", reflect.TypeOf((*MockVerificationServiceClient)(nil).RequestOTP), varargs...)
}

// VerifyOTP mocks base method.
func (m *MockVerificationServiceClient) VerifyOTP(ctx context.Context, in *verification.VerifyOTPRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOTP", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockVerificationServiceClientMockRecorder) VerifyOTP(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockVerificationServiceClient)(nil).VerifyOTP), varargs...)
}

// MockVerificationServiceServer is a mock of VerificationServiceServer interface.
type MockVerificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationServiceServerMockRecorder
}

// MockVerificationServiceServerMockRecorder is the mock recorder for MockVerificationServiceServer.
type MockVerificationServiceServerMockRecorder struct {
	mock *MockVerificationServiceServer
}

// NewMockVerificationServiceServer creates a new mock instance.
func NewMockVerificationServiceServer(ctrl *gomock.Controller) *MockVerificationServiceServer {
	mock := &MockVerificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockVerificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationServiceServer) EXPECT() *MockVerificationServiceServerMockRecorder {
	return m.recorder
}

// RequestOTP mocks base method.
func (m *MockVerificationServiceServer) RequestOTP(arg0 context.Context, arg1 *verification.RequestOTPRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOTP", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOTP indicates an expected call of RequestOTP.
func (mr *MockVerificationServiceServerMockRecorder) RequestOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOTP", reflect.TypeOf((*MockVerificationServiceServer)(nil).RequestOTP), arg0, arg1)
}

// VerifyOTP mocks base method.
func (m *MockVerificationServiceServer) VerifyOTP(arg0 context.Context, arg1 *verification.VerifyOTPRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockVerificationServiceServerMockRecorder) VerifyOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockVerificationServiceServer)(nil).VerifyOTP), arg0, arg1)
}
