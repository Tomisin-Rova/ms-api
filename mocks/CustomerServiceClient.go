// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	customer "ms.api/protos/pb/customer"

	mock "github.com/stretchr/testify/mock"

	types "ms.api/protos/pb/types"
)

// CustomerServiceClient is an autogenerated mock type for the CustomerServiceClient type
type CustomerServiceClient struct {
	mock.Mock
}

// AnswerQuestionary provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) AnswerQuestionary(ctx context.Context, in *customer.AnswerQuestionaryRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.AnswerQuestionaryRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.AnswerQuestionaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBVN provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) CheckBVN(ctx context.Context, in *customer.CheckBVNRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.CheckBVNRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.CheckBVNRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCustomerData provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) CheckCustomerData(ctx context.Context, in *customer.CheckCustomerDataRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.CheckCustomerDataRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.CheckCustomerDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCustomerEmail provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) CheckCustomerEmail(ctx context.Context, in *customer.CheckCustomerEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.CheckCustomerEmailRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.CheckCustomerEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmail provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) CheckEmail(ctx context.Context, in *customer.CheckEmailRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.CheckEmailRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.CheckEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContent provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetContent(ctx context.Context, in *customer.GetContentRequest, opts ...grpc.CallOption) (*types.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Content
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetContentRequest, ...grpc.CallOption) *types.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContents provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetContents(ctx context.Context, in *customer.GetContentsRequest, opts ...grpc.CallOption) (*customer.GetContentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customer.GetContentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetContentsRequest, ...grpc.CallOption) *customer.GetContentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.GetContentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetContentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetCustomer(ctx context.Context, in *customer.GetCustomerRequest, opts ...grpc.CallOption) (*types.Customer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetCustomerRequest, ...grpc.CallOption) *types.Customer); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetCustomers(ctx context.Context, in *customer.GetCustomersRequest, opts ...grpc.CallOption) (*customer.GetCustomersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customer.GetCustomersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetCustomersRequest, ...grpc.CallOption) *customer.GetCustomersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.GetCustomersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetCustomersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionaries provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetQuestionaries(ctx context.Context, in *customer.GetQuestionariesRequest, opts ...grpc.CallOption) (*customer.GetQuestionariesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customer.GetQuestionariesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetQuestionariesRequest, ...grpc.CallOption) *customer.GetQuestionariesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.GetQuestionariesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetQuestionariesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionary provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) GetQuestionary(ctx context.Context, in *customer.GetQuestionaryRequest, opts ...grpc.CallOption) (*types.Customer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *customer.GetQuestionaryRequest, ...grpc.CallOption) *types.Customer); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.GetQuestionaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Me provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) Me(ctx context.Context, in *customer.MeRequest, opts ...grpc.CallOption) (*customer.MeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customer.MeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.MeRequest, ...grpc.CallOption) *customer.MeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.MeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.MeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) Register(ctx context.Context, in *customer.RegisterRequest, opts ...grpc.CallOption) (*types.Customer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *customer.RegisterRequest, ...grpc.CallOption) *types.Customer); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetLoginPassword provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) ResetLoginPassword(ctx context.Context, in *customer.ResetLoginPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.ResetLoginPasswordRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.ResetLoginPasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetTransactionPassword provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) ResetTransactionPassword(ctx context.Context, in *customer.ResetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.ResetTransactionPasswordRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.ResetTransactionPasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAcceptance provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) SetAcceptance(ctx context.Context, in *customer.SetAcceptanceRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.SetAcceptanceRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.SetAcceptanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDevicePreferences provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) SetDevicePreferences(ctx context.Context, in *customer.SetDevicePreferencesRequest, opts ...grpc.CallOption) (*types.Device, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Device
	if rf, ok := ret.Get(0).(func(context.Context, *customer.SetDevicePreferencesRequest, ...grpc.CallOption) *types.Device); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.SetDevicePreferencesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeviceToken provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) SetDeviceToken(ctx context.Context, in *customer.SetDeviceTokenRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.SetDeviceTokenRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.SetDeviceTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransactionPassword provides a mock function with given fields: ctx, in, opts
func (_m *CustomerServiceClient) SetTransactionPassword(ctx context.Context, in *customer.SetTransactionPasswordRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.DefaultResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customer.SetTransactionPasswordRequest, ...grpc.CallOption) *types.DefaultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DefaultResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customer.SetTransactionPasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
