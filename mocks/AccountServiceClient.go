// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	accountService "ms.api/protos/pb/accountService"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "ms.api/protos/pb/types"
)

// AccountServiceClient is an autogenerated mock type for the AccountServiceClient type
type AccountServiceClient struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) CreateAccount(ctx context.Context, in *accountService.CreateAccountRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.CreateAccountRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.CreateAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetAccount(ctx context.Context, in *accountService.GetAccountRequest, opts ...grpc.CallOption) (*types.Account, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Account
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetAccountRequest, ...grpc.CallOption) *types.Account); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetAccounts(ctx context.Context, in *accountService.GetAccountsRequest, opts ...grpc.CallOption) (*accountService.GetAccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accountService.GetAccountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetAccountsRequest, ...grpc.CallOption) *accountService.GetAccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accountService.GetAccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetAccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetProduct(ctx context.Context, in *accountService.GetProductRequest, opts ...grpc.CallOption) (*types.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Product
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetProductRequest, ...grpc.CallOption) *types.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetProducts(ctx context.Context, in *accountService.GetProductsRequest, opts ...grpc.CallOption) (*accountService.GetProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accountService.GetProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetProductsRequest, ...grpc.CallOption) *accountService.GetProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accountService.GetProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetProductsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetTransaction(ctx context.Context, in *accountService.GetTransactionRequest, opts ...grpc.CallOption) (*types.Transaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetTransactionRequest, ...grpc.CallOption) *types.Transaction); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) GetTransactions(ctx context.Context, in *accountService.GetTransactionsRequest, opts ...grpc.CallOption) (*accountService.GetTransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *accountService.GetTransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.GetTransactionsRequest, ...grpc.CallOption) *accountService.GetTransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accountService.GetTransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.GetTransactionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateBVN provides a mock function with given fields: ctx, in, opts
func (_m *AccountServiceClient) ValidateBVN(ctx context.Context, in *accountService.ValidateBVNRequest, opts ...grpc.CallOption) (*types.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Response
	if rf, ok := ret.Get(0).(func(context.Context, *accountService.ValidateBVNRequest, ...grpc.CallOption) *types.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *accountService.ValidateBVNRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
