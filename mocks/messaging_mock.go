// Code generated by MockGen. DO NOT EDIT.
// Source: ./protos/pb/messaging/messaging.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	messaging "ms.api/protos/pb/messaging"
	types "ms.api/protos/pb/types"
)

// MockMessagingServiceClient is a mock of MessagingServiceClient interface.
type MockMessagingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceClientMockRecorder
}

// MockMessagingServiceClientMockRecorder is the mock recorder for MockMessagingServiceClient.
type MockMessagingServiceClientMockRecorder struct {
	mock *MockMessagingServiceClient
}

// NewMockMessagingServiceClient creates a new mock instance.
func NewMockMessagingServiceClient(ctrl *gomock.Controller) *MockMessagingServiceClient {
	mock := &MockMessagingServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingServiceClient) EXPECT() *MockMessagingServiceClientMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockMessagingServiceClient) SendNotification(ctx context.Context, in *messaging.SendNotificationRequest, opts ...grpc.CallOption) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendNotification", varargs...)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockMessagingServiceClientMockRecorder) SendNotification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockMessagingServiceClient)(nil).SendNotification), varargs...)
}

// MockMessagingServiceServer is a mock of MessagingServiceServer interface.
type MockMessagingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceServerMockRecorder
}

// MockMessagingServiceServerMockRecorder is the mock recorder for MockMessagingServiceServer.
type MockMessagingServiceServerMockRecorder struct {
	mock *MockMessagingServiceServer
}

// NewMockMessagingServiceServer creates a new mock instance.
func NewMockMessagingServiceServer(ctrl *gomock.Controller) *MockMessagingServiceServer {
	mock := &MockMessagingServiceServer{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingServiceServer) EXPECT() *MockMessagingServiceServerMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockMessagingServiceServer) SendNotification(arg0 context.Context, arg1 *messaging.SendNotificationRequest) (*types.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1)
	ret0, _ := ret[0].(*types.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockMessagingServiceServerMockRecorder) SendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockMessagingServiceServer)(nil).SendNotification), arg0, arg1)
}
